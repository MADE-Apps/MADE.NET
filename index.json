{
  "api/index.html": {
    "href": "api/index.html",
    "title": "Explore the APIs | MADE.NET",
    "keywords": "Explore the APIs Here you'll find all of the generated code documentation for the MADE.NET projects, similar to what you might find on Microsoft Docs! This documentation is designed to show you how each component of MADE.NET is constructed and provide a reference for you when building your projects."
  },
  "api/MADE.Collections.CollectionExtensions.html": {
    "href": "api/MADE.Collections.CollectionExtensions.html",
    "title": "Class CollectionExtensions | MADE.NET",
    "keywords": "Class CollectionExtensions Defines a collection of extensions for enumerables, lists, and collections. Inheritance System.Object CollectionExtensions Namespace : MADE.Collections Assembly : MADE.Collections.dll Syntax public static class CollectionExtensions : object Methods | Improve this Doc View Source AddIf<T>(IList<T>, T, Func<Boolean>) Adds the specified item to the collection based on the specified condition being true. Declaration public static void AddIf<T>(this IList<T> collection, T item, Func<bool> condition) Parameters Type Name Description IList <T> collection The collection to add the item to. T item The item to add. Func < System.Boolean > condition The condition required to add the item. Type Parameters Name Description T The type of item within the collection. | Improve this Doc View Source AddRange<T>(ICollection<T>, IEnumerable<T>) Adds a collection of items to another. Declaration public static void AddRange<T>(this ICollection<T> collection, IEnumerable<T> itemsToAdd) Parameters Type Name Description ICollection <T> collection The collection to add to. IEnumerable <T> itemsToAdd The items to add. Type Parameters Name Description T The type of items in the collection. Exceptions Type Condition System.ArgumentNullException The collection or itemsToAdd is null . | Improve this Doc View Source AddRangeIf<T>(ICollection<T>, IEnumerable<T>, Func<Boolean>) Adds the specified collection of items to the collection based on the specified condition being true. Declaration public static void AddRangeIf<T>(this ICollection<T> collection, IEnumerable<T> itemsToAdd, Func<bool> condition) Parameters Type Name Description ICollection <T> collection The collection to add the items to. IEnumerable <T> itemsToAdd The items to add. Func < System.Boolean > condition The condition required to add the items. Type Parameters Name Description T The type of item within the collection. | Improve this Doc View Source AreEquivalent<T>(ICollection<T>, ICollection<T>) Determines whether two collections are equivalent, containing all the same items with no regard to order. Declaration public static bool AreEquivalent<T>(this ICollection<T> expected, ICollection<T> actual) Parameters Type Name Description ICollection <T> expected The expected collection. ICollection <T> actual The actual collection. Returns Type Description System.Boolean True if the collections are equivalent; otherwise, false. Type Parameters Name Description T The type of item. | Improve this Doc View Source Chunk<T>(IEnumerable<T>, Int32) Chunks a collection of items into a collection of collections grouped into the specified chunk size. Declaration public static IEnumerable<IEnumerable<T>> Chunk<T>(this IEnumerable<T> source, int chunkSize = 25) Parameters Type Name Description IEnumerable <T> source The source collection to chunk. System.Int32 chunkSize The chunk size. Returns Type Description IEnumerable < IEnumerable <T>> A collection of collections containing the chunked items. Type Parameters Name Description T The type of item. | Improve this Doc View Source ForEach<T>(IEnumerable<T>, Action<T>) Performs the specified action on each item in the collection. Declaration public static void ForEach<T>(this IEnumerable<T> collection, Action<T> action) Parameters Type Name Description IEnumerable <T> collection The collection to action on. Action <T> action The action to perform. Type Parameters Name Description T The type of item in the collection. | Improve this Doc View Source InsertAtPotentialIndex<T>(IList<T>, T, Func<T, T, Boolean>) Inserts an item to the specified source at the potential index determined by the predicate . Declaration public static int InsertAtPotentialIndex<T>(this IList<T> source, T value, Func<T, T, bool> predicate) Parameters Type Name Description IList <T> source The source where the value should be inserted. T value The object to insert into the source . Func <T, T, System.Boolean > predicate The action to run to determine the position of the item based on the provided value and an item in the collection. Returns Type Description System.Int32 The inserted index of the item. Type Parameters Name Description T The type of items in the collection. Exceptions Type Condition System.NotSupportedException The System.Collections.Generic.IList`1 is read-only. | Improve this Doc View Source IsNullOrEmpty<T>(IEnumerable<T>) Indicates whether the specified collection is null or empty (containing no items). Declaration public static bool IsNullOrEmpty<T>(this IEnumerable<T> source) Parameters Type Name Description IEnumerable <T> source The collection to test. Returns Type Description System.Boolean true if the source parameter is null or empty (containing no items); otherwise, false . Type Parameters Name Description T The type of item in the collection. | Improve this Doc View Source MakeEqualTo<T>(ICollection<T>, IEnumerable<T>) Makes the given destination collection items equal to the items in the given source collection by adding or removing items from the destination. Declaration public static void MakeEqualTo<T>(this ICollection<T> destination, IEnumerable<T> source) Parameters Type Name Description ICollection <T> destination The destination collection to add or remove items to. IEnumerable <T> source The source collection to provide the items. Type Parameters Name Description T The type of item within the collection. | Improve this Doc View Source PotentialIndexOf<T>(IList<T>, T, Func<T, T, Boolean>) Gets the potential index of an item that does not currently exist within a collection based on the specified criteria. Declaration public static int PotentialIndexOf<T>(this IList<T> source, T value, Func<T, T, bool> predicate) Parameters Type Name Description IList <T> source The collection to get the index from. T value The object to determine an index for in the source . Func <T, T, System.Boolean > predicate The action to run to determine the position of the item based on the provided value and an item in the collection. Returns Type Description System.Int32 The potential index of the item. Type Parameters Name Description T The type of items in the collection. | Improve this Doc View Source RemoveIf<T>(IList<T>, T, Func<Boolean>) Removes the specified item from the collection based on the specified condition being true. Declaration public static void RemoveIf<T>(this IList<T> collection, T item, Func<bool> condition) Parameters Type Name Description IList <T> collection The collection to remove the item from. T item The item to remove. Func < System.Boolean > condition The condition required to remove the item. Type Parameters Name Description T The type of item within the collection. | Improve this Doc View Source RemoveRange<T>(ICollection<T>, IEnumerable<T>) Removes a collection of items from another. Declaration public static void RemoveRange<T>(this ICollection<T> collection, IEnumerable<T> itemsToRemove) Parameters Type Name Description ICollection <T> collection The collection to remove from. IEnumerable <T> itemsToRemove The items to remove from the collection. Type Parameters Name Description T The type of items in the collection. Exceptions Type Condition System.ArgumentNullException The collection or itemsToRemove is null . | Improve this Doc View Source RemoveRangeIf<T>(ICollection<T>, IEnumerable<T>, Func<Boolean>) Removes the specified collection of items from the collection based on the specified condition being true. Declaration public static void RemoveRangeIf<T>(this ICollection<T> collection, IEnumerable<T> itemsToRemove, Func<bool> condition) Parameters Type Name Description ICollection <T> collection The collection to remove the items from. IEnumerable <T> itemsToRemove The items to remove. Func < System.Boolean > condition The condition required to remove the items. Type Parameters Name Description T The type of item within the collection. | Improve this Doc View Source Shuffle<T>(IEnumerable<T>) Shuffles the elements of a sequence randomly. Declaration public static IEnumerable<T> Shuffle<T>(this IEnumerable<T> source) Parameters Type Name Description IEnumerable <T> source The collection to shuffle. Returns Type Description IEnumerable <T> The shuffled collection of items. Type Parameters Name Description T The type of item in the collection. | Improve this Doc View Source Sort<T, TKey>(ObservableCollection<T>, Func<T, TKey>) Sorts the elements in the entire using the specified comparer. Declaration public static void Sort<T, TKey>(this ObservableCollection<T> source, Func<T, TKey> comparer) Parameters Type Name Description ObservableCollection <T> source The source collection to sort. Func <T, TKey> comparer The implementation to use when comparing elements. Type Parameters Name Description T The type of item in the collection. TKey The key value of the item to sort on. | Improve this Doc View Source SortDescending<T, TKey>(ObservableCollection<T>, Func<T, TKey>) Sorts the elements in the entire using the specified comparer in descending order. Declaration public static void SortDescending<T, TKey>(this ObservableCollection<T> source, Func<T, TKey> comparer) Parameters Type Name Description ObservableCollection <T> source The source collection to sort. Func <T, TKey> comparer The implementation to use when comparing elements. Type Parameters Name Description T The type of item in the collection. TKey The key value of the item to sort on. | Improve this Doc View Source TakeFrom<T>(List<T>, Int32, Int32) Takes a number of elements from the specified collection from the specified starting index. Declaration public static IEnumerable<T> TakeFrom<T>(this List<T> list, int startingIndex, int takeCount) Parameters Type Name Description List <T> list The to take items from. System.Int32 startingIndex The index to start at in the . System.Int32 takeCount The number of items to take from the starting index of the . Returns Type Description IEnumerable <T> A collection of T items. Type Parameters Name Description T The type of elements in the collection. | Improve this Doc View Source Update<T>(IList<T>, T, Func<T, T, Boolean>) Updates an item within the collection. Declaration public static bool Update<T>(this IList<T> collection, T item, Func<T, T, bool> predicate) Parameters Type Name Description IList <T> collection The collection to update an item in. T item The item to update. Func <T, T, System.Boolean > predicate The function to find the item within the collection . Returns Type Description System.Boolean True if the item has been updated; otherwise, false. Type Parameters Name Description T The type of item within the collection. Exceptions Type Condition System.ArgumentNullException The item or collection is null . System.Exception The predicate delegate callback throws an exception."
  },
  "api/MADE.Collections.Compare.GenericEqualityComparer-1.html": {
    "href": "api/MADE.Collections.Compare.GenericEqualityComparer-1.html",
    "title": "Class GenericEqualityComparer<T> | MADE.NET",
    "keywords": "Class GenericEqualityComparer<T> Defines an equality comparer for comparing two objects using a simple comparison function. Inheritance System.Object GenericEqualityComparer<T> Namespace : MADE.Collections.Compare Assembly : MADE.Collections.dll Syntax public class GenericEqualityComparer<T> : IEqualityComparer<T> where T : class Type Parameters Name Description T The type of object to comparison. Constructors | Improve this Doc View Source GenericEqualityComparer(Func<T, Object>) Initializes a new instance of the GenericEqualityComparer<T> class. Declaration public GenericEqualityComparer(Func<T, object> comparison) Parameters Type Name Description Func <T, System.Object > comparison The comparison expression. Methods | Improve this Doc View Source Equals(T, T) Compares two objects of the same type for equality. Declaration public bool Equals(T x, T y) Parameters Type Name Description T x The first item. T y The second item. Returns Type Description System.Boolean True if the two items are equal based on the comparison expression; otherwise, false. Exceptions Type Condition System.Exception The MADE.Collections.Compare.GenericEqualityComparer`1.Comparison callback throws an exception. | Improve this Doc View Source GetHashCode(T) Gets the hash code for the expected comparison object. Declaration public int GetHashCode(T obj) Parameters Type Name Description T obj The object to get the comparison object hash code for. Returns Type Description System.Int32 A hash code for the comparison object. Exceptions Type Condition System.Exception The MADE.Collections.Compare.GenericEqualityComparer`1.Comparison callback throws an exception. Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Collections.Compare.html": {
    "href": "api/MADE.Collections.Compare.html",
    "title": "Namespace MADE.Collections.Compare | MADE.NET",
    "keywords": "Namespace MADE.Collections.Compare Classes GenericEqualityComparer<T> Defines an equality comparer for comparing two objects using a simple comparison function."
  },
  "api/MADE.Collections.DictionaryExtensions.html": {
    "href": "api/MADE.Collections.DictionaryExtensions.html",
    "title": "Class DictionaryExtensions | MADE.NET",
    "keywords": "Class DictionaryExtensions Defines a collection of extensions for dictionaries. Inheritance System.Object DictionaryExtensions Namespace : MADE.Collections Assembly : MADE.Collections.dll Syntax public static class DictionaryExtensions : object Methods | Improve this Doc View Source AddOrUpdate<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue) Adds or updates a value within a dictionary. Declaration public static void AddOrUpdate<TKey, TValue>(this Dictionary<TKey, TValue> dictionary, TKey key, TValue value) Parameters Type Name Description Dictionary <TKey, TValue> dictionary The dictionary to update. TKey key The key of the value to add or update. TValue value The value to add or update. Type Parameters Name Description TKey The type of key item within the dictionary. TValue The type of value item within the dictionary. Exceptions Type Condition System.ArgumentNullException The dictionary or key is null . | Improve this Doc View Source GetValueOrDefault<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue) Gets a value from a dictionary by the specified key, or returns a default value. Declaration public static TValue GetValueOrDefault<TKey, TValue>(this Dictionary<TKey, TValue> dictionary, TKey key, TValue defaultValue = null) Parameters Type Name Description Dictionary <TKey, TValue> dictionary The dictionary to get a value from. TKey key The key to get a value for. TValue defaultValue The default value to return if not exists. Default, null. Returns Type Description TValue The value if it exists for the key; otherwise, null. Type Parameters Name Description TKey The type of key item within the dictionary. TValue The type of value item within the dictionary."
  },
  "api/MADE.Collections.html": {
    "href": "api/MADE.Collections.html",
    "title": "Namespace MADE.Collections | MADE.NET",
    "keywords": "Namespace MADE.Collections Classes CollectionExtensions Defines a collection of extensions for enumerables, lists, and collections. DictionaryExtensions Defines a collection of extensions for dictionaries. QueryableExtensions Defines a collection of extensions for queryable objects."
  },
  "api/MADE.Collections.ObjectModel.html": {
    "href": "api/MADE.Collections.ObjectModel.html",
    "title": "Namespace MADE.Collections.ObjectModel | MADE.NET",
    "keywords": "Namespace MADE.Collections.ObjectModel Classes ObservableItemCollection<T> Defines an that manages the property changed events of the contained items. ObservableItemCollectionPropertyChangedEventArgs Defines an event argument for when an object property has changed. Delegates ObservableItemCollectionPropertyChangedEventHandler Defines event handler for when an object has invoked the event within a ObservableItemCollection<T> ."
  },
  "api/MADE.Collections.ObjectModel.ObservableItemCollection-1.html": {
    "href": "api/MADE.Collections.ObjectModel.ObservableItemCollection-1.html",
    "title": "Class ObservableItemCollection<T> | MADE.NET",
    "keywords": "Class ObservableItemCollection<T> Defines an that manages the property changed events of the contained items. Inheritance System.Object ObservableItemCollection<T> Implements IDisposable Namespace : MADE.Collections.ObjectModel Assembly : MADE.Collections.dll Syntax public class ObservableItemCollection<T> : ObservableCollection<T> where T : INotifyPropertyChanged Type Parameters Name Description T The type of items. Constructors | Improve this Doc View Source ObservableItemCollection() Initializes a new instance of the ObservableItemCollection<T> class that is empty and has a default initial capacity. Declaration public ObservableItemCollection() | Improve this Doc View Source ObservableItemCollection(IEnumerable<T>) Initializes a new instance of the ObservableItemCollection<T> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied. Declaration public ObservableItemCollection(IEnumerable<T> collection) Parameters Type Name Description IEnumerable <T> collection The collection whose elements are copied to the new list. Exceptions Type Condition System.ArgumentNullException The collection parameter cannot be null. | Improve this Doc View Source ObservableItemCollection(List<T>) Initializes a new instance of the ObservableItemCollection<T> class that contains elements copied from the specified list. Declaration public ObservableItemCollection(List<T> list) Parameters Type Name Description List <T> list The list whose elements are copied to the new list. Exceptions Type Condition System.ArgumentNullException The list parameter cannot be null. Methods | Improve this Doc View Source AddRange(IEnumerable<T>) Adds a range of objects to the end of the collection. Declaration public void AddRange(IEnumerable<T> items) Parameters Type Name Description IEnumerable <T> items The objects to add to the end of the collection. | Improve this Doc View Source CheckDisposed() Checks whether the collection is disposed. Declaration public void CheckDisposed() | Improve this Doc View Source ClearItems() Removes all items from the collection. Declaration protected override void ClearItems() | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Improve this Doc View Source OnCollectionChanged(NotifyCollectionChangedEventArgs) Raises the CollectionChanged event with the provided arguments. Declaration protected override void OnCollectionChanged(NotifyCollectionChangedEventArgs e) Parameters Type Name Description NotifyCollectionChangedEventArgs e The arguments of the event being raised. | Improve this Doc View Source RemoveRange(IEnumerable<T>) Removes a range of objects from the collection. Declaration public void RemoveRange(IEnumerable<T> items) Parameters Type Name Description IEnumerable <T> items The objects to remove from the collection. Events | Improve this Doc View Source CollectionChanged Occurs when an item is added, removed, changed, moved, or the entire list is refreshed. Declaration public override event NotifyCollectionChangedEventHandler CollectionChanged Event Type Type Description NotifyCollectionChangedEventHandler | Improve this Doc View Source ItemPropertyChanged Occurs when an item's event is invoked. Declaration public event ObservableItemCollectionPropertyChangedEventHandler ItemPropertyChanged Event Type Type Description ObservableItemCollectionPropertyChangedEventHandler Implements IDisposable Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Collections.ObjectModel.ObservableItemCollectionPropertyChangedEventArgs.html": {
    "href": "api/MADE.Collections.ObjectModel.ObservableItemCollectionPropertyChangedEventArgs.html",
    "title": "Class ObservableItemCollectionPropertyChangedEventArgs | MADE.NET",
    "keywords": "Class ObservableItemCollectionPropertyChangedEventArgs Defines an event argument for when an object property has changed. Inheritance System.Object ObservableItemCollectionPropertyChangedEventArgs Namespace : MADE.Collections.ObjectModel Assembly : MADE.Collections.dll Syntax public class ObservableItemCollectionPropertyChangedEventArgs : object Constructors | Improve this Doc View Source ObservableItemCollectionPropertyChangedEventArgs(Object, Int32, PropertyChangedEventArgs) Initializes a new instance of the ObservableItemCollectionPropertyChangedEventArgs class. Declaration public ObservableItemCollectionPropertyChangedEventArgs(object sender, int index, PropertyChangedEventArgs eventArgs) Parameters Type Name Description System.Object sender The object sender. System.Int32 index The index of the sender within the ObservableItemCollection<T> . PropertyChangedEventArgs eventArgs The associated property changed event argument. Properties | Improve this Doc View Source EventArgs Gets associated property changed event argument. Declaration public PropertyChangedEventArgs EventArgs { get; } Property Value Type Description PropertyChangedEventArgs | Improve this Doc View Source Index Gets index of the Sender within the ObservableItemCollection<T> . Declaration public int Index { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Sender Gets the object sender. Declaration public object Sender { get; } Property Value Type Description System.Object Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Collections.ObjectModel.ObservableItemCollectionPropertyChangedEventHandler.html": {
    "href": "api/MADE.Collections.ObjectModel.ObservableItemCollectionPropertyChangedEventHandler.html",
    "title": "Delegate ObservableItemCollectionPropertyChangedEventHandler | MADE.NET",
    "keywords": "Delegate ObservableItemCollectionPropertyChangedEventHandler Defines event handler for when an object has invoked the event within a ObservableItemCollection<T> . Namespace : MADE.Collections.ObjectModel Assembly : MADE.Collections.dll Syntax public delegate void ObservableItemCollectionPropertyChangedEventHandler(object sender, ObservableItemCollectionPropertyChangedEventArgs args); Parameters Type Name Description System.Object sender The ObservableItemCollection<T> sender. ObservableItemCollectionPropertyChangedEventArgs args The associated property changed event argument for the item. Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Collections.QueryableExtensions.html": {
    "href": "api/MADE.Collections.QueryableExtensions.html",
    "title": "Class QueryableExtensions | MADE.NET",
    "keywords": "Class QueryableExtensions Defines a collection of extensions for queryable objects. Inheritance System.Object QueryableExtensions Namespace : MADE.Collections Assembly : MADE.Collections.dll Syntax public static class QueryableExtensions : object Methods | Improve this Doc View Source Chunk<T>(IQueryable<T>, Int32) Chunks a query of items into the specified chunk size. Declaration public static IEnumerable<IQueryable<T>> Chunk<T>(this IQueryable<T> source, int chunkSize = 25) Parameters Type Name Description IQueryable <T> source The source query to chunk. System.Int32 chunkSize The chunk size. Returns Type Description IEnumerable < IQueryable <T>> A collection of queries containing the chunked items. Type Parameters Name Description T The type of item."
  },
  "api/MADE.Data.Converters.BooleanToStringValueConverter.html": {
    "href": "api/MADE.Data.Converters.BooleanToStringValueConverter.html",
    "title": "Class BooleanToStringValueConverter | MADE.NET",
    "keywords": "Class BooleanToStringValueConverter Defines a value converter from to with a pre-determined TrueValue and FalseValue . Inheritance System.Object BooleanToStringValueConverter Implements IValueConverter < System.Boolean , System.String > Namespace : MADE.Data.Converters Assembly : MADE.Data.Converters.dll Syntax public class BooleanToStringValueConverter : object, IValueConverter<bool, string> Properties | Improve this Doc View Source FalseValue Gets or sets the negative/false value. Declaration public string FalseValue { get; set; } Property Value Type Description System.String | Improve this Doc View Source TrueValue Gets or sets the positive/true value. Declaration public string TrueValue { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Convert(Boolean, Object) Converts the value to the type. Declaration public string Convert(bool value, object parameter = null) Parameters Type Name Description System.Boolean value The value to convert. System.Object parameter The optional parameter used to help with conversion. Returns Type Description System.String The converted object. | Improve this Doc View Source ConvertBack(String, Object) Converts the value back to the type. Declaration public bool ConvertBack(string value, object parameter = null) Parameters Type Name Description System.String value The value to convert. System.Object parameter The optional parameter used to help with conversion. Returns Type Description System.Boolean The converted object. Implements IValueConverter<TFrom, TTo> Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Data.Converters.Constants.DateTimeConstants.html": {
    "href": "api/MADE.Data.Converters.Constants.DateTimeConstants.html",
    "title": "Class DateTimeConstants | MADE.NET",
    "keywords": "Class DateTimeConstants Defines a collection of constants for objects. Inheritance System.Object DateTimeConstants Namespace : MADE.Data.Converters.Constants Assembly : MADE.Data.Converters.dll Syntax public static class DateTimeConstants : object Fields | Improve this Doc View Source EndOfDayTime Defines the time at the end of a day. Declaration public static readonly TimeSpan EndOfDayTime Field Value Type Description TimeSpan | Improve this Doc View Source UnixEpoch Defines the minimum value for a object determined by Unix. Declaration public static readonly DateTime UnixEpoch Field Value Type Description DateTime"
  },
  "api/MADE.Data.Converters.Constants.html": {
    "href": "api/MADE.Data.Converters.Constants.html",
    "title": "Namespace MADE.Data.Converters.Constants | MADE.NET",
    "keywords": "Namespace MADE.Data.Converters.Constants Classes DateTimeConstants Defines a collection of constants for objects."
  },
  "api/MADE.Data.Converters.DateTimeToStringValueConverter.html": {
    "href": "api/MADE.Data.Converters.DateTimeToStringValueConverter.html",
    "title": "Class DateTimeToStringValueConverter | MADE.NET",
    "keywords": "Class DateTimeToStringValueConverter Defines a value converter from to with an optional format string. Inheritance System.Object DateTimeToStringValueConverter Implements IValueConverter < DateTime , System.String > Namespace : MADE.Data.Converters Assembly : MADE.Data.Converters.dll Syntax public class DateTimeToStringValueConverter : object, IValueConverter<DateTime, string> Methods | Improve this Doc View Source Convert(DateTime, Object) Converts the value to the type. Declaration public string Convert(DateTime value, object parameter = null) Parameters Type Name Description DateTime value The value to convert. System.Object parameter The optional parameter used to help with conversion. Returns Type Description System.String The converted object. | Improve this Doc View Source ConvertBack(String, Object) Converts the value back to the type. Declaration public DateTime ConvertBack(string value, object parameter = null) Parameters Type Name Description System.String value The value to convert. System.Object parameter The optional parameter used to help with conversion. Returns Type Description DateTime The converted object. Implements IValueConverter<TFrom, TTo> Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Data.Converters.Exceptions.html": {
    "href": "api/MADE.Data.Converters.Exceptions.html",
    "title": "Namespace MADE.Data.Converters.Exceptions | MADE.NET",
    "keywords": "Namespace MADE.Data.Converters.Exceptions Classes InvalidDataConversionException Defines an exception thrown when a data conversion has failed."
  },
  "api/MADE.Data.Converters.Exceptions.InvalidDataConversionException.html": {
    "href": "api/MADE.Data.Converters.Exceptions.InvalidDataConversionException.html",
    "title": "Class InvalidDataConversionException | MADE.NET",
    "keywords": "Class InvalidDataConversionException Defines an exception thrown when a data conversion has failed. Inheritance System.Object InvalidDataConversionException Namespace : MADE.Data.Converters.Exceptions Assembly : MADE.Data.Converters.dll Syntax public class InvalidDataConversionException : Exception Constructors | Improve this Doc View Source InvalidDataConversionException(String, Object) Initializes a new instance of the InvalidDataConversionException class. Declaration public InvalidDataConversionException(string converter, object value) Parameters Type Name Description System.String converter The name of the converter that failed to convert. System.Object value The value that failed to convert. | Improve this Doc View Source InvalidDataConversionException(String, Object, String) Initializes a new instance of the InvalidDataConversionException class with a specified error message. Declaration public InvalidDataConversionException(string converter, object value, string message) Parameters Type Name Description System.String converter The name of the converter that failed to convert. System.Object value The value that failed to convert. System.String message The message that describes the error. | Improve this Doc View Source InvalidDataConversionException(String, Object, String, Exception) Initializes a new instance of the InvalidDataConversionException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public InvalidDataConversionException(string converter, object value, string message, Exception innerException) Parameters Type Name Description System.String converter The name of the converter that failed to convert. System.Object value The value that failed to convert. System.String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. Properties | Improve this Doc View Source Converter Gets the name of the converter that failed to convert. Declaration public string Converter { get; } Property Value Type Description System.String | Improve this Doc View Source Value Gets the value that failed to convert. Declaration public object Value { get; } Property Value Type Description System.Object Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Data.Converters.Extensions.BooleanExtensions.html": {
    "href": "api/MADE.Data.Converters.Extensions.BooleanExtensions.html",
    "title": "Class BooleanExtensions | MADE.NET",
    "keywords": "Class BooleanExtensions Defines a collection of extensions for values. Inheritance System.Object BooleanExtensions Namespace : MADE.Data.Converters.Extensions Assembly : MADE.Data.Converters.dll Syntax public static class BooleanExtensions : object Methods | Improve this Doc View Source ToFormattedString(Boolean, String, String) Converts a value to a value with optional true/false values. Declaration public static string ToFormattedString(this bool value, string trueValue = \"True\", string falseValue = \"False\") Parameters Type Name Description System.Boolean value The value to format. System.String trueValue The format for when the value is true . System.String falseValue The format for when the value is false . Returns Type Description System.String A formatted string | Improve this Doc View Source ToFormattedString(Nullable<Boolean>, String, String, String) Converts a nullable value to a value with optional true/false/null values. Declaration public static string ToFormattedString(this bool? value, string trueValue = \"True\", string falseValue = \"False\", string nullValue = \"Not set\") Parameters Type Name Description System.Nullable < System.Boolean > value The value to format. System.String trueValue The format for when the value is true . Default, True. System.String falseValue The format for when the value is false . Default, False. System.String nullValue The format for when the value is null . Default, Not set. Returns Type Description System.String A formatted string"
  },
  "api/MADE.Data.Converters.Extensions.CollectionExtensions.html": {
    "href": "api/MADE.Data.Converters.Extensions.CollectionExtensions.html",
    "title": "Class CollectionExtensions | MADE.NET",
    "keywords": "Class CollectionExtensions Defines a collection of extensions for collection objects. Inheritance System.Object CollectionExtensions Namespace : MADE.Data.Converters.Extensions Assembly : MADE.Data.Converters.dll Syntax public static class CollectionExtensions : object Methods | Improve this Doc View Source ToDelimitedString<T>(IEnumerable<T>, String) Converts a collection of items to a string separated by a delimiter. Declaration public static string ToDelimitedString<T>(this IEnumerable<T> source, string delimiter = \",\") Parameters Type Name Description IEnumerable <T> source The source collection to convert. System.String delimiter The delimiter to separate items by in the string. Default, comma. Returns Type Description System.String A delimited string representing the collection. Type Parameters Name Description T The type of item within the collection."
  },
  "api/MADE.Data.Converters.Extensions.DateTimeExtensions.html": {
    "href": "api/MADE.Data.Converters.Extensions.DateTimeExtensions.html",
    "title": "Class DateTimeExtensions | MADE.NET",
    "keywords": "Class DateTimeExtensions Defines a collection of extensions for a date/time object. Inheritance System.Object DateTimeExtensions Namespace : MADE.Data.Converters.Extensions Assembly : MADE.Data.Converters.dll Syntax public static class DateTimeExtensions : object Methods | Improve this Doc View Source EndOfDay(DateTime) Gets the end of the day represented by the specified object. Declaration public static DateTime EndOfDay(this DateTime dateTime) Parameters Type Name Description DateTime dateTime The . Returns Type Description DateTime A new object with the same date as this instance, and the time value set to just before midnight of the next day. | Improve this Doc View Source EndOfMonth(DateTime) Gets the last day of the month represented by the specified object. Declaration public static DateTime EndOfMonth(this DateTime dateTime) Parameters Type Name Description DateTime dateTime The . Returns Type Description DateTime A new object with the last day of the month for this instance, and the time value set to just before midnight of the next day. | Improve this Doc View Source EndOfWeek(DateTime) Gets the last day of the week represented by the specified object. Declaration public static DateTime EndOfWeek(this DateTime dateTime) Parameters Type Name Description DateTime dateTime The . Returns Type Description DateTime A new object with the last day of the week for this instance, and the time value set to just before midnight of the next day. | Improve this Doc View Source EndOfYear(DateTime) Gets the last day of the year represented by the specified object. Declaration public static DateTime EndOfYear(this DateTime dateTime) Parameters Type Name Description DateTime dateTime The . Returns Type Description DateTime A new object with the last day of the year for this instance, and the time value set to just before midnight of the next day. | Improve this Doc View Source SetTime(DateTime, Int32, Int32) Sets the time value of a date/time value. Declaration public static DateTime SetTime(this DateTime dateTime, int hours, int minutes) Parameters Type Name Description DateTime dateTime The date/time value to add a time to. System.Int32 hours The hours to set on the date/time value. System.Int32 minutes The minutes to set on the date/time value. Returns Type Description DateTime The updated date/time with the given time value. | Improve this Doc View Source SetTime(DateTime, Int32, Int32, Int32) Sets the time value of a date/time value. Declaration public static DateTime SetTime(this DateTime dateTime, int hours, int minutes, int seconds) Parameters Type Name Description DateTime dateTime The date/time value to add a time to. System.Int32 hours The hours to set on the date/time value. System.Int32 minutes The minutes to set on the date/time value. System.Int32 seconds The seconds to set on the date/time value. Returns Type Description DateTime The updated date/time with the given time value. | Improve this Doc View Source SetTime(DateTime, Int32, Int32, Int32, Int32) Sets the time value of a date/time value. Declaration public static DateTime SetTime(this DateTime dateTime, int hours, int minutes, int seconds, int milliseconds) Parameters Type Name Description DateTime dateTime The date/time value to add a time to. System.Int32 hours The hours to set on the date/time value. System.Int32 minutes The minutes to set on the date/time value. System.Int32 seconds The seconds to set on the date/time value. System.Int32 milliseconds The milliseconds to set on the date/time value. Returns Type Description DateTime The updated date/time with the given time value. | Improve this Doc View Source SetTime(DateTime, TimeSpan) Sets the time value of a date/time value. Declaration public static DateTime SetTime(this DateTime dateTime, TimeSpan timeSpan) Parameters Type Name Description DateTime dateTime The date/time value to add a time to. TimeSpan timeSpan The time to set on the date/time value. Returns Type Description DateTime The updated date/time with the given time value. | Improve this Doc View Source SetTime(Nullable<DateTime>, Int32, Int32) Sets the time value of a nullable date/time value. Declaration public static DateTime? SetTime(this DateTime? dateTime, int hours, int minutes) Parameters Type Name Description System.Nullable < DateTime > dateTime The nullable date/time value to add a time to. System.Int32 hours The hours to set on the date/time value. System.Int32 minutes The minutes to set on the date/time value. Returns Type Description System.Nullable < DateTime > The updated date/time with the given time value. | Improve this Doc View Source SetTime(Nullable<DateTime>, Int32, Int32, Int32) Sets the time value of a nullable date/time value. Declaration public static DateTime? SetTime(this DateTime? dateTime, int hours, int minutes, int seconds) Parameters Type Name Description System.Nullable < DateTime > dateTime The nullable date/time value to add a time to. System.Int32 hours The hours to set on the date/time value. System.Int32 minutes The minutes to set on the date/time value. System.Int32 seconds The seconds to set on the date/time value. Returns Type Description System.Nullable < DateTime > The updated date/time with the given time value. | Improve this Doc View Source SetTime(Nullable<DateTime>, Int32, Int32, Int32, Int32) Sets the time value of a nullable date/time value. Declaration public static DateTime? SetTime(this DateTime? dateTime, int hours, int minutes, int seconds, int milliseconds) Parameters Type Name Description System.Nullable < DateTime > dateTime The nullable date/time value to add a time to. System.Int32 hours The hours to set on the date/time value. System.Int32 minutes The minutes to set on the date/time value. System.Int32 seconds The seconds to set on the date/time value. System.Int32 milliseconds The milliseconds to set on the date/time value. Returns Type Description System.Nullable < DateTime > The updated date/time with the given time value. | Improve this Doc View Source SetTime(Nullable<DateTime>, TimeSpan) Sets the time value of a nullable date/time value. Declaration public static DateTime? SetTime(this DateTime? dateTime, TimeSpan timeSpan) Parameters Type Name Description System.Nullable < DateTime > dateTime The nullable date/time value to add a time to. TimeSpan timeSpan The time to set on the date/time value. Returns Type Description System.Nullable < DateTime > The updated date/time with the given time value. | Improve this Doc View Source StartOfDay(DateTime) Gets the start of the day represented by the specified object. Declaration public static DateTime StartOfDay(this DateTime dateTime) Parameters Type Name Description DateTime dateTime The . Returns Type Description DateTime A new object with the same date as this instance, and the time value set to midnight. | Improve this Doc View Source StartOfMonth(DateTime) Gets the first day of the month represented by the specified object. Declaration public static DateTime StartOfMonth(this DateTime dateTime) Parameters Type Name Description DateTime dateTime The . Returns Type Description DateTime A new object with the first day of the month for this instance, and the time value set to midnight. | Improve this Doc View Source StartOfWeek(DateTime) Gets the first day of the week represented by the specified object. Declaration public static DateTime StartOfWeek(this DateTime dateTime) Parameters Type Name Description DateTime dateTime The . Returns Type Description DateTime A new object with the first day of the week for this instance, and the time value set to midnight. | Improve this Doc View Source StartOfYear(DateTime) Gets the first day of the year represented by the specified object. Declaration public static DateTime StartOfYear(this DateTime dateTime) Parameters Type Name Description DateTime dateTime The . Returns Type Description DateTime A new object with the first day of the year for this instance, and the time value set to midnight. | Improve this Doc View Source ToCurrentAge(DateTime) Gets the current age in years based on the specified starting date and today's date. Declaration public static int ToCurrentAge(this DateTime startingDate) Parameters Type Name Description DateTime startingDate The starting date. Returns Type Description System.Int32 An integer value representing the number of years. | Improve this Doc View Source ToDaySuffix(DateTime) Gets the day suffix for the specified date, i.e. st, nd, rd, or th. Declaration public static string ToDaySuffix(this DateTime dateTime) Parameters Type Name Description DateTime dateTime The date to get a day suffix for. Returns Type Description System.String The day suffix as a string. | Improve this Doc View Source ToNearestHour(DateTime) Rounds a value to its nearest hour. This is determined by the half hour of each hour, rounding up or down. Declaration public static DateTime ToNearestHour(this DateTime dateTime) Parameters Type Name Description DateTime dateTime The to round. Returns Type Description DateTime The updated ."
  },
  "api/MADE.Data.Converters.Extensions.html": {
    "href": "api/MADE.Data.Converters.Extensions.html",
    "title": "Namespace MADE.Data.Converters.Extensions | MADE.NET",
    "keywords": "Namespace MADE.Data.Converters.Extensions Classes BooleanExtensions Defines a collection of extensions for values. CollectionExtensions Defines a collection of extensions for collection objects. DateTimeExtensions Defines a collection of extensions for a date/time object. LengthExtensions Defines a collection of extensions for converting length measurements. MathExtensions Defines a collection of extensions for common mathematics expressions. StringExtensions Defines a collection of extensions for string values."
  },
  "api/MADE.Data.Converters.Extensions.LengthExtensions.html": {
    "href": "api/MADE.Data.Converters.Extensions.LengthExtensions.html",
    "title": "Class LengthExtensions | MADE.NET",
    "keywords": "Class LengthExtensions Defines a collection of extensions for converting length measurements. Inheritance System.Object LengthExtensions Namespace : MADE.Data.Converters.Extensions Assembly : MADE.Data.Converters.dll Syntax public static class LengthExtensions : object Methods | Improve this Doc View Source ToMeters(Double) Converts a distance measured in miles to a distance measured in meters. Declaration public static double ToMeters(this double miles) Parameters Type Name Description System.Double miles The miles to convert to meters. Returns Type Description System.Double The meters that represent the miles. | Improve this Doc View Source ToMiles(Double) Converts a distance measured in meters to a distance measured in miles. Declaration public static double ToMiles(this double meters) Parameters Type Name Description System.Double meters The meters to convert to miles. Returns Type Description System.Double The miles that represent the meters."
  },
  "api/MADE.Data.Converters.Extensions.MathExtensions.html": {
    "href": "api/MADE.Data.Converters.Extensions.MathExtensions.html",
    "title": "Class MathExtensions | MADE.NET",
    "keywords": "Class MathExtensions Defines a collection of extensions for common mathematics expressions. Inheritance System.Object MathExtensions Namespace : MADE.Data.Converters.Extensions Assembly : MADE.Data.Converters.dll Syntax public static class MathExtensions : object Methods | Improve this Doc View Source ToRadians(Double) Converts a degrees value to a radians value. Declaration public static double ToRadians(this double degrees) Parameters Type Name Description System.Double degrees The degrees value to convert. Returns Type Description System.Double The converted value as radians."
  },
  "api/MADE.Data.Converters.Extensions.StringExtensions.html": {
    "href": "api/MADE.Data.Converters.Extensions.StringExtensions.html",
    "title": "Class StringExtensions | MADE.NET",
    "keywords": "Class StringExtensions Defines a collection of extensions for string values. Inheritance System.Object StringExtensions Namespace : MADE.Data.Converters.Extensions Assembly : MADE.Data.Converters.dll Syntax public static class StringExtensions : object Methods | Improve this Doc View Source FromBase64(String, Encoding) Converts a Base64 string to a value using the specified encoding. Declaration public static string FromBase64(this string base64Value, Encoding encoding = null) Parameters Type Name Description System.String base64Value The Base64 value to convert. Encoding encoding The encoding to get the value string while converting. Returns Type Description System.String The string value representing the Base64 string. | Improve this Doc View Source ToBase64(String, Encoding) Converts a value to a Base64 string using the specified encoding. Default encoding is UTF-8. Declaration public static string ToBase64(this string value, Encoding encoding = null) Parameters Type Name Description System.String value The string value to convert. Encoding encoding The encoding to get the value bytes while converting. Returns Type Description System.String The Base64 string representing the value. | Improve this Doc View Source ToBoolean(String) Converts a string value to a boolean. Declaration public static bool ToBoolean(this string value) Parameters Type Name Description System.String value The value to convert. Returns Type Description System.Boolean The boolean representing the value. | Improve this Doc View Source ToDefaultCase(String) Converts a value to default case using the case rules of the invariant culture. Declaration public static string ToDefaultCase(this string value) Parameters Type Name Description System.String value The value to convert. Returns Type Description System.String The converted default case string. Examples string converted = \"HELLO, WORLD\".ToDefaultCase(); // converted = \"Hello, world\". | Improve this Doc View Source ToDouble(String) Converts a string value to a double. Declaration public static double ToDouble(this string value) Parameters Type Name Description System.String value The value to convert. Returns Type Description System.Double The double representing the value. | Improve this Doc View Source ToFloat(String) Converts a string value to a float. Declaration public static float ToFloat(this string value) Parameters Type Name Description System.String value The value to convert. Returns Type Description System.Single The float representing the value. | Improve this Doc View Source ToInt(String) Converts a string value to an integer. Declaration public static int ToInt(this string value) Parameters Type Name Description System.String value The value to convert. Returns Type Description System.Int32 The int representing the value. | Improve this Doc View Source ToMemoryStreamAsync(String) Converts a string value to a . Declaration public static async Task<MemoryStream> ToMemoryStreamAsync(this string value) Parameters Type Name Description System.String value The value to convert. Returns Type Description Task < MemoryStream > A representing the string value. | Improve this Doc View Source ToNullableDouble(String) Converts a string value to a nullable double. Declaration public static double? ToNullableDouble(this string value) Parameters Type Name Description System.String value The value to convert. Returns Type Description System.Nullable < System.Double > The nullable double representing the value. | Improve this Doc View Source ToNullableFloat(String) Converts a string value to a nullable float. Declaration public static float? ToNullableFloat(this string value) Parameters Type Name Description System.String value The value to convert. Returns Type Description System.Nullable < System.Single > The nullable float representing the value. | Improve this Doc View Source ToNullableInt(String) Converts a string value to a nullable integer. Declaration public static int? ToNullableInt(this string value) Parameters Type Name Description System.String value The value to convert. Returns Type Description System.Nullable < System.Int32 > The nullable integer representing the value. | Improve this Doc View Source ToTitleCase(String) Converts a value to title case using the case rules of the invariant culture. Declaration public static string ToTitleCase(this string value) Parameters Type Name Description System.String value The value to convert. Returns Type Description System.String The converted title case string. Examples string converted = \"HELLO, WORLD\".ToTitleCase(); // converted = \"Hello, World\". | Improve this Doc View Source Truncate(String, Int32) Truncates a string value to the specified length with an ellipsis. Declaration public static string Truncate(this string value, int maxLength) Parameters Type Name Description System.String value The value to truncate. System.Int32 maxLength The maximum length of the value. Returns Type Description System.String A truncated string with ellipsis if the value's length is greater than the maxLength ."
  },
  "api/MADE.Data.Converters.html": {
    "href": "api/MADE.Data.Converters.html",
    "title": "Namespace MADE.Data.Converters | MADE.NET",
    "keywords": "Namespace MADE.Data.Converters Classes BooleanToStringValueConverter Defines a value converter from to with a pre-determined TrueValue and FalseValue . DateTimeToStringValueConverter Defines a value converter from to with an optional format string. StringToBase64StringValueConverter Defines a value converter from to Base64 with an optional Encoding parameter. Interfaces IValueConverter<TFrom, TTo> Defines an interface for a value converter from TFrom to TTo ."
  },
  "api/MADE.Data.Converters.IValueConverter-2.html": {
    "href": "api/MADE.Data.Converters.IValueConverter-2.html",
    "title": "Interface IValueConverter<TFrom, TTo> | MADE.NET",
    "keywords": "Interface IValueConverter<TFrom, TTo> Defines an interface for a value converter from TFrom to TTo . Namespace : MADE.Data.Converters Assembly : MADE.Data.Converters.dll Syntax public interface IValueConverter<TFrom, TTo> Type Parameters Name Description TFrom The type of object to convert from. TTo The type of object to convert to. Methods | Improve this Doc View Source Convert(TFrom, Object) Converts the value to the TTo type. Declaration TTo Convert(TFrom value, object parameter = null) Parameters Type Name Description TFrom value The value to convert. System.Object parameter The optional parameter used to help with conversion. Returns Type Description TTo The converted TTo object. | Improve this Doc View Source ConvertBack(TTo, Object) Converts the value back to the TFrom type. Declaration TFrom ConvertBack(TTo value, object parameter = null) Parameters Type Name Description TTo value The value to convert. System.Object parameter The optional parameter used to help with conversion. Returns Type Description TFrom The converted TFrom object. Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Data.Converters.Strings.html": {
    "href": "api/MADE.Data.Converters.Strings.html",
    "title": "Namespace MADE.Data.Converters.Strings | MADE.NET",
    "keywords": "Namespace MADE.Data.Converters.Strings Classes Resources A strongly-typed resource class, for looking up localized strings, etc."
  },
  "api/MADE.Data.Converters.Strings.Resources.html": {
    "href": "api/MADE.Data.Converters.Strings.Resources.html",
    "title": "Class Resources | MADE.NET",
    "keywords": "Class Resources A strongly-typed resource class, for looking up localized strings, etc. Inheritance System.Object Resources Namespace : MADE.Data.Converters.Strings Assembly : MADE.Data.Converters.dll Syntax public class Resources : object Properties | Improve this Doc View Source BooleanToStringValueConverter_FalseValue Looks up a localized string similar to No. Declaration public static string BooleanToStringValueConverter_FalseValue { get; } Property Value Type Description System.String | Improve this Doc View Source BooleanToStringValueConverter_TrueValue Looks up a localized string similar to Yes. Declaration public static string BooleanToStringValueConverter_TrueValue { get; } Property Value Type Description System.String | Improve this Doc View Source Culture Overrides the current thread's CurrentUICulture property for all resource lookups using this strongly typed resource class. Declaration public static System.Globalization.CultureInfo Culture { get; set; } Property Value Type Description System.Globalization.CultureInfo | Improve this Doc View Source ResourceManager Returns the cached ResourceManager instance used by this class. Declaration public static System.Resources.ResourceManager ResourceManager { get; } Property Value Type Description System.Resources.ResourceManager Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Data.Converters.StringToBase64StringValueConverter.html": {
    "href": "api/MADE.Data.Converters.StringToBase64StringValueConverter.html",
    "title": "Class StringToBase64StringValueConverter | MADE.NET",
    "keywords": "Class StringToBase64StringValueConverter Defines a value converter from to Base64 with an optional Encoding parameter. Inheritance System.Object StringToBase64StringValueConverter Implements IValueConverter < System.String , System.String > Namespace : MADE.Data.Converters Assembly : MADE.Data.Converters.dll Syntax public class StringToBase64StringValueConverter : object, IValueConverter<string, string> Methods | Improve this Doc View Source Convert(String, Object) Converts the value to the Base64 . Declaration public string Convert(string value, object parameter = null) Parameters Type Name Description System.String value The value to convert. System.Object parameter The optional parameter used to help with conversion. Returns Type Description System.String The converted Base64 object. | Improve this Doc View Source ConvertBack(String, Object) Converts the Base64 value back to the original value. Declaration public string ConvertBack(string value, object parameter = null) Parameters Type Name Description System.String value The value to convert. System.Object parameter The optional parameter used to help with conversion. Returns Type Description System.String The converted object. Implements IValueConverter<TFrom, TTo> Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Data.EFCore.Converters.html": {
    "href": "api/MADE.Data.EFCore.Converters.html",
    "title": "Namespace MADE.Data.EFCore.Converters | MADE.NET",
    "keywords": "Namespace MADE.Data.EFCore.Converters Classes UtcDateTimeConverter Defines a converter to help with the storing of dates in a UTC format."
  },
  "api/MADE.Data.EFCore.Converters.UtcDateTimeConverter.html": {
    "href": "api/MADE.Data.EFCore.Converters.UtcDateTimeConverter.html",
    "title": "Class UtcDateTimeConverter | MADE.NET",
    "keywords": "Class UtcDateTimeConverter Defines a converter to help with the storing of dates in a UTC format. Inheritance System.Object UtcDateTimeConverter Namespace : MADE.Data.EFCore.Converters Assembly : MADE.Data.EFCore.dll Syntax public static class UtcDateTimeConverter : object Methods | Improve this Doc View Source ApplyUtcDateTimeConverter(ModelBuilder) Applies a UTC converter to the builder . Declaration public static void ApplyUtcDateTimeConverter(this ModelBuilder builder) Parameters Type Name Description ModelBuilder builder The model builder to apply the converter to. | Improve this Doc View Source IsUtc(IMutableProperty) Determines whether the property has the IsUtc annotation. Declaration public static bool IsUtc(this IMutableProperty property) Parameters Type Name Description IMutableProperty property The property to check. Returns Type Description System.Boolean A value indicating whether the property has the IsUtc annotation. | Improve this Doc View Source IsUtc<TProperty>(PropertyBuilder<TProperty>, Boolean) Defines an annotation on a property that it should be in a UTC format. The intended use for this is on properties which are a or DateTime?. Declaration public static PropertyBuilder<TProperty> IsUtc<TProperty>(this PropertyBuilder<TProperty> builder, bool isUtc = true) Parameters Type Name Description PropertyBuilder <TProperty> builder The property builder. System.Boolean isUtc A value indicating whether the property value should be in UTC format. Returns Type Description PropertyBuilder <TProperty> The configured property builder. Type Parameters Name Description TProperty The type of property."
  },
  "api/MADE.Data.EFCore.EntityBase.html": {
    "href": "api/MADE.Data.EFCore.EntityBase.html",
    "title": "Class EntityBase | MADE.NET",
    "keywords": "Class EntityBase Defines a base definition for an entity. Inheritance System.Object EntityBase Implements IEntityBase IEntityBase < Guid > IDatedEntity Namespace : MADE.Data.EFCore Assembly : MADE.Data.EFCore.dll Syntax public abstract class EntityBase : object, IEntityBase, IEntityBase<Guid>, IDatedEntity Properties | Improve this Doc View Source CreatedDate Gets or sets the date of the entity's creation. Declaration public virtual DateTime CreatedDate { get; set; } Property Value Type Description DateTime | Improve this Doc View Source Id Gets or sets the identifier of the entity. Declaration public Guid Id { get; set; } Property Value Type Description Guid | Improve this Doc View Source UpdatedDate Gets or sets the date of the entity's last update. Declaration public virtual DateTime? UpdatedDate { get; set; } Property Value Type Description System.Nullable < DateTime > Implements IEntityBase IEntityBase<TKey> IDatedEntity Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Data.EFCore.EntityBase-1.html": {
    "href": "api/MADE.Data.EFCore.EntityBase-1.html",
    "title": "Class EntityBase<TKey> | MADE.NET",
    "keywords": "Class EntityBase<TKey> Defines a base definition for an entity. Inheritance System.Object EntityBase<TKey> Implements IEntityBase <TKey> IDatedEntity Namespace : MADE.Data.EFCore Assembly : MADE.Data.EFCore.dll Syntax public abstract class EntityBase<TKey> : object, IEntityBase<TKey>, IDatedEntity Type Parameters Name Description TKey The type of unique identifier for the entity. Properties | Improve this Doc View Source CreatedDate Gets or sets the date of the entity's creation. Declaration public DateTime CreatedDate { get; set; } Property Value Type Description DateTime | Improve this Doc View Source Id Gets or sets the identifier of the entity. Declaration public TKey Id { get; set; } Property Value Type Description TKey | Improve this Doc View Source UpdatedDate Gets or sets the date of the entity's last update. Declaration public DateTime? UpdatedDate { get; set; } Property Value Type Description System.Nullable < DateTime > Implements IEntityBase<TKey> IDatedEntity Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Data.EFCore.Extensions.DbContextExtensions.html": {
    "href": "api/MADE.Data.EFCore.Extensions.DbContextExtensions.html",
    "title": "Class DbContextExtensions | MADE.NET",
    "keywords": "Class DbContextExtensions Defines a collection of extensions for types. Inheritance System.Object DbContextExtensions Namespace : MADE.Data.EFCore.Extensions Assembly : MADE.Data.EFCore.dll Syntax public static class DbContextExtensions : object Methods | Improve this Doc View Source RemoveWhere<T>(DbSet<T>, Expression<Func<T, Boolean>>) Removes entities from a using the specified predicate. Declaration public static void RemoveWhere<T>(this DbSet<T> set, Expression<Func<T, bool>> predicate) where T : class Parameters Type Name Description DbSet <T> set The data set to remove entities from. Expression < Func <T, System.Boolean >> predicate The function for determining the items to remove. Type Parameters Name Description T The type of entity to remove. | Improve this Doc View Source SetEntityDates(DbContext) Sets the dates of EntityBase entities being tracked in an added or modified state. It is best to call this method in an override of the DbContext.SaveChangesAsync method in your data context. Declaration public static void SetEntityDates(this DbContext context) Parameters Type Name Description DbContext context The to update entity dates for. | Improve this Doc View Source TryAsync<TContext>(TContext, Func<TContext, Task>, Action<Exception>) Attempts to perform an action on the data context. Declaration public static async Task<bool> TryAsync<TContext>(this TContext context, Func<TContext, Task> action, Action<Exception> onError = null) where TContext : DbContext Parameters Type Name Description TContext context The . Func <TContext, Task > action The action to run. Action < Exception > onError An exception for handling the exception thrown, for example, event logging. Returns Type Description Task < System.Boolean > True if the action ran successfully; otherwise, false. Type Parameters Name Description TContext The type of data context. | Improve this Doc View Source TrySaveChangesAsync(DbContext, Action<Exception>, CancellationToken) Attempts to save all changes made in this context to the database. Declaration public static async Task<bool> TrySaveChangesAsync(this DbContext context, Action<Exception> onError = null, CancellationToken cancellationToken = null) Parameters Type Name Description DbContext context The . Action < Exception > onError An exception for handling the exception thrown, for example, event logging. CancellationToken cancellationToken A to observe while waiting for the task to complete. Returns Type Description Task < System.Boolean > True if the changes saved successfully; otherwise, false. | Improve this Doc View Source UpdateAsync<T>(DbContext, T, CancellationToken) Updates an entity within the context and saves the changes. Declaration public static async Task UpdateAsync<T>(this DbContext context, T entity, CancellationToken cancellationToken = null) Parameters Type Name Description DbContext context The . T entity The entity to update. CancellationToken cancellationToken The cancellation token. Returns Type Description Task An asynchronous operation. Type Parameters Name Description T The type of entity to update."
  },
  "api/MADE.Data.EFCore.Extensions.EntityBaseExtensions.html": {
    "href": "api/MADE.Data.EFCore.Extensions.EntityBaseExtensions.html",
    "title": "Class EntityBaseExtensions | MADE.NET",
    "keywords": "Class EntityBaseExtensions Defines a collection of extensions for the EntityBase type. Inheritance System.Object EntityBaseExtensions Namespace : MADE.Data.EFCore.Extensions Assembly : MADE.Data.EFCore.dll Syntax public static class EntityBaseExtensions : object Methods | Improve this Doc View Source Configure<TEntity>(EntityTypeBuilder<TEntity>) Configures the default properties of an TEntity . Declaration public static EntityTypeBuilder<TEntity> Configure<TEntity>(this EntityTypeBuilder<TEntity> builder) where TEntity : class, IEntityBase Parameters Type Name Description EntityTypeBuilder <TEntity> builder The entity type builder associated with the entity. Returns Type Description EntityTypeBuilder <TEntity> The entity type builder. Type Parameters Name Description TEntity The type of entity to configure. | Improve this Doc View Source ConfigureDateProperties<TEntity>(EntityTypeBuilder<TEntity>) Configures the created and updated date properties of an TEntity as UTC. Declaration public static EntityTypeBuilder<TEntity> ConfigureDateProperties<TEntity>(this EntityTypeBuilder<TEntity> builder) where TEntity : class, IDatedEntity Parameters Type Name Description EntityTypeBuilder <TEntity> builder The entity type builder associated with the entity. Returns Type Description EntityTypeBuilder <TEntity> The entity type builder. Type Parameters Name Description TEntity The type of entity to configure. | Improve this Doc View Source ConfigureWithKey<TEntity, TKey>(EntityTypeBuilder<TEntity>) Configures the default properties of an TEntity . Declaration public static EntityTypeBuilder<TEntity> ConfigureWithKey<TEntity, TKey>(this EntityTypeBuilder<TEntity> builder) where TEntity : class, IEntityBase<TKey> Parameters Type Name Description EntityTypeBuilder <TEntity> builder The entity type builder associated with the entity. Returns Type Description EntityTypeBuilder <TEntity> The entity type builder. Type Parameters Name Description TEntity The type of entity to configure. TKey The type of unique identifier for the entity."
  },
  "api/MADE.Data.EFCore.Extensions.html": {
    "href": "api/MADE.Data.EFCore.Extensions.html",
    "title": "Namespace MADE.Data.EFCore.Extensions | MADE.NET",
    "keywords": "Namespace MADE.Data.EFCore.Extensions Classes DbContextExtensions Defines a collection of extensions for types. EntityBaseExtensions Defines a collection of extensions for the EntityBase type. QueryableExtensions Defines a collection of extensions for Entity Framework queries."
  },
  "api/MADE.Data.EFCore.Extensions.QueryableExtensions.html": {
    "href": "api/MADE.Data.EFCore.Extensions.QueryableExtensions.html",
    "title": "Class QueryableExtensions | MADE.NET",
    "keywords": "Class QueryableExtensions Defines a collection of extensions for Entity Framework queries. Inheritance System.Object QueryableExtensions Namespace : MADE.Data.EFCore.Extensions Assembly : MADE.Data.EFCore.dll Syntax public static class QueryableExtensions : object Methods | Improve this Doc View Source OrderBy<T>(IQueryable<T>, String, Boolean) Orders the query results by the specified property name from the entity with the option for order by ascending or descending. Declaration public static IQueryable<T> OrderBy<T>(this IQueryable<T> query, string sortName, bool sortDesc) Parameters Type Name Description IQueryable <T> query The query to order. System.String sortName The property/column name to sort on for the entity. System.Boolean sortDesc A value indicating whether to sort descending. Returns Type Description IQueryable <T> The ordered query. Type Parameters Name Description T The type of entity being ordered. | Improve this Doc View Source Page<T>(IQueryable<T>, Int32, Int32) Skips and takes a subset of a data query based on the specified current page and page size requested. Declaration public static IQueryable<T> Page<T>(this IQueryable<T> query, int page, int pageSize) Parameters Type Name Description IQueryable <T> query The current query. System.Int32 page The current page being requested. System.Int32 pageSize The size of the page being requested. Returns Type Description IQueryable <T> The paginated query. Type Parameters Name Description T The type of entity being queried."
  },
  "api/MADE.Data.EFCore.html": {
    "href": "api/MADE.Data.EFCore.html",
    "title": "Namespace MADE.Data.EFCore | MADE.NET",
    "keywords": "Namespace MADE.Data.EFCore Classes EntityBase Defines a base definition for an entity. EntityBase<TKey> Defines a base definition for an entity. Interfaces IDatedEntity Defines a base definition for an entity with defined created and updated date. IEntityBase Defines a base definition for an entity. IEntityBase<TKey> Defines a base definition for an entity with a defined primary key type."
  },
  "api/MADE.Data.EFCore.IDatedEntity.html": {
    "href": "api/MADE.Data.EFCore.IDatedEntity.html",
    "title": "Interface IDatedEntity | MADE.NET",
    "keywords": "Interface IDatedEntity Defines a base definition for an entity with defined created and updated date. Namespace : MADE.Data.EFCore Assembly : MADE.Data.EFCore.dll Syntax public interface IDatedEntity Properties | Improve this Doc View Source CreatedDate Gets or sets the date of the entity's creation. Declaration DateTime CreatedDate { get; set; } Property Value Type Description DateTime | Improve this Doc View Source UpdatedDate Gets or sets the date of the entity's last update. Declaration DateTime? UpdatedDate { get; set; } Property Value Type Description System.Nullable < DateTime > Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Data.EFCore.IEntityBase.html": {
    "href": "api/MADE.Data.EFCore.IEntityBase.html",
    "title": "Interface IEntityBase | MADE.NET",
    "keywords": "Interface IEntityBase Defines a base definition for an entity. Inherited Members IEntityBase<Guid>.Id IDatedEntity.CreatedDate IDatedEntity.UpdatedDate Namespace : MADE.Data.EFCore Assembly : MADE.Data.EFCore.dll Syntax public interface IEntityBase : IEntityBase<Guid>, IDatedEntity Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Data.EFCore.IEntityBase-1.html": {
    "href": "api/MADE.Data.EFCore.IEntityBase-1.html",
    "title": "Interface IEntityBase<TKey> | MADE.NET",
    "keywords": "Interface IEntityBase<TKey> Defines a base definition for an entity with a defined primary key type. Inherited Members IDatedEntity.CreatedDate IDatedEntity.UpdatedDate Namespace : MADE.Data.EFCore Assembly : MADE.Data.EFCore.dll Syntax public interface IEntityBase<TKey> : IDatedEntity Type Parameters Name Description TKey The type of unique identifier for the entity. Properties | Improve this Doc View Source Id Gets or sets the identifier of the entity. Declaration TKey Id { get; set; } Property Value Type Description TKey Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Data.Serialization.Json.Binders.html": {
    "href": "api/MADE.Data.Serialization.Json.Binders.html",
    "title": "Namespace MADE.Data.Serialization.Json.Binders | MADE.NET",
    "keywords": "Namespace MADE.Data.Serialization.Json.Binders Classes JsonTypeMigrationSerializationBinder Defines a serialization binder for JSON.NET for migrating serialized declarations within a serialized JSON object."
  },
  "api/MADE.Data.Serialization.Json.Binders.JsonTypeMigrationSerializationBinder.html": {
    "href": "api/MADE.Data.Serialization.Json.Binders.JsonTypeMigrationSerializationBinder.html",
    "title": "Class JsonTypeMigrationSerializationBinder | MADE.NET",
    "keywords": "Class JsonTypeMigrationSerializationBinder Defines a serialization binder for JSON.NET for migrating serialized declarations within a serialized JSON object. Inheritance System.Object JsonTypeMigrationSerializationBinder Namespace : MADE.Data.Serialization.Json.Binders Assembly : MADE.Data.Serialization.dll Syntax public class JsonTypeMigrationSerializationBinder : DefaultSerializationBinder Remarks This is for migrating serialized types where TypeNameHandling.All has been set in the JSON serializer settings. Constructors | Improve this Doc View Source JsonTypeMigrationSerializationBinder() Initializes a new instance of the JsonTypeMigrationSerializationBinder class. Declaration public JsonTypeMigrationSerializationBinder() Remarks To add migrations, call the AddTypeMigrationAsync(JsonTypeMigration) method. | Improve this Doc View Source JsonTypeMigrationSerializationBinder(JsonTypeMigration[]) Initializes a new instance of the JsonTypeMigrationSerializationBinder class with pre-configured type migrations. Declaration public JsonTypeMigrationSerializationBinder(params JsonTypeMigration[] migrations) Parameters Type Name Description JsonTypeMigration [] migrations The type migrations to initialize with. Methods | Improve this Doc View Source AddTypeMigrationAsync(JsonTypeMigration) Adds a JSON type migration to the binder. Declaration public async Task AddTypeMigrationAsync(JsonTypeMigration migration) Parameters Type Name Description JsonTypeMigration migration The type migration to add. Returns Type Description Task An asynchronous operation. Exceptions Type Condition JsonTypeMigrationException Thrown if a migration already exists for the from type. | Improve this Doc View Source BindToType(String, String) When overridden in a derived class, controls the binding of a serialized object to a type. Declaration public override Type BindToType(string assemblyName, string typeName) Parameters Type Name Description System.String assemblyName Specifies the System.Reflection.Assembly name of the serialized object. System.String typeName Specifies the System.Type name of the serialized object. Returns Type Description Type The type of the object the formatter creates a new instance of. Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Data.Serialization.Json.Exceptions.html": {
    "href": "api/MADE.Data.Serialization.Json.Exceptions.html",
    "title": "Namespace MADE.Data.Serialization.Json.Exceptions | MADE.NET",
    "keywords": "Namespace MADE.Data.Serialization.Json.Exceptions Classes JsonTypeMigrationException Defines an exception for errors occurred when interacting with JSON type migrations."
  },
  "api/MADE.Data.Serialization.Json.Exceptions.JsonTypeMigrationException.html": {
    "href": "api/MADE.Data.Serialization.Json.Exceptions.JsonTypeMigrationException.html",
    "title": "Class JsonTypeMigrationException | MADE.NET",
    "keywords": "Class JsonTypeMigrationException Defines an exception for errors occurred when interacting with JSON type migrations. Inheritance System.Object JsonTypeMigrationException Namespace : MADE.Data.Serialization.Json.Exceptions Assembly : MADE.Data.Serialization.dll Syntax public class JsonTypeMigrationException : Exception Constructors | Improve this Doc View Source JsonTypeMigrationException() Initializes a new instance of the JsonTypeMigrationException class. Declaration public JsonTypeMigrationException() | Improve this Doc View Source JsonTypeMigrationException(String) Initializes a new instance of the JsonTypeMigrationException class with a message that describes the error. Declaration public JsonTypeMigrationException(string message) Parameters Type Name Description System.String message The message that describes the error. | Improve this Doc View Source JsonTypeMigrationException(String, Exception) Initializes a new instance of the JsonTypeMigrationException class with a message that describes the error and inner exception. Declaration public JsonTypeMigrationException(string message, Exception innerException) Parameters Type Name Description System.String message The message that describes the error. Exception innerException The exception that caused this exception to be thrown. Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Data.Serialization.Json.html": {
    "href": "api/MADE.Data.Serialization.Json.html",
    "title": "Namespace MADE.Data.Serialization.Json | MADE.NET",
    "keywords": "Namespace MADE.Data.Serialization.Json Classes JsonTypeMigration Defines the detail for migrating from one type to another using the JsonTypeMigrationSerializationBinder ."
  },
  "api/MADE.Data.Serialization.Json.JsonTypeMigration.html": {
    "href": "api/MADE.Data.Serialization.Json.JsonTypeMigration.html",
    "title": "Class JsonTypeMigration | MADE.NET",
    "keywords": "Class JsonTypeMigration Defines the detail for migrating from one type to another using the JsonTypeMigrationSerializationBinder . Inheritance System.Object JsonTypeMigration Namespace : MADE.Data.Serialization.Json Assembly : MADE.Data.Serialization.dll Syntax public class JsonTypeMigration : object Constructors | Improve this Doc View Source JsonTypeMigration(String, String, Type) Initializes a new instance of the JsonTypeMigration class with the expected from and to migration types. Declaration public JsonTypeMigration(string fromAssemblyName, string fromTypeName, Type toType) Parameters Type Name Description System.String fromAssemblyName The name of the assembly being migrated from. System.String fromTypeName The name of the type being migrated from. Type toType The type being migrated to. | Improve this Doc View Source JsonTypeMigration(Type, Type) Initializes a new instance of the JsonTypeMigration class with the expected from and to migration types. Declaration public JsonTypeMigration(Type fromType, Type toType) Parameters Type Name Description Type fromType The type being migrated from. Type toType The type being migrated to. Properties | Improve this Doc View Source FromAssemblyName Gets the name of the assembly being migrated from. Declaration public string FromAssemblyName { get; } Property Value Type Description System.String | Improve this Doc View Source FromTypeName Gets the name of the type being migrated from. Declaration public string FromTypeName { get; } Property Value Type Description System.String | Improve this Doc View Source ToType Gets the type being migrated to. Declaration public Type ToType { get; } Property Value Type Description Type Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Data.Validation.Exceptions.html": {
    "href": "api/MADE.Data.Validation.Exceptions.html",
    "title": "Namespace MADE.Data.Validation.Exceptions | MADE.NET",
    "keywords": "Namespace MADE.Data.Validation.Exceptions Classes InvalidRangeException Defines an exception for an invalid range."
  },
  "api/MADE.Data.Validation.Exceptions.InvalidRangeException.html": {
    "href": "api/MADE.Data.Validation.Exceptions.InvalidRangeException.html",
    "title": "Class InvalidRangeException | MADE.NET",
    "keywords": "Class InvalidRangeException Defines an exception for an invalid range. Inheritance System.Object InvalidRangeException Namespace : MADE.Data.Validation.Exceptions Assembly : MADE.Data.Validation.dll Syntax public class InvalidRangeException : Exception Constructors | Improve this Doc View Source InvalidRangeException(String) Initializes a new instance of the InvalidRangeException class. Declaration public InvalidRangeException(string message) Parameters Type Name Description System.String message The exception message. Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Data.Validation.Extensions.ComparableExtensions.html": {
    "href": "api/MADE.Data.Validation.Extensions.ComparableExtensions.html",
    "title": "Class ComparableExtensions | MADE.NET",
    "keywords": "Class ComparableExtensions Defines a collection of extensions for objects. Inheritance System.Object ComparableExtensions Namespace : MADE.Data.Validation.Extensions Assembly : MADE.Data.Validation.dll Syntax public static class ComparableExtensions : object Methods | Improve this Doc View Source IsGreaterThan<T>(T, T) Determines whether the value is greater than the other value. Declaration public static bool IsGreaterThan<T>(this T value, T other) where T : IComparable Parameters Type Name Description T value The value to compare. T other The value to compare against. Returns Type Description System.Boolean True if the value is greater than the other value. Type Parameters Name Description T The type. | Improve this Doc View Source IsGreaterThanOrEqualTo<T>(T, T) Determines whether the value is greater than or equal to the other value. Declaration public static bool IsGreaterThanOrEqualTo<T>(this T value, T other) where T : IComparable Parameters Type Name Description T value The value to compare. T other The value to compare against. Returns Type Description System.Boolean True if the value is greater than or equal to the other value. Type Parameters Name Description T The type. | Improve this Doc View Source IsLessThan<T>(T, T) Determines whether the value is less than the other value. Declaration public static bool IsLessThan<T>(this T value, T other) where T : IComparable Parameters Type Name Description T value The value to compare. T other The value to compare against. Returns Type Description System.Boolean True if the value is less than the other value. Type Parameters Name Description T The type. | Improve this Doc View Source IsLessThanOrEqualTo<T>(T, T) Determines whether the value is less than or equal to the other value. Declaration public static bool IsLessThanOrEqualTo<T>(this T value, T other) where T : IComparable Parameters Type Name Description T value The value to compare. T other The value to compare against. Returns Type Description System.Boolean True if the value is less than or equal to the other value. Type Parameters Name Description T The type."
  },
  "api/MADE.Data.Validation.Extensions.DateTimeExtensions.html": {
    "href": "api/MADE.Data.Validation.Extensions.DateTimeExtensions.html",
    "title": "Class DateTimeExtensions | MADE.NET",
    "keywords": "Class DateTimeExtensions Defines a collection of data validation extensions for objects. Inheritance System.Object DateTimeExtensions Namespace : MADE.Data.Validation.Extensions Assembly : MADE.Data.Validation.dll Syntax public static class DateTimeExtensions : object Methods | Improve this Doc View Source IsInRange(DateTime, DateTime, DateTime) Determines whether a is within a valid range. Declaration public static bool IsInRange(this DateTime date, DateTime from, DateTime to) Parameters Type Name Description DateTime date The to check. DateTime from The lower bound of the range. DateTime to The upper bound of the range. Returns Type Description System.Boolean True if the date is within the valid range. | Improve this Doc View Source IsWeekday(DateTime) Determines whether a is a day of the week other than Sunday or Saturday. Declaration public static bool IsWeekday(this DateTime date) Parameters Type Name Description DateTime date The to check. Returns Type Description System.Boolean True if the day of week is between Monday and Friday; otherwise, false. | Improve this Doc View Source IsWeekend(DateTime) Determines whether a is a day of the week other than Monday through Friday. Declaration public static bool IsWeekend(this DateTime date) Parameters Type Name Description DateTime date The to check. Returns Type Description System.Boolean True if the day of week is Saturday or Sunday; otherwise, false."
  },
  "api/MADE.Data.Validation.Extensions.html": {
    "href": "api/MADE.Data.Validation.Extensions.html",
    "title": "Namespace MADE.Data.Validation.Extensions | MADE.NET",
    "keywords": "Namespace MADE.Data.Validation.Extensions Classes ComparableExtensions Defines a collection of extensions for objects. DateTimeExtensions Defines a collection of data validation extensions for objects. MathExtensions Defines a collection of extensions for common mathematics expressions. StringExtensions Defines a collection of extensions for string values."
  },
  "api/MADE.Data.Validation.Extensions.MathExtensions.html": {
    "href": "api/MADE.Data.Validation.Extensions.MathExtensions.html",
    "title": "Class MathExtensions | MADE.NET",
    "keywords": "Class MathExtensions Defines a collection of extensions for common mathematics expressions. Inheritance System.Object MathExtensions Namespace : MADE.Data.Validation.Extensions Assembly : MADE.Data.Validation.dll Syntax public static class MathExtensions : object Fields | Improve this Doc View Source Epsilon Gets a value for Epsilon. Declaration public static readonly double Epsilon Field Value Type Description System.Double Methods | Improve this Doc View Source IsCloseTo(Double, Double) Checks whether two values are close in value which have a precision point. Declaration public static bool IsCloseTo(this double value, double compare) Parameters Type Name Description System.Double value The first value. System.Double compare The second value. Returns Type Description System.Boolean True if the values are close; otherwise, false. | Improve this Doc View Source IsCloseTo(Int32, Int32) Checks whether two values are close in value. Declaration public static bool IsCloseTo(this int value, int compare) Parameters Type Name Description System.Int32 value The first value. System.Int32 compare The second value. Returns Type Description System.Boolean True if the values are close; otherwise, false. | Improve this Doc View Source IsCloseTo(Nullable<Double>, Nullable<Double>) Checks whether two values are close in value which have a precision point. Declaration public static bool IsCloseTo(this double? value, double? compare) Parameters Type Name Description System.Nullable < System.Double > value The first value. System.Nullable < System.Double > compare The second value. Returns Type Description System.Boolean True if the values are close; otherwise, false. | Improve this Doc View Source IsCloseTo(Nullable<Single>, Nullable<Single>) Checks whether two values are close in value which have a precision point. Declaration public static bool IsCloseTo(this float? value, float? compare) Parameters Type Name Description System.Nullable < System.Single > value The first value. System.Nullable < System.Single > compare The second value. Returns Type Description System.Boolean True if the values are close; otherwise, false. | Improve this Doc View Source IsCloseTo(Single, Single) Checks whether two values are close in value which have a precision point. Declaration public static bool IsCloseTo(this float value, float compare) Parameters Type Name Description System.Single value The first value. System.Single compare The second value. Returns Type Description System.Boolean True if the values are close; otherwise, false. | Improve this Doc View Source IsGreaterThan(Double, Double) Checks whether a value is significantly greater than another. Declaration public static bool IsGreaterThan(this double value, double compare) Parameters Type Name Description System.Double value The first value. System.Double compare The second value. Returns Type Description System.Boolean True if the first value is greater than the second; otherwise, false. | Improve this Doc View Source IsInRange(Double, Double, Double) Checks whether a value is within a range. Declaration public static bool IsInRange(this double value, double lower, double upper) Parameters Type Name Description System.Double value The value to check is in range. System.Double lower The lower range band. System.Double upper The upper range band. Returns Type Description System.Boolean True if the value is in the range; otherwise, false. Exceptions Type Condition InvalidRangeException Thrown if the range is invalid. | Improve this Doc View Source IsInRange(Int32, Int32, Int32) Checks whether a value is within a range. Declaration public static bool IsInRange(this int value, int lower, int upper) Parameters Type Name Description System.Int32 value The value to check is in range. System.Int32 lower The lower range band. System.Int32 upper The upper range band. Returns Type Description System.Boolean True if the value is in the range; otherwise, false. Exceptions Type Condition InvalidRangeException Thrown if the range is invalid. | Improve this Doc View Source IsInRange(Single, Single, Single) Checks whether a value is within a range. Declaration public static bool IsInRange(this float value, float lower, float upper) Parameters Type Name Description System.Single value The value to check is in range. System.Single lower The lower range band. System.Single upper The upper range band. Returns Type Description System.Boolean True if the value is in the range; otherwise, false. Exceptions Type Condition InvalidRangeException Thrown if the range is invalid. | Improve this Doc View Source IsLessThan(Double, Double) Checks whether a value is significantly less than another. Declaration public static bool IsLessThan(this double value, double compare) Parameters Type Name Description System.Double value The first value. System.Double compare The second value. Returns Type Description System.Boolean True if the first value is less than the second; otherwise, false. | Improve this Doc View Source IsZero(Double) Checks whether a double value is zero. Declaration public static bool IsZero(this double value) Parameters Type Name Description System.Double value The value to check. Returns Type Description System.Boolean True if zero; otherwise, false. | Improve this Doc View Source IsZero(Single) Checks whether a float value is zero. Declaration public static bool IsZero(this float value) Parameters Type Name Description System.Single value The value to check. Returns Type Description System.Boolean True if zero; otherwise, false."
  },
  "api/MADE.Data.Validation.Extensions.StringExtensions.html": {
    "href": "api/MADE.Data.Validation.Extensions.StringExtensions.html",
    "title": "Class StringExtensions | MADE.NET",
    "keywords": "Class StringExtensions Defines a collection of extensions for string values. Inheritance System.Object StringExtensions Namespace : MADE.Data.Validation.Extensions Assembly : MADE.Data.Validation.dll Syntax public static class StringExtensions : object Methods | Improve this Doc View Source Contains(String, String, CompareOptions) Checks whether a phrase contains a specified value using a comparison option. Declaration public static bool Contains(this string phrase, string value, CompareOptions compareOption) Parameters Type Name Description System.String phrase The phrase to check. System.String value The value to find. CompareOptions compareOption The compare option. Returns Type Description System.Boolean True if the phrase contains the value; otherwise, false. | Improve this Doc View Source IsBoolean(String) Checks whether a string value is a boolean. Declaration public static bool IsBoolean(this string value) Parameters Type Name Description System.String value The value to check. Returns Type Description System.Boolean True if safely parses to a boolean; otherwise, false. | Improve this Doc View Source IsDouble(String) Checks whether a string value is a double. Declaration public static bool IsDouble(this string value) Parameters Type Name Description System.String value The value to check. Returns Type Description System.Boolean True if safely parses to a double; otherwise, false. | Improve this Doc View Source IsFloat(String) Checks whether a string value is a float. Declaration public static bool IsFloat(this string value) Parameters Type Name Description System.String value The value to check. Returns Type Description System.Boolean True if safely parses to a float; otherwise, false. | Improve this Doc View Source IsInt(String) Checks whether a string value is an integer. Declaration public static bool IsInt(this string value) Parameters Type Name Description System.String value The value to check. Returns Type Description System.Boolean True if safely parses to an integer; otherwise, false. | Improve this Doc View Source IsLike(String, String) Compares a string value against a wildcard pattern, similar to the Visual Basic like operator. Declaration public static bool IsLike(this string value, string likePattern) Parameters Type Name Description System.String value The value to compare is like. System.String likePattern The wildcard like pattern to match on. Returns Type Description System.Boolean True if the value is like the pattern; otherwise, false. Remarks An example of this in use comparing strings with * wildcard pattern. // result is true bool result = \"MyValue\".IsLike(\"My*\"); // result is false result = \"MyValue\".IsLike(\"Hello\"); | Improve this Doc View Source IsNullOrWhiteSpace(String) Indicates whether a specified string is null, empty, or consists only of white-space characters. Declaration public static bool IsNullOrWhiteSpace(this string value) Parameters Type Name Description System.String value The string to test. Returns Type Description System.Boolean True if the value parameter is null or empty, or if value consists exclusively of white-space characters."
  },
  "api/MADE.Data.Validation.FluentValidatorCollection-1.html": {
    "href": "api/MADE.Data.Validation.FluentValidatorCollection-1.html",
    "title": "Class FluentValidatorCollection<T> | MADE.NET",
    "keywords": "Class FluentValidatorCollection<T> Defines a list of objects that can be accessed by index. Inheritance System.Object FluentValidatorCollection<T> Implements IValidatorCollection IList Namespace : MADE.Data.Validation Assembly : MADE.Data.Validation.FluentValidation.dll Syntax public class FluentValidatorCollection<T> : List<IValidator<T>>, IValidatorCollection Type Parameters Name Description T The type of item being validated. Constructors | Improve this Doc View Source FluentValidatorCollection() Initializes a new instance of the FluentValidatorCollection<T> class that is empty and has the default initial capacity. Declaration public FluentValidatorCollection() | Improve this Doc View Source FluentValidatorCollection(IEnumerable<IValidator<T>>) Initializes a new instance of the FluentValidatorCollection<T> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied. Declaration public FluentValidatorCollection(IEnumerable<IValidator<T>> collection) Parameters Type Name Description IEnumerable < MADE.Data.Validation.IValidator <T>> collection The collection whose elements are copied to the new list. Exceptions Type Condition System.ArgumentNullException collection is null. | Improve this Doc View Source FluentValidatorCollection(Int32) Initializes a new instance of the FluentValidatorCollection<T> class that is empty and has the specified initial capacity. Declaration public FluentValidatorCollection(int capacity) Parameters Type Name Description System.Int32 capacity The number of elements that the new list can initially store. Exceptions Type Condition System.ArgumentOutOfRangeException capacity is less than 0. Properties | Improve this Doc View Source FeedbackMessages Gets the validator feedback messages for ones which are invalid. Declaration public IEnumerable<string> FeedbackMessages { get; } Property Value Type Description IEnumerable < System.String > | Improve this Doc View Source IsDirty Gets or sets a value indicating whether the data is dirty. Declaration public bool IsDirty { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsInvalid Gets or sets a value indicating whether the data provided is in an invalid state. Declaration public bool IsInvalid { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Validate(Object) Executes data validation on the provided value against the validators provided. Declaration public void Validate(object value) Parameters Type Name Description System.Object value The value to be validated. Events | Improve this Doc View Source Validated Occurs when the input value is validated against the collection of validators. Declaration public event InputValidatedEventHandler Validated Event Type Type Description InputValidatedEventHandler Implements IValidatorCollection IList Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Data.Validation.html": {
    "href": "api/MADE.Data.Validation.html",
    "title": "Namespace MADE.Data.Validation | MADE.NET",
    "keywords": "Namespace MADE.Data.Validation Classes FluentValidatorCollection<T> Defines a list of objects that can be accessed by index. InputValidatedEventArgs Defines an event argument for an input validated request. ValidatorCollection Defines a list of IValidator objects that can be accessed by index. Interfaces IValidator Defines an interface for a data validator. IValidatorCollection Defines an interface for a collection of validators. Delegates InputValidatedEventHandler Defines a delegate for an event handler for observing when an input is validated."
  },
  "api/MADE.Data.Validation.InputValidatedEventArgs.html": {
    "href": "api/MADE.Data.Validation.InputValidatedEventArgs.html",
    "title": "Class InputValidatedEventArgs | MADE.NET",
    "keywords": "Class InputValidatedEventArgs Defines an event argument for an input validated request. Inheritance System.Object InputValidatedEventArgs Namespace : MADE.Data.Validation Assembly : MADE.Data.Validation.dll Syntax public class InputValidatedEventArgs : EventArgs Constructors | Improve this Doc View Source InputValidatedEventArgs(Boolean) Initializes a new instance of the InputValidatedEventArgs class. Declaration public InputValidatedEventArgs(bool isInvalid) Parameters Type Name Description System.Boolean isInvalid A value indicating whether the input is invalid. | Improve this Doc View Source InputValidatedEventArgs(Boolean, Boolean) Initializes a new instance of the InputValidatedEventArgs class. Declaration public InputValidatedEventArgs(bool isInvalid, bool isDirty) Parameters Type Name Description System.Boolean isInvalid A value indicating whether the input is invalid. System.Boolean isDirty A value indicating whether the input is dirty. Properties | Improve this Doc View Source IsDirty Gets a value indicating whether the input is dirty. Declaration public bool IsDirty { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsInvalid Gets a value indicating whether the input is invalid. Declaration public bool IsInvalid { get; } Property Value Type Description System.Boolean Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Data.Validation.InputValidatedEventHandler.html": {
    "href": "api/MADE.Data.Validation.InputValidatedEventHandler.html",
    "title": "Delegate InputValidatedEventHandler | MADE.NET",
    "keywords": "Delegate InputValidatedEventHandler Defines a delegate for an event handler for observing when an input is validated. Namespace : MADE.Data.Validation Assembly : MADE.Data.Validation.dll Syntax public delegate void InputValidatedEventHandler(object sender, InputValidatedEventArgs args); Parameters Type Name Description System.Object sender The sender. InputValidatedEventArgs args The input validated event argument. Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Data.Validation.IValidator.html": {
    "href": "api/MADE.Data.Validation.IValidator.html",
    "title": "Interface IValidator | MADE.NET",
    "keywords": "Interface IValidator Defines an interface for a data validator. Namespace : MADE.Data.Validation Assembly : MADE.Data.Validation.dll Syntax public interface IValidator Properties | Improve this Doc View Source FeedbackMessage Gets or sets the feedback message to display when IsInvalid is true. Declaration string FeedbackMessage { get; set; } Property Value Type Description System.String | Improve this Doc View Source IsDirty Gets or sets a value indicating whether the data is dirty. Declaration bool IsDirty { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsInvalid Gets or sets a value indicating whether the data provided is in an invalid state. Declaration bool IsInvalid { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Key Gets or sets the key associated with the validator. Declaration string Key { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Validate(Object) Executes data validation on the provided value . Declaration void Validate(object value) Parameters Type Name Description System.Object value The value to be validated. Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Data.Validation.IValidatorCollection.html": {
    "href": "api/MADE.Data.Validation.IValidatorCollection.html",
    "title": "Interface IValidatorCollection | MADE.NET",
    "keywords": "Interface IValidatorCollection Defines an interface for a collection of validators. Namespace : MADE.Data.Validation Assembly : MADE.Data.Validation.dll Syntax public interface IValidatorCollection Properties | Improve this Doc View Source FeedbackMessages Gets the validator feedback messages for ones which are invalid. Declaration IEnumerable<string> FeedbackMessages { get; } Property Value Type Description IEnumerable < System.String > | Improve this Doc View Source IsDirty Gets or sets a value indicating whether the data is dirty. Declaration bool IsDirty { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsInvalid Gets or sets a value indicating whether the data provided is in an invalid state. Declaration bool IsInvalid { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Validate(Object) Executes data validation on the provided value against the validators provided. Declaration void Validate(object value) Parameters Type Name Description System.Object value The value to be validated. Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Data.Validation.Strings.html": {
    "href": "api/MADE.Data.Validation.Strings.html",
    "title": "Namespace MADE.Data.Validation.Strings | MADE.NET",
    "keywords": "Namespace MADE.Data.Validation.Strings Classes Resources A strongly-typed resource class, for looking up localized strings, etc."
  },
  "api/MADE.Data.Validation.Strings.Resources.html": {
    "href": "api/MADE.Data.Validation.Strings.Resources.html",
    "title": "Class Resources | MADE.NET",
    "keywords": "Class Resources A strongly-typed resource class, for looking up localized strings, etc. Inheritance System.Object Resources Namespace : MADE.Data.Validation.Strings Assembly : MADE.Data.Validation.dll Syntax public class Resources : object Properties | Improve this Doc View Source AlphaNumericValidator_FeedbackMessage Looks up a localized string similar to The value must only contain letters or numbers.. Declaration public static string AlphaNumericValidator_FeedbackMessage { get; } Property Value Type Description System.String | Improve this Doc View Source AlphaValidator_FeedbackMessage Looks up a localized string similar to The value must only contain letters.. Declaration public static string AlphaValidator_FeedbackMessage { get; } Property Value Type Description System.String | Improve this Doc View Source Base64Validator_FeedbackMessage Looks up a localized string similar to The value must be a valid base64 string.. Declaration public static string Base64Validator_FeedbackMessage { get; } Property Value Type Description System.String | Improve this Doc View Source BetweenValidator_FeedbackMessage Looks up a localized string similar to The value must be between {0} and {1}.. Declaration public static string BetweenValidator_FeedbackMessage { get; } Property Value Type Description System.String | Improve this Doc View Source Culture Overrides the current thread's CurrentUICulture property for all resource lookups using this strongly typed resource class. Declaration public static System.Globalization.CultureInfo Culture { get; set; } Property Value Type Description System.Globalization.CultureInfo | Improve this Doc View Source EmailValidator_FeedbackMessage Looks up a localized string similar to The value must be a valid email address, e.g. test@example.com.. Declaration public static string EmailValidator_FeedbackMessage { get; } Property Value Type Description System.String | Improve this Doc View Source GuidValidator_FeedbackMessage Looks up a localized string similar to The value must be a valid GUID.. Declaration public static string GuidValidator_FeedbackMessage { get; } Property Value Type Description System.String | Improve this Doc View Source IpAddressValidator_FeedbackMessage Looks up a localized string similar to The value must be a valid IP address, e.g. 192.168.0.1.. Declaration public static string IpAddressValidator_FeedbackMessage { get; } Property Value Type Description System.String | Improve this Doc View Source MacAddressValidator_FeedbackMessage Looks up a localized string similar to The value must be a valid MAC address, e.g. 00:11:22:33:44:55.. Declaration public static string MacAddressValidator_FeedbackMessage { get; } Property Value Type Description System.String | Improve this Doc View Source MaxLengthValidator_FeedbackMessage Looks up a localized string similar to The length must be less than {0}.. Declaration public static string MaxLengthValidator_FeedbackMessage { get; } Property Value Type Description System.String | Improve this Doc View Source MaxValueValidator_FeedbackMessage Looks up a localized string similar to The value must be less than {0}.. Declaration public static string MaxValueValidator_FeedbackMessage { get; } Property Value Type Description System.String | Improve this Doc View Source MinLengthValidator_FeedbackMessage Looks up a localized string similar to The length must be greater than {0}.. Declaration public static string MinLengthValidator_FeedbackMessage { get; } Property Value Type Description System.String | Improve this Doc View Source MinValueValidator_FeedbackMessage Looks up a localized string similar to The value must be greater than {0}.. Declaration public static string MinValueValidator_FeedbackMessage { get; } Property Value Type Description System.String | Improve this Doc View Source PredicateValidator_FeedbackMessage Looks up a localized string similar to The value is not valid.. Declaration public static string PredicateValidator_FeedbackMessage { get; } Property Value Type Description System.String | Improve this Doc View Source RegexValidator_FeedbackMessage Looks up a localized string similar to The value does not match the valid mask.. Declaration public static string RegexValidator_FeedbackMessage { get; } Property Value Type Description System.String | Improve this Doc View Source RequiredValidator_FeedbackMessage Looks up a localized string similar to A value is required.. Declaration public static string RequiredValidator_FeedbackMessage { get; } Property Value Type Description System.String | Improve this Doc View Source ResourceManager Returns the cached ResourceManager instance used by this class. Declaration public static System.Resources.ResourceManager ResourceManager { get; } Property Value Type Description System.Resources.ResourceManager | Improve this Doc View Source UrlValidator_FeedbackMessage Looks up a localized string similar to The value must be a valid URL, e.g. https://example.com.. Declaration public static string UrlValidator_FeedbackMessage { get; } Property Value Type Description System.String Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Data.Validation.ValidatorCollection.html": {
    "href": "api/MADE.Data.Validation.ValidatorCollection.html",
    "title": "Class ValidatorCollection | MADE.NET",
    "keywords": "Class ValidatorCollection Defines a list of IValidator objects that can be accessed by index. Inheritance System.Object ValidatorCollection Implements IValidatorCollection IList Namespace : MADE.Data.Validation Assembly : MADE.Data.Validation.dll Syntax public class ValidatorCollection : List<IValidator>, IValidatorCollection Constructors | Improve this Doc View Source ValidatorCollection() Initializes a new instance of the ValidatorCollection class that is empty and has the default initial capacity. Declaration public ValidatorCollection() | Improve this Doc View Source ValidatorCollection(IEnumerable<IValidator>) Initializes a new instance of the ValidatorCollection class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied. Declaration public ValidatorCollection(IEnumerable<IValidator> collection) Parameters Type Name Description IEnumerable < IValidator > collection The collection whose elements are copied to the new list. Exceptions Type Condition System.ArgumentNullException collection is null. | Improve this Doc View Source ValidatorCollection(Int32) Initializes a new instance of the ValidatorCollection class that is empty and has the specified initial capacity. Declaration public ValidatorCollection(int capacity) Parameters Type Name Description System.Int32 capacity The number of elements that the new list can initially store. Exceptions Type Condition System.ArgumentOutOfRangeException capacity is less than 0. Properties | Improve this Doc View Source FeedbackMessages Gets the validator feedback messages for ones which are invalid. Declaration public IEnumerable<string> FeedbackMessages { get; } Property Value Type Description IEnumerable < System.String > | Improve this Doc View Source IsDirty Gets or sets a value indicating whether the data is dirty. Declaration public bool IsDirty { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsInvalid Gets or sets a value indicating whether the data provided is in an invalid state. Declaration public bool IsInvalid { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Validate(Object) Executes data validation on the provided value against the validators provided. Declaration public void Validate(object value) Parameters Type Name Description System.Object value The value to be validated. Events | Improve this Doc View Source Validated Occurs when the input value is validated against the collection of validators. Declaration public event InputValidatedEventHandler Validated Event Type Type Description InputValidatedEventHandler Implements IValidatorCollection IList Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Data.Validation.Validators.AlphaNumericValidator.html": {
    "href": "api/MADE.Data.Validation.Validators.AlphaNumericValidator.html",
    "title": "Class AlphaNumericValidator | MADE.NET",
    "keywords": "Class AlphaNumericValidator Defines a data validator for ensuring a value contains alphanumeric characters. Inheritance System.Object RegexValidator AlphaNumericValidator Implements IValidator Inherited Members RegexValidator.Key RegexValidator.IsInvalid RegexValidator.IsDirty RegexValidator.Pattern RegexValidator.Validate(Object) Namespace : MADE.Data.Validation.Validators Assembly : MADE.Data.Validation.dll Syntax public class AlphaNumericValidator : RegexValidator, IValidator Constructors | Improve this Doc View Source AlphaNumericValidator() Initializes a new instance of the AlphaNumericValidator class with the expected RegEx pattern. Declaration public AlphaNumericValidator() Properties | Improve this Doc View Source FeedbackMessage Gets or sets the feedback message to display when IsInvalid is true. Declaration public override string FeedbackMessage { get; set; } Property Value Type Description System.String Overrides RegexValidator.FeedbackMessage Implements IValidator Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Data.Validation.Validators.AlphaValidator.html": {
    "href": "api/MADE.Data.Validation.Validators.AlphaValidator.html",
    "title": "Class AlphaValidator | MADE.NET",
    "keywords": "Class AlphaValidator Defines a data validator for ensuring a value contains alpha characters. Inheritance System.Object RegexValidator AlphaValidator Implements IValidator Inherited Members RegexValidator.Key RegexValidator.IsInvalid RegexValidator.IsDirty RegexValidator.Pattern RegexValidator.Validate(Object) Namespace : MADE.Data.Validation.Validators Assembly : MADE.Data.Validation.dll Syntax public class AlphaValidator : RegexValidator, IValidator Constructors | Improve this Doc View Source AlphaValidator() Initializes a new instance of the AlphaValidator class with the expected RegEx pattern. Declaration public AlphaValidator() Properties | Improve this Doc View Source FeedbackMessage Gets or sets the feedback message to display when IsInvalid is true. Declaration public override string FeedbackMessage { get; set; } Property Value Type Description System.String Overrides RegexValidator.FeedbackMessage Implements IValidator Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Data.Validation.Validators.Base64Validator.html": {
    "href": "api/MADE.Data.Validation.Validators.Base64Validator.html",
    "title": "Class Base64Validator | MADE.NET",
    "keywords": "Class Base64Validator Defines a data validator for ensuring a value is a valid base64 value. Inheritance System.Object RegexValidator Base64Validator Implements IValidator Inherited Members RegexValidator.Key RegexValidator.IsInvalid RegexValidator.IsDirty RegexValidator.Pattern Namespace : MADE.Data.Validation.Validators Assembly : MADE.Data.Validation.dll Syntax public class Base64Validator : RegexValidator, IValidator Constructors | Improve this Doc View Source Base64Validator() Initializes a new instance of the Base64Validator class. Declaration public Base64Validator() Properties | Improve this Doc View Source FeedbackMessage Gets or sets the feedback message to display when IsInvalid is true. Declaration public override string FeedbackMessage { get; set; } Property Value Type Description System.String Overrides RegexValidator.FeedbackMessage Methods | Improve this Doc View Source Validate(Object) Executes data validation on the provided value . Declaration public override void Validate(object value) Parameters Type Name Description System.Object value The value to be validated. Overrides RegexValidator.Validate(Object) Implements IValidator Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Data.Validation.Validators.BetweenValidator.html": {
    "href": "api/MADE.Data.Validation.Validators.BetweenValidator.html",
    "title": "Class BetweenValidator | MADE.NET",
    "keywords": "Class BetweenValidator Defines a data validator for ensuring a value is within a minimum and maximum range. Inheritance System.Object BetweenValidator Implements IValidator Namespace : MADE.Data.Validation.Validators Assembly : MADE.Data.Validation.dll Syntax public class BetweenValidator : object, IValidator Constructors | Improve this Doc View Source BetweenValidator() Initializes a new instance of the BetweenValidator class. Declaration public BetweenValidator() | Improve this Doc View Source BetweenValidator(IComparable, IComparable) Initializes a new instance of the BetweenValidator class with a minimum and maximum range. Declaration public BetweenValidator(IComparable min, IComparable max) Parameters Type Name Description IComparable min The minimum value within the range. IComparable max The maximum value within the range. Properties | Improve this Doc View Source FeedbackMessage Gets or sets the feedback message to display when IsInvalid is true. Declaration public string FeedbackMessage { get; set; } Property Value Type Description System.String | Improve this Doc View Source Inclusive Gets or sets a value indicating whether the range is inclusive. Declaration public bool Inclusive { get; set; } Property Value Type Description System.Boolean Remarks By default, the value is true . | Improve this Doc View Source IsDirty Gets or sets a value indicating whether the data is dirty. Declaration public bool IsDirty { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsInvalid Gets or sets a value indicating whether the data provided is in an invalid state. Declaration public bool IsInvalid { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Key Gets or sets the key associated with the validator. Declaration public string Key { get; set; } Property Value Type Description System.String | Improve this Doc View Source Max Gets or sets the maximum value within the range. Declaration public IComparable Max { get; set; } Property Value Type Description IComparable | Improve this Doc View Source Min Gets or sets the minimum value within the range. Declaration public IComparable Min { get; set; } Property Value Type Description IComparable Methods | Improve this Doc View Source Validate(Object) Executes data validation on the provided value . Declaration public void Validate(object value) Parameters Type Name Description System.Object value The value to be validated. Implements IValidator Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Data.Validation.Validators.EmailValidator.html": {
    "href": "api/MADE.Data.Validation.Validators.EmailValidator.html",
    "title": "Class EmailValidator | MADE.NET",
    "keywords": "Class EmailValidator Defines a data validator for ensuring a value is an email address. Inheritance System.Object RegexValidator EmailValidator Implements IValidator Inherited Members RegexValidator.Key RegexValidator.IsInvalid RegexValidator.IsDirty RegexValidator.Pattern RegexValidator.Validate(Object) Namespace : MADE.Data.Validation.Validators Assembly : MADE.Data.Validation.dll Syntax public class EmailValidator : RegexValidator, IValidator Constructors | Improve this Doc View Source EmailValidator() Initializes a new instance of the EmailValidator class. Declaration public EmailValidator() Properties | Improve this Doc View Source FeedbackMessage Gets or sets the feedback message to display when IsInvalid is true. Declaration public override string FeedbackMessage { get; set; } Property Value Type Description System.String Overrides RegexValidator.FeedbackMessage Implements IValidator Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Data.Validation.Validators.GuidValidator.html": {
    "href": "api/MADE.Data.Validation.Validators.GuidValidator.html",
    "title": "Class GuidValidator | MADE.NET",
    "keywords": "Class GuidValidator Defines a data validator for ensuring a value is a . Inheritance System.Object GuidValidator Implements IValidator Namespace : MADE.Data.Validation.Validators Assembly : MADE.Data.Validation.dll Syntax public class GuidValidator : object, IValidator Properties | Improve this Doc View Source FeedbackMessage Gets or sets the feedback message to display when IsInvalid is true. Declaration public string FeedbackMessage { get; set; } Property Value Type Description System.String | Improve this Doc View Source IsDirty Gets or sets a value indicating whether the data is dirty. Declaration public bool IsDirty { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsInvalid Gets or sets a value indicating whether the data provided is in an invalid state. Declaration public bool IsInvalid { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Key Gets or sets the key associated with the validator. Declaration public string Key { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Validate(Object) Executes data validation on the provided value . Declaration public void Validate(object value) Parameters Type Name Description System.Object value The value to be validated. Implements IValidator Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Data.Validation.Validators.html": {
    "href": "api/MADE.Data.Validation.Validators.html",
    "title": "Namespace MADE.Data.Validation.Validators | MADE.NET",
    "keywords": "Namespace MADE.Data.Validation.Validators Classes AlphaNumericValidator Defines a data validator for ensuring a value contains alphanumeric characters. AlphaValidator Defines a data validator for ensuring a value contains alpha characters. Base64Validator Defines a data validator for ensuring a value is a valid base64 value. BetweenValidator Defines a data validator for ensuring a value is within a minimum and maximum range. EmailValidator Defines a data validator for ensuring a value is an email address. GuidValidator Defines a data validator for ensuring a value is a . IpAddressValidator Defines a data validator for ensuring a value is a valid IP address. LatitudeValidator Defines a data validator for ensuring a value is within the valid range for a latitude value. LongitudeValidator Defines a data validator for ensuring a value is within the valid range for a longitude value. MacAddressValidator Defines a data validator for ensuring a value is a valid MAC address. MaxLengthValidator Defines a data validator for ensuring a value is less than a maximum length. MaxValueValidator Defines a data validator for ensuring a value is less than a maximum value. MinLengthValidator Defines a data validator for ensuring a value is greater than a minimum length. MinValueValidator Defines a data validator for ensuring a value is greater than a minimum value. PredicateValidator<T> Defines a generic data validator that performs custom validation logic based on the value. RegexValidator Defines a generic regular expression data validator. RequiredValidator Defines a data validator for ensuring a value is provided. WellFormedUrlValidator Defines a data validator for ensuring a value is a valid well formed URL, e.g. https://www.example.com ."
  },
  "api/MADE.Data.Validation.Validators.IpAddressValidator.html": {
    "href": "api/MADE.Data.Validation.Validators.IpAddressValidator.html",
    "title": "Class IpAddressValidator | MADE.NET",
    "keywords": "Class IpAddressValidator Defines a data validator for ensuring a value is a valid IP address. Inheritance System.Object IpAddressValidator Implements IValidator Namespace : MADE.Data.Validation.Validators Assembly : MADE.Data.Validation.dll Syntax public class IpAddressValidator : object, IValidator Properties | Improve this Doc View Source FeedbackMessage Gets or sets the feedback message to display when IsInvalid is true. Declaration public string FeedbackMessage { get; set; } Property Value Type Description System.String | Improve this Doc View Source IsDirty Gets or sets a value indicating whether the data is dirty. Declaration public bool IsDirty { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsInvalid Gets or sets a value indicating whether the data provided is in an invalid state. Declaration public bool IsInvalid { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Key Gets or sets the key associated with the validator. Declaration public string Key { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Validate(Object) Executes data validation on the provided value . Declaration public void Validate(object value) Parameters Type Name Description System.Object value The value to be validated. Implements IValidator Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Data.Validation.Validators.LatitudeValidator.html": {
    "href": "api/MADE.Data.Validation.Validators.LatitudeValidator.html",
    "title": "Class LatitudeValidator | MADE.NET",
    "keywords": "Class LatitudeValidator Defines a data validator for ensuring a value is within the valid range for a latitude value. Inheritance System.Object LatitudeValidator Implements IValidator Namespace : MADE.Data.Validation.Validators Assembly : MADE.Data.Validation.dll Syntax public class LatitudeValidator : object, IValidator Fields | Improve this Doc View Source Max The maximum valid latitude value. Declaration public const double Max = null Field Value Type Description System.Double | Improve this Doc View Source Min The minimum valid latitude value. Declaration public const double Min = null Field Value Type Description System.Double Properties | Improve this Doc View Source FeedbackMessage Gets or sets the feedback message to display when IsInvalid is true. Declaration public virtual string FeedbackMessage { get; set; } Property Value Type Description System.String | Improve this Doc View Source IsDirty Gets or sets a value indicating whether the data is dirty. Declaration public bool IsDirty { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsInvalid Gets or sets a value indicating whether the data provided is in an invalid state. Declaration public bool IsInvalid { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Key Gets or sets the key associated with the validator. Declaration public virtual string Key { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Validate(Object) Executes data validation on the provided value . Declaration public void Validate(object value) Parameters Type Name Description System.Object value The value to be validated. Implements IValidator Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Data.Validation.Validators.LongitudeValidator.html": {
    "href": "api/MADE.Data.Validation.Validators.LongitudeValidator.html",
    "title": "Class LongitudeValidator | MADE.NET",
    "keywords": "Class LongitudeValidator Defines a data validator for ensuring a value is within the valid range for a longitude value. Inheritance System.Object LongitudeValidator Implements IValidator Namespace : MADE.Data.Validation.Validators Assembly : MADE.Data.Validation.dll Syntax public class LongitudeValidator : object, IValidator Fields | Improve this Doc View Source Max The maximum valid longitude value. Declaration public const double Max = null Field Value Type Description System.Double | Improve this Doc View Source Min The minimum valid longitude value. Declaration public const double Min = null Field Value Type Description System.Double Properties | Improve this Doc View Source FeedbackMessage Gets or sets the feedback message to display when IsInvalid is true. Declaration public virtual string FeedbackMessage { get; set; } Property Value Type Description System.String | Improve this Doc View Source IsDirty Gets or sets a value indicating whether the data is dirty. Declaration public bool IsDirty { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsInvalid Gets or sets a value indicating whether the data provided is in an invalid state. Declaration public bool IsInvalid { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Key Gets or sets the key associated with the validator. Declaration public virtual string Key { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Validate(Object) Executes data validation on the provided value . Declaration public void Validate(object value) Parameters Type Name Description System.Object value The value to be validated. Implements IValidator Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Data.Validation.Validators.MacAddressValidator.html": {
    "href": "api/MADE.Data.Validation.Validators.MacAddressValidator.html",
    "title": "Class MacAddressValidator | MADE.NET",
    "keywords": "Class MacAddressValidator Defines a data validator for ensuring a value is a valid MAC address. Inheritance System.Object MacAddressValidator Implements IValidator Namespace : MADE.Data.Validation.Validators Assembly : MADE.Data.Validation.dll Syntax public class MacAddressValidator : object, IValidator Properties | Improve this Doc View Source FeedbackMessage Gets or sets the feedback message to display when IsInvalid is true. Declaration public string FeedbackMessage { get; set; } Property Value Type Description System.String | Improve this Doc View Source IsDirty Gets or sets a value indicating whether the data is dirty. Declaration public bool IsDirty { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsInvalid Gets or sets a value indicating whether the data provided is in an invalid state. Declaration public bool IsInvalid { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Key Gets or sets the key associated with the validator. Declaration public string Key { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Validate(Object) Executes data validation on the provided value . Declaration public void Validate(object value) Parameters Type Name Description System.Object value The value to be validated. Implements IValidator Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Data.Validation.Validators.MaxLengthValidator.html": {
    "href": "api/MADE.Data.Validation.Validators.MaxLengthValidator.html",
    "title": "Class MaxLengthValidator | MADE.NET",
    "keywords": "Class MaxLengthValidator Defines a data validator for ensuring a value is less than a maximum length. Inheritance System.Object MaxLengthValidator Implements IValidator Namespace : MADE.Data.Validation.Validators Assembly : MADE.Data.Validation.dll Syntax public class MaxLengthValidator : object, IValidator Constructors | Improve this Doc View Source MaxLengthValidator() Initializes a new instance of the MaxLengthValidator class. Declaration public MaxLengthValidator() | Improve this Doc View Source MaxLengthValidator(IComparable) Initializes a new instance of the MaxLengthValidator class with a maximum value. Declaration public MaxLengthValidator(IComparable max) Parameters Type Name Description IComparable max The maximum value. Properties | Improve this Doc View Source FeedbackMessage Gets or sets the feedback message to display when IsInvalid is true. Declaration public string FeedbackMessage { get; set; } Property Value Type Description System.String | Improve this Doc View Source IsDirty Gets or sets a value indicating whether the data is dirty. Declaration public bool IsDirty { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsInvalid Gets or sets a value indicating whether the data provided is in an invalid state. Declaration public bool IsInvalid { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Key Gets or sets the key associated with the validator. Declaration public string Key { get; set; } Property Value Type Description System.String | Improve this Doc View Source Max Gets or sets the maximum value. Declaration public IComparable Max { get; set; } Property Value Type Description IComparable Methods | Improve this Doc View Source Validate(Object) Executes data validation on the provided value . Declaration public void Validate(object value) Parameters Type Name Description System.Object value The value to be validated. Implements IValidator Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Data.Validation.Validators.MaxValueValidator.html": {
    "href": "api/MADE.Data.Validation.Validators.MaxValueValidator.html",
    "title": "Class MaxValueValidator | MADE.NET",
    "keywords": "Class MaxValueValidator Defines a data validator for ensuring a value is less than a maximum value. Inheritance System.Object MaxValueValidator Implements IValidator Namespace : MADE.Data.Validation.Validators Assembly : MADE.Data.Validation.dll Syntax public class MaxValueValidator : object, IValidator Constructors | Improve this Doc View Source MaxValueValidator() Initializes a new instance of the MaxValueValidator class. Declaration public MaxValueValidator() | Improve this Doc View Source MaxValueValidator(IComparable) Initializes a new instance of the MaxValueValidator class with a maximum value. Declaration public MaxValueValidator(IComparable max) Parameters Type Name Description IComparable max The maximum value. Properties | Improve this Doc View Source FeedbackMessage Gets or sets the feedback message to display when IsInvalid is true. Declaration public string FeedbackMessage { get; set; } Property Value Type Description System.String | Improve this Doc View Source IsDirty Gets or sets a value indicating whether the data is dirty. Declaration public bool IsDirty { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsInvalid Gets or sets a value indicating whether the data provided is in an invalid state. Declaration public bool IsInvalid { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Key Gets or sets the key associated with the validator. Declaration public string Key { get; set; } Property Value Type Description System.String | Improve this Doc View Source Max Gets or sets the minimum value. Declaration public IComparable Max { get; set; } Property Value Type Description IComparable Methods | Improve this Doc View Source Validate(Object) Executes data validation on the provided value . Declaration public void Validate(object value) Parameters Type Name Description System.Object value The value to be validated. Implements IValidator Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Data.Validation.Validators.MinLengthValidator.html": {
    "href": "api/MADE.Data.Validation.Validators.MinLengthValidator.html",
    "title": "Class MinLengthValidator | MADE.NET",
    "keywords": "Class MinLengthValidator Defines a data validator for ensuring a value is greater than a minimum length. Inheritance System.Object MinLengthValidator Implements IValidator Namespace : MADE.Data.Validation.Validators Assembly : MADE.Data.Validation.dll Syntax public class MinLengthValidator : object, IValidator Constructors | Improve this Doc View Source MinLengthValidator() Initializes a new instance of the MinLengthValidator class. Declaration public MinLengthValidator() | Improve this Doc View Source MinLengthValidator(IComparable) Initializes a new instance of the MinLengthValidator class with a minimum value. Declaration public MinLengthValidator(IComparable min) Parameters Type Name Description IComparable min The maximum value. Properties | Improve this Doc View Source FeedbackMessage Gets or sets the feedback message to display when IsInvalid is true. Declaration public string FeedbackMessage { get; set; } Property Value Type Description System.String | Improve this Doc View Source IsDirty Gets or sets a value indicating whether the data is dirty. Declaration public bool IsDirty { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsInvalid Gets or sets a value indicating whether the data provided is in an invalid state. Declaration public bool IsInvalid { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Key Gets or sets the key associated with the validator. Declaration public string Key { get; set; } Property Value Type Description System.String | Improve this Doc View Source Min Gets or sets the minimum value. Declaration public IComparable Min { get; set; } Property Value Type Description IComparable Methods | Improve this Doc View Source Validate(Object) Executes data validation on the provided value . Declaration public void Validate(object value) Parameters Type Name Description System.Object value The value to be validated. Implements IValidator Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Data.Validation.Validators.MinValueValidator.html": {
    "href": "api/MADE.Data.Validation.Validators.MinValueValidator.html",
    "title": "Class MinValueValidator | MADE.NET",
    "keywords": "Class MinValueValidator Defines a data validator for ensuring a value is greater than a minimum value. Inheritance System.Object MinValueValidator Implements IValidator Namespace : MADE.Data.Validation.Validators Assembly : MADE.Data.Validation.dll Syntax public class MinValueValidator : object, IValidator Constructors | Improve this Doc View Source MinValueValidator() Initializes a new instance of the MinValueValidator class. Declaration public MinValueValidator() | Improve this Doc View Source MinValueValidator(IComparable) Initializes a new instance of the MinValueValidator class with a minimum value. Declaration public MinValueValidator(IComparable min) Parameters Type Name Description IComparable min The minimum value. Properties | Improve this Doc View Source FeedbackMessage Gets or sets the feedback message to display when IsInvalid is true. Declaration public string FeedbackMessage { get; set; } Property Value Type Description System.String | Improve this Doc View Source IsDirty Gets or sets a value indicating whether the data is dirty. Declaration public bool IsDirty { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsInvalid Gets or sets a value indicating whether the data provided is in an invalid state. Declaration public bool IsInvalid { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Key Gets or sets the key associated with the validator. Declaration public string Key { get; set; } Property Value Type Description System.String | Improve this Doc View Source Min Gets or sets the minimum value. Declaration public IComparable Min { get; set; } Property Value Type Description IComparable Methods | Improve this Doc View Source Validate(Object) Executes data validation on the provided value . Declaration public void Validate(object value) Parameters Type Name Description System.Object value The value to be validated. Implements IValidator Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Data.Validation.Validators.PredicateValidator-1.html": {
    "href": "api/MADE.Data.Validation.Validators.PredicateValidator-1.html",
    "title": "Class PredicateValidator<T> | MADE.NET",
    "keywords": "Class PredicateValidator<T> Defines a generic data validator that performs custom validation logic based on the value. Inheritance System.Object PredicateValidator<T> Implements IValidator Namespace : MADE.Data.Validation.Validators Assembly : MADE.Data.Validation.dll Syntax public class PredicateValidator<T> : object, IValidator Type Parameters Name Description T The type of value being validated. Constructors | Improve this Doc View Source PredicateValidator() Initializes a new instance of the PredicateValidator<T> class. Declaration public PredicateValidator() | Improve this Doc View Source PredicateValidator(Func<T, Boolean>) Initializes a new instance of the PredicateValidator<T> class with the custom validation logic. Declaration public PredicateValidator(Func<T, bool> predicate) Parameters Type Name Description Func <T, System.Boolean > predicate The logic for performing validation on the value. Properties | Improve this Doc View Source FeedbackMessage Gets or sets the feedback message to display when IsInvalid is true. Declaration public virtual string FeedbackMessage { get; set; } Property Value Type Description System.String | Improve this Doc View Source IsDirty Gets or sets a value indicating whether the data is dirty. Declaration public bool IsDirty { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsInvalid Gets or sets a value indicating whether the data provided is in an invalid state. Declaration public bool IsInvalid { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Key Gets or sets the key associated with the validator. Declaration public string Key { get; set; } Property Value Type Description System.String | Improve this Doc View Source Predicate Gets or sets the logic for performing validation on the value. Declaration public Func<T, bool> Predicate { get; set; } Property Value Type Description Func <T, System.Boolean > Methods | Improve this Doc View Source Validate(Object) Executes data validation on the provided value . Declaration public void Validate(object value) Parameters Type Name Description System.Object value The value to be validated. Implements IValidator Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Data.Validation.Validators.RegexValidator.html": {
    "href": "api/MADE.Data.Validation.Validators.RegexValidator.html",
    "title": "Class RegexValidator | MADE.NET",
    "keywords": "Class RegexValidator Defines a generic regular expression data validator. Inheritance System.Object RegexValidator AlphaNumericValidator AlphaValidator Base64Validator EmailValidator Implements IValidator Namespace : MADE.Data.Validation.Validators Assembly : MADE.Data.Validation.dll Syntax public class RegexValidator : object, IValidator Properties | Improve this Doc View Source FeedbackMessage Gets or sets the feedback message to display when IsInvalid is true. Declaration public virtual string FeedbackMessage { get; set; } Property Value Type Description System.String | Improve this Doc View Source IsDirty Gets or sets a value indicating whether the data is dirty. Declaration public bool IsDirty { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsInvalid Gets or sets a value indicating whether the data provided is in an invalid state. Declaration public bool IsInvalid { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Key Gets or sets the key associated with the validator. Declaration public string Key { get; set; } Property Value Type Description System.String | Improve this Doc View Source Pattern Gets or sets the RegEx pattern to match on. Declaration public string Pattern { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Validate(Object) Executes data validation on the provided value . Declaration public virtual void Validate(object value) Parameters Type Name Description System.Object value The value to be validated. Implements IValidator Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Data.Validation.Validators.RequiredValidator.html": {
    "href": "api/MADE.Data.Validation.Validators.RequiredValidator.html",
    "title": "Class RequiredValidator | MADE.NET",
    "keywords": "Class RequiredValidator Defines a data validator for ensuring a value is provided. Inheritance System.Object RequiredValidator Implements IValidator Namespace : MADE.Data.Validation.Validators Assembly : MADE.Data.Validation.dll Syntax public class RequiredValidator : object, IValidator Properties | Improve this Doc View Source FeedbackMessage Gets or sets the feedback message to display when IsInvalid is true. Declaration public string FeedbackMessage { get; set; } Property Value Type Description System.String | Improve this Doc View Source IsDirty Gets or sets a value indicating whether the data is dirty. Declaration public bool IsDirty { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsInvalid Gets or sets a value indicating whether the data provided is in an invalid state. Declaration public bool IsInvalid { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Key Gets or sets the key associated with the validator. Declaration public string Key { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Validate(Object) Executes data validation on the provided value . Declaration public void Validate(object value) Parameters Type Name Description System.Object value The value to be validated. Implements IValidator Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Data.Validation.Validators.WellFormedUrlValidator.html": {
    "href": "api/MADE.Data.Validation.Validators.WellFormedUrlValidator.html",
    "title": "Class WellFormedUrlValidator | MADE.NET",
    "keywords": "Class WellFormedUrlValidator Defines a data validator for ensuring a value is a valid well formed URL, e.g. https://www.example.com . Inheritance System.Object WellFormedUrlValidator Implements IValidator Namespace : MADE.Data.Validation.Validators Assembly : MADE.Data.Validation.dll Syntax public class WellFormedUrlValidator : object, IValidator Properties | Improve this Doc View Source FeedbackMessage Gets or sets the feedback message to display when IsInvalid is true. Declaration public string FeedbackMessage { get; set; } Property Value Type Description System.String | Improve this Doc View Source IsDirty Gets or sets a value indicating whether the data is dirty. Declaration public bool IsDirty { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsInvalid Gets or sets a value indicating whether the data provided is in an invalid state. Declaration public bool IsInvalid { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Key Gets or sets the key associated with the validator. Declaration public string Key { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Validate(Object) Executes data validation on the provided value . Declaration public void Validate(object value) Parameters Type Name Description System.Object value The value to be validated. Implements IValidator Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Diagnostics.AppDiagnostics.html": {
    "href": "api/MADE.Diagnostics.AppDiagnostics.html",
    "title": "Class AppDiagnostics | MADE.NET",
    "keywords": "Class AppDiagnostics Defines a service for managing application wide event logging for exceptions. Inheritance System.Object AppDiagnostics Implements IAppDiagnostics Namespace : MADE.Diagnostics Assembly : MADE.Diagnostics.dll Syntax public class AppDiagnostics : object, IAppDiagnostics Constructors | Improve this Doc View Source AppDiagnostics(IEventLogger) Initializes a new instance of the AppDiagnostics class. Declaration public AppDiagnostics(IEventLogger eventLogger) Parameters Type Name Description IEventLogger eventLogger The instance of the service for logging application event messages. Properties | Improve this Doc View Source EventLogger Gets the service for logging application event messages. Declaration public IEventLogger EventLogger { get; } Property Value Type Description IEventLogger | Improve this Doc View Source IsRecordingDiagnostics Gets a value indicating whether application diagnostic messages are being recorded. Declaration public bool IsRecordingDiagnostics { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source StartRecordingDiagnosticsAsync() Starts tracking and recording the application diagnostic messages. Declaration public async Task StartRecordingDiagnosticsAsync() Returns Type Description Task An asynchronous operation. | Improve this Doc View Source StopRecordingDiagnostics() Stops tracking and recording the application diagnostic messages. Declaration public void StopRecordingDiagnostics() Events | Improve this Doc View Source ExceptionObserved Occurs when an exception is observed. Declaration public event ExceptionObservedEventHandler ExceptionObserved Event Type Type Description ExceptionObservedEventHandler Implements IAppDiagnostics Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Diagnostics.Exceptions.ExceptionObservedEventArgs.html": {
    "href": "api/MADE.Diagnostics.Exceptions.ExceptionObservedEventArgs.html",
    "title": "Class ExceptionObservedEventArgs | MADE.NET",
    "keywords": "Class ExceptionObservedEventArgs Defines an event argument for an observed exception. Inheritance System.Object ExceptionObservedEventArgs Namespace : MADE.Diagnostics.Exceptions Assembly : MADE.Diagnostics.dll Syntax public class ExceptionObservedEventArgs : EventArgs Constructors | Improve this Doc View Source ExceptionObservedEventArgs(Guid, Exception) Initializes a new instance of the ExceptionObservedEventArgs class. Declaration public ExceptionObservedEventArgs(Guid correlationId, Exception exception) Parameters Type Name Description Guid correlationId The unique identifier for correlating the exception. Exception exception The exception that was observed. Properties | Improve this Doc View Source CorrelationId Gets the unique identifier for correlating the exception. Declaration public Guid CorrelationId { get; } Property Value Type Description Guid | Improve this Doc View Source Exception Gets the exception that was observed. Declaration public Exception Exception { get; } Property Value Type Description Exception Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Diagnostics.Exceptions.ExceptionObservedEventHandler.html": {
    "href": "api/MADE.Diagnostics.Exceptions.ExceptionObservedEventHandler.html",
    "title": "Delegate ExceptionObservedEventHandler | MADE.NET",
    "keywords": "Delegate ExceptionObservedEventHandler Defines a delegate for an event handler for observing exceptions that were thrown. Namespace : MADE.Diagnostics.Exceptions Assembly : MADE.Diagnostics.dll Syntax public delegate void ExceptionObservedEventHandler(object sender, ExceptionObservedEventArgs args); Parameters Type Name Description System.Object sender The sender. ExceptionObservedEventArgs args The exception observed event argument. Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Diagnostics.Exceptions.html": {
    "href": "api/MADE.Diagnostics.Exceptions.html",
    "title": "Namespace MADE.Diagnostics.Exceptions | MADE.NET",
    "keywords": "Namespace MADE.Diagnostics.Exceptions Classes ExceptionObservedEventArgs Defines an event argument for an observed exception. Delegates ExceptionObservedEventHandler Defines a delegate for an event handler for observing exceptions that were thrown."
  },
  "api/MADE.Diagnostics.html": {
    "href": "api/MADE.Diagnostics.html",
    "title": "Namespace MADE.Diagnostics | MADE.NET",
    "keywords": "Namespace MADE.Diagnostics Classes AppDiagnostics Defines a service for managing application wide event logging for exceptions. StopwatchHelper Defines a helper class for creating instances for method calls to track how long they take to execute. Interfaces IAppDiagnostics Defines an interface for handling application diagnostics."
  },
  "api/MADE.Diagnostics.IAppDiagnostics.html": {
    "href": "api/MADE.Diagnostics.IAppDiagnostics.html",
    "title": "Interface IAppDiagnostics | MADE.NET",
    "keywords": "Interface IAppDiagnostics Defines an interface for handling application diagnostics. Namespace : MADE.Diagnostics Assembly : MADE.Diagnostics.dll Syntax public interface IAppDiagnostics Properties | Improve this Doc View Source EventLogger Gets the service for logging application event messages. Declaration IEventLogger EventLogger { get; } Property Value Type Description IEventLogger | Improve this Doc View Source IsRecordingDiagnostics Gets a value indicating whether application diagnostic messages are being recorded. Declaration bool IsRecordingDiagnostics { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source StartRecordingDiagnosticsAsync() Starts tracking and recording the application diagnostic messages. Declaration Task StartRecordingDiagnosticsAsync() Returns Type Description Task An asynchronous operation. | Improve this Doc View Source StopRecordingDiagnostics() Stops tracking and recording the application diagnostic messages. Declaration void StopRecordingDiagnostics() Events | Improve this Doc View Source ExceptionObserved Occurs when an exception is observed. Declaration event ExceptionObservedEventHandler ExceptionObserved Event Type Type Description ExceptionObservedEventHandler Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Diagnostics.Logging.FileEventLogger.html": {
    "href": "api/MADE.Diagnostics.Logging.FileEventLogger.html",
    "title": "Class FileEventLogger | MADE.NET",
    "keywords": "Class FileEventLogger Defines a service for logging events to a log file. Inheritance System.Object FileEventLogger Implements IEventLogger Namespace : MADE.Diagnostics.Logging Assembly : MADE.Diagnostics.dll Syntax public class FileEventLogger : object, IEventLogger Properties | Improve this Doc View Source LogFileNameFormat Gets or sets the format for the name of the log file. Declaration public string LogFileNameFormat { get; set; } Property Value Type Description System.String | Improve this Doc View Source LogPath Gets or sets the full file path to where the current log exists. Declaration public string LogPath { get; set; } Property Value Type Description System.String | Improve this Doc View Source LogsFolderName Gets or sets the name of the folder where log files are stored. Declaration public string LogsFolderName { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source WriteCritical(Exception) Writes an exception to the event log as a critical message. Declaration public void WriteCritical(Exception ex) Parameters Type Name Description Exception ex The exception to write out. | Improve this Doc View Source WriteCritical(String) Writes a critical error message to the event log. Declaration public async void WriteCritical(string message) Parameters Type Name Description System.String message The message to write out. | Improve this Doc View Source WriteCritical(String, Exception) Writes an exception to the event log as a critical message. Declaration public void WriteCritical(string message, Exception ex) Parameters Type Name Description System.String message The message to write out. Exception ex The exception to write out. | Improve this Doc View Source WriteDebug(Exception) Writes an exception to the event log as a debug message. Declaration public void WriteDebug(Exception ex) Parameters Type Name Description Exception ex The exception to write out. | Improve this Doc View Source WriteDebug(String) Writes a debug information message to the event log when in DEBUG mode. Declaration public async void WriteDebug(string message) Parameters Type Name Description System.String message The message to write out. | Improve this Doc View Source WriteDebug(String, Exception) Writes an exception to the event log as a debug message. Declaration public void WriteDebug(string message, Exception ex) Parameters Type Name Description System.String message The message to write out. Exception ex The exception to write out. | Improve this Doc View Source WriteError(Exception) Writes an exception to the event log as an error message. Declaration public void WriteError(Exception ex) Parameters Type Name Description Exception ex The exception to write out. | Improve this Doc View Source WriteError(String) Writes an error message to the event log. Declaration public async void WriteError(string message) Parameters Type Name Description System.String message The message to write out. | Improve this Doc View Source WriteError(String, Exception) Writes an exception to the event log as an error message. Declaration public void WriteError(string message, Exception ex) Parameters Type Name Description System.String message The message to write out. Exception ex The exception to write out. | Improve this Doc View Source WriteInfo(Exception) Writes an exception to the event log as a generic information message. Declaration public void WriteInfo(Exception ex) Parameters Type Name Description Exception ex The exception to write out. | Improve this Doc View Source WriteInfo(String) Writes a generic information message to the event log. Declaration public async void WriteInfo(string message) Parameters Type Name Description System.String message The message to write out. | Improve this Doc View Source WriteInfo(String, Exception) Writes an exception to the event log as a generic information message. Declaration public void WriteInfo(string message, Exception ex) Parameters Type Name Description System.String message The message to write out. Exception ex The exception to write out. | Improve this Doc View Source WriteWarning(Exception) Writes an exception to the event log as a warning message. Declaration public void WriteWarning(Exception ex) Parameters Type Name Description Exception ex The exception to write out. | Improve this Doc View Source WriteWarning(String) Writes a warning message to the event log. Declaration public async void WriteWarning(string message) Parameters Type Name Description System.String message The message to write out. | Improve this Doc View Source WriteWarning(String, Exception) Writes an exception to the event log as a warning message. Declaration public void WriteWarning(string message, Exception ex) Parameters Type Name Description System.String message The message to write out. Exception ex The exception to write out. Implements IEventLogger Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Diagnostics.Logging.html": {
    "href": "api/MADE.Diagnostics.Logging.html",
    "title": "Namespace MADE.Diagnostics.Logging | MADE.NET",
    "keywords": "Namespace MADE.Diagnostics.Logging Classes FileEventLogger Defines a service for logging events to a log file. Interfaces IEventLogger Defines an interface for an event logging service."
  },
  "api/MADE.Diagnostics.Logging.IEventLogger.html": {
    "href": "api/MADE.Diagnostics.Logging.IEventLogger.html",
    "title": "Interface IEventLogger | MADE.NET",
    "keywords": "Interface IEventLogger Defines an interface for an event logging service. Namespace : MADE.Diagnostics.Logging Assembly : MADE.Diagnostics.dll Syntax public interface IEventLogger Methods | Improve this Doc View Source WriteCritical(Exception) Writes an exception to the event log as a critical message. Declaration void WriteCritical(Exception ex) Parameters Type Name Description Exception ex The exception to write out. | Improve this Doc View Source WriteCritical(String) Writes a critical error message to the event log. Declaration void WriteCritical(string message) Parameters Type Name Description System.String message The message to write out. | Improve this Doc View Source WriteCritical(String, Exception) Writes an exception to the event log as a critical message. Declaration void WriteCritical(string message, Exception ex) Parameters Type Name Description System.String message The message to write out. Exception ex The exception to write out. | Improve this Doc View Source WriteDebug(Exception) Writes an exception to the event log as a debug message. Declaration void WriteDebug(Exception ex) Parameters Type Name Description Exception ex The exception to write out. | Improve this Doc View Source WriteDebug(String) Writes a debug information message to the event log when in DEBUG mode. Declaration void WriteDebug(string message) Parameters Type Name Description System.String message The message to write out. | Improve this Doc View Source WriteDebug(String, Exception) Writes an exception to the event log as a debug message. Declaration void WriteDebug(string message, Exception ex) Parameters Type Name Description System.String message The message to write out. Exception ex The exception to write out. | Improve this Doc View Source WriteError(Exception) Writes an exception to the event log as an error message. Declaration void WriteError(Exception ex) Parameters Type Name Description Exception ex The exception to write out. | Improve this Doc View Source WriteError(String) Writes an error message to the event log. Declaration void WriteError(string message) Parameters Type Name Description System.String message The message to write out. | Improve this Doc View Source WriteError(String, Exception) Writes an exception to the event log as an error message. Declaration void WriteError(string message, Exception ex) Parameters Type Name Description System.String message The message to write out. Exception ex The exception to write out. | Improve this Doc View Source WriteInfo(Exception) Writes an exception to the event log as a generic information message. Declaration void WriteInfo(Exception ex) Parameters Type Name Description Exception ex The exception to write out. | Improve this Doc View Source WriteInfo(String) Writes a generic information message to the event log. Declaration void WriteInfo(string message) Parameters Type Name Description System.String message The message to write out. | Improve this Doc View Source WriteInfo(String, Exception) Writes an exception to the event log as a generic information message. Declaration void WriteInfo(string message, Exception ex) Parameters Type Name Description System.String message The message to write out. Exception ex The exception to write out. | Improve this Doc View Source WriteWarning(Exception) Writes an exception to the event log as a warning message. Declaration void WriteWarning(Exception ex) Parameters Type Name Description Exception ex The exception to write out. | Improve this Doc View Source WriteWarning(String) Writes a warning message to the event log. Declaration void WriteWarning(string message) Parameters Type Name Description System.String message The message to write out. | Improve this Doc View Source WriteWarning(String, Exception) Writes an exception to the event log as a warning message. Declaration void WriteWarning(string message, Exception ex) Parameters Type Name Description System.String message The message to write out. Exception ex The exception to write out. Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Diagnostics.StopwatchHelper.html": {
    "href": "api/MADE.Diagnostics.StopwatchHelper.html",
    "title": "Class StopwatchHelper | MADE.NET",
    "keywords": "Class StopwatchHelper Defines a helper class for creating instances for method calls to track how long they take to execute. Inheritance System.Object StopwatchHelper Namespace : MADE.Diagnostics Assembly : MADE.Diagnostics.dll Syntax public static class StopwatchHelper : object Methods | Improve this Doc View Source Start(String, String) Starts a with the specified caller and name . Declaration public static string Start(string caller = null, string name = null) Parameters Type Name Description System.String caller The caller for the , assumed as the file path by the caller if not set. System.String name The name of the unit of code under test, assumed as the member name of the caller if not set. Returns Type Description System.String A display message for an output containing the key. | Improve this Doc View Source Stop(String, String) Stops a with the specified caller and name . Declaration public static (string, TimeSpan) Stop(string caller = null, string name = null) Parameters Type Name Description System.String caller The caller for the , assumed as the file path by the caller if not set. System.String name The name of the unit of code under test, assumed as the member name of the caller if not set. Returns Type Description System.ValueTuple < System.String , TimeSpan > A display message for an output containing the details of the elapsed time, and the elapsed time value."
  },
  "api/MADE.Foundation.Platform.html": {
    "href": "api/MADE.Foundation.Platform.html",
    "title": "Namespace MADE.Foundation.Platform | MADE.NET",
    "keywords": "Namespace MADE.Foundation.Platform Classes PlatformApiHelper Defines a helper for checking platform support for APIs. PlatformNotSupportedAttribute Defines an attribute that marks a component as not supported by a specific platform. PlatformNotSupportedException Defines an exception thrown when code is called for a platform that is not supported."
  },
  "api/MADE.Foundation.Platform.PlatformApiHelper.html": {
    "href": "api/MADE.Foundation.Platform.PlatformApiHelper.html",
    "title": "Class PlatformApiHelper | MADE.NET",
    "keywords": "Class PlatformApiHelper Defines a helper for checking platform support for APIs. Inheritance System.Object PlatformApiHelper Namespace : MADE.Foundation.Platform Assembly : MADE.Foundation.dll Syntax public static class PlatformApiHelper : object Methods | Improve this Doc View Source IsMethodSupported(Type, String) Indicates whether the specified methodName on type is supported by the platform. Declaration public static bool IsMethodSupported(Type type, string methodName) Parameters Type Name Description Type type The type where the method should be checked. System.String methodName The name of the method to check. Returns Type Description System.Boolean True if supported; otherwise, false. | Improve this Doc View Source IsPropertySupported(Type, String) Indicates whether the specified propertyName on type is supported by the platform. Declaration public static bool IsPropertySupported(Type type, string propertyName) Parameters Type Name Description Type type The type where the property should be checked. System.String propertyName The name of the property to check. Returns Type Description System.Boolean True if supported; otherwise, false. | Improve this Doc View Source IsTypeSupported(Type) Indicates whether the specified type is supported by the platform. Declaration public static bool IsTypeSupported(Type type) Parameters Type Name Description Type type The type to check. Returns Type Description System.Boolean True if supported; otherwise, false."
  },
  "api/MADE.Foundation.Platform.PlatformNotSupportedAttribute.html": {
    "href": "api/MADE.Foundation.Platform.PlatformNotSupportedAttribute.html",
    "title": "Class PlatformNotSupportedAttribute | MADE.NET",
    "keywords": "Class PlatformNotSupportedAttribute Defines an attribute that marks a component as not supported by a specific platform. Inheritance System.Object PlatformNotSupportedAttribute Namespace : MADE.Foundation.Platform Assembly : MADE.Foundation.dll Syntax public sealed class PlatformNotSupportedAttribute : Attribute Constructors | Improve this Doc View Source PlatformNotSupportedAttribute() Initializes a new instance of the PlatformNotSupportedAttribute class. Declaration public PlatformNotSupportedAttribute() Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Foundation.Platform.PlatformNotSupportedException.html": {
    "href": "api/MADE.Foundation.Platform.PlatformNotSupportedException.html",
    "title": "Class PlatformNotSupportedException | MADE.NET",
    "keywords": "Class PlatformNotSupportedException Defines an exception thrown when code is called for a platform that is not supported. Inheritance System.Object PlatformNotSupportedException Namespace : MADE.Foundation.Platform Assembly : MADE.Foundation.dll Syntax public class PlatformNotSupportedException : NotImplementedException Constructors | Improve this Doc View Source PlatformNotSupportedException() Initializes a new instance of the PlatformNotSupportedException class with default properties. Declaration public PlatformNotSupportedException() | Improve this Doc View Source PlatformNotSupportedException(String) Initializes a new instance of the PlatformNotSupportedException class with a specified error message. Declaration public PlatformNotSupportedException(string message) Parameters Type Name Description System.String message The error message that explains the reason for the exception. | Improve this Doc View Source PlatformNotSupportedException(String, Exception) Initializes a new instance of the PlatformNotSupportedException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public PlatformNotSupportedException(string message, Exception inner) Parameters Type Name Description System.String message The error message that explains the reason for the exception. Exception inner The exception that is the cause of the current exception. If the inner parameter is not null , the current exception is raised in a langword_csharp_catch block that handles the inner exception. Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Networking.Extensions.html": {
    "href": "api/MADE.Networking.Extensions.html",
    "title": "Namespace MADE.Networking.Extensions | MADE.NET",
    "keywords": "Namespace MADE.Networking.Extensions Classes HttpResponseMessageExtensions Defines a collection of extensions for objects. UriExtensions Defines a collection of extensions for objects."
  },
  "api/MADE.Networking.Extensions.HttpResponseMessageExtensions.html": {
    "href": "api/MADE.Networking.Extensions.HttpResponseMessageExtensions.html",
    "title": "Class HttpResponseMessageExtensions | MADE.NET",
    "keywords": "Class HttpResponseMessageExtensions Defines a collection of extensions for objects. Inheritance System.Object HttpResponseMessageExtensions Namespace : MADE.Networking.Extensions Assembly : MADE.Networking.dll Syntax public static class HttpResponseMessageExtensions : object Methods | Improve this Doc View Source DeserializeAsync<T>(HttpResponseMessage) Deserializes the content of the specified response to a HttpResponseMessage<T> . Declaration public static async Task<HttpResponseMessage<T>> DeserializeAsync<T>(this HttpResponseMessage response) Parameters Type Name Description MADE.Networking.Http.Responses.HttpResponseMessage response The to deserialize. Returns Type Description Task < HttpResponseMessage <T>> A HttpResponseMessage<T> with deserialized content. Type Parameters Name Description T The type of response expected. | Improve this Doc View Source DeserializeAsync<T>(Task<HttpResponseMessage>) Deserializes the content of the specified responseTask to a HttpResponseMessage<T> . Declaration public static async Task<HttpResponseMessage<T>> DeserializeAsync<T>(this Task<HttpResponseMessage> responseTask) Parameters Type Name Description Task < MADE.Networking.Http.Responses.HttpResponseMessage > responseTask The task associated with the . Returns Type Description Task < HttpResponseMessage <T>> A HttpResponseMessage<T> with deserialized content. Type Parameters Name Description T The type of response expected."
  },
  "api/MADE.Networking.Extensions.UriExtensions.html": {
    "href": "api/MADE.Networking.Extensions.UriExtensions.html",
    "title": "Class UriExtensions | MADE.NET",
    "keywords": "Class UriExtensions Defines a collection of extensions for objects. Inheritance System.Object UriExtensions Namespace : MADE.Networking.Extensions Assembly : MADE.Networking.dll Syntax public static class UriExtensions : object Methods | Improve this Doc View Source GetQueryValue(Uri, String) Gets a value from a query in the specified uri with the specified query parameter key. Declaration public static string GetQueryValue(this Uri uri, string queryParam) Parameters Type Name Description Uri uri The to extract a query value from. System.String queryParam The key of the parameter in the query to extract the value for. Returns Type Description System.String The value for the query parameter."
  },
  "api/MADE.Networking.Http.html": {
    "href": "api/MADE.Networking.Http.html",
    "title": "Namespace MADE.Networking.Http | MADE.NET",
    "keywords": "Namespace MADE.Networking.Http Classes NetworkRequestManager Defines a manager for executing queued network requests. Interfaces INetworkRequestManager Defines an interface for a network request manager."
  },
  "api/MADE.Networking.Http.INetworkRequestManager.html": {
    "href": "api/MADE.Networking.Http.INetworkRequestManager.html",
    "title": "Interface INetworkRequestManager | MADE.NET",
    "keywords": "Interface INetworkRequestManager Defines an interface for a network request manager. Namespace : MADE.Networking.Http Assembly : MADE.Networking.dll Syntax public interface INetworkRequestManager Properties | Improve this Doc View Source CurrentQueue Gets the current queue of network requests. Declaration ConcurrentDictionary<string, NetworkRequestCallback> CurrentQueue { get; } Property Value Type Description ConcurrentDictionary < System.String , NetworkRequestCallback > Methods | Improve this Doc View Source AddOrUpdate<TRequest, TResponse>(TRequest, Action<TResponse>) Adds or updates a network request in the queue. Declaration void AddOrUpdate<TRequest, TResponse>(TRequest request, Action<TResponse> successCallback) where TRequest : NetworkRequest Parameters Type Name Description TRequest request The network request to execute. Action <TResponse> successCallback The action to execute when receiving a successful response. Type Parameters Name Description TRequest The type of network request. TResponse The expected response type. | Improve this Doc View Source AddOrUpdate<TRequest, TResponse, TErrorResponse>(TRequest, Action<TResponse>, Action<TErrorResponse>) Adds or updates a network request in the queue. Declaration void AddOrUpdate<TRequest, TResponse, TErrorResponse>(TRequest request, Action<TResponse> successCallback, Action<TErrorResponse> errorCallback) where TRequest : NetworkRequest Parameters Type Name Description TRequest request The network request to execute. Action <TResponse> successCallback The action to execute when receiving a successful response. Action <TErrorResponse> errorCallback The action to execute when receiving an error response. Type Parameters Name Description TRequest The type of network request. TResponse The expected response type. TErrorResponse The expected error response type. | Improve this Doc View Source ProcessCurrentQueue() Processes the current queue of network requests. Declaration void ProcessCurrentQueue() | Improve this Doc View Source Remove(INetworkRequest) Removes a network request from the queue. If the request is no longer in the queue, this method does nothing. Declaration void Remove(INetworkRequest request) Parameters Type Name Description INetworkRequest request The request to remove from the queue. | Improve this Doc View Source RemoveByKey(String) Removes a network request from the queue by the registered key identifier. If the request is no longer in the queue, this method does nothing. Declaration void RemoveByKey(string key) Parameters Type Name Description System.String key The key corresponding to the network request to remove from the queue. | Improve this Doc View Source Start() Starts the manager processing the queue of network requests at a default time period of 1 minute. Declaration void Start() | Improve this Doc View Source Start(TimeSpan) Starts the manager processing the queue of network requests. Declaration void Start(TimeSpan processPeriod) Parameters Type Name Description TimeSpan processPeriod The time period between each process of the queue. | Improve this Doc View Source Stop() Stops the processing of the network manager queues. Declaration void Stop() Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Networking.Http.NetworkRequestManager.html": {
    "href": "api/MADE.Networking.Http.NetworkRequestManager.html",
    "title": "Class NetworkRequestManager | MADE.NET",
    "keywords": "Class NetworkRequestManager Defines a manager for executing queued network requests. Inheritance System.Object NetworkRequestManager Implements INetworkRequestManager Namespace : MADE.Networking.Http Assembly : MADE.Networking.dll Syntax public sealed class NetworkRequestManager : object, INetworkRequestManager Constructors | Improve this Doc View Source NetworkRequestManager() Initializes a new instance of the NetworkRequestManager class. Declaration public NetworkRequestManager() Properties | Improve this Doc View Source CurrentQueue Gets the current queue of network requests. Declaration public ConcurrentDictionary<string, NetworkRequestCallback> CurrentQueue { get; } Property Value Type Description ConcurrentDictionary < System.String , NetworkRequestCallback > Methods | Improve this Doc View Source AddOrUpdate<TRequest, TResponse>(TRequest, Action<TResponse>) Adds or updates a network request in the queue. Declaration public void AddOrUpdate<TRequest, TResponse>(TRequest request, Action<TResponse> successCallback) where TRequest : NetworkRequest Parameters Type Name Description TRequest request The network request to execute. Action <TResponse> successCallback The action to execute when receiving a successful response. Type Parameters Name Description TRequest The type of network request. TResponse The expected response type. Exceptions Type Condition System.Exception The successCallback throws an exception acquiring method info. System.OverflowException The CurrentQueue already contains the maximum number of elements ( System.Int32.MaxValue ). | Improve this Doc View Source AddOrUpdate<TRequest, TResponse, TErrorResponse>(TRequest, Action<TResponse>, Action<TErrorResponse>) Adds or updates a network request in the queue. Declaration public void AddOrUpdate<TRequest, TResponse, TErrorResponse>(TRequest request, Action<TResponse> successCallback, Action<TErrorResponse> errorCallback) where TRequest : NetworkRequest Parameters Type Name Description TRequest request The network request to execute. Action <TResponse> successCallback The action to execute when receiving a successful response. Action <TErrorResponse> errorCallback The action to execute when receiving an error response. Type Parameters Name Description TRequest The type of network request. TResponse The expected response type. TErrorResponse The expected error response type. Exceptions Type Condition System.Exception The successCallback or errorCallback throws an exception acquiring method info. System.OverflowException The CurrentQueue already contains the maximum number of elements ( System.Int32.MaxValue ). | Improve this Doc View Source ProcessCurrentQueue() Processes the current queue of network requests. Declaration public void ProcessCurrentQueue() | Improve this Doc View Source Remove(INetworkRequest) Removes a network request from the queue. If the request is no longer in the queue, this method does nothing. Declaration public void Remove(INetworkRequest request) Parameters Type Name Description INetworkRequest request The request to remove from the queue. | Improve this Doc View Source RemoveByKey(String) Removes a network request from the queue by the registered key identifier. If the request is no longer in the queue, this method does nothing. Declaration public void RemoveByKey(string key) Parameters Type Name Description System.String key The key corresponding to the network request to remove from the queue. | Improve this Doc View Source Start() Starts the manager processing the queue of network requests at a default time period of 1 minute. Declaration public void Start() | Improve this Doc View Source Start(TimeSpan) Starts the manager processing the queue of network requests. Declaration public void Start(TimeSpan processPeriod) Parameters Type Name Description TimeSpan processPeriod The time period between each process of the queue. | Improve this Doc View Source Stop() Stops the processing of the network manager queues. Declaration public void Stop() Implements INetworkRequestManager Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Networking.Http.Requests.html": {
    "href": "api/MADE.Networking.Http.Requests.html",
    "title": "Namespace MADE.Networking.Http.Requests | MADE.NET",
    "keywords": "Namespace MADE.Networking.Http.Requests Classes NetworkRequest Defines the model for a network request. NetworkRequestCallback Defines a model for a network request callback. Interfaces INetworkRequest Defines an interface for a basic network request."
  },
  "api/MADE.Networking.Http.Requests.INetworkRequest.html": {
    "href": "api/MADE.Networking.Http.Requests.INetworkRequest.html",
    "title": "Interface INetworkRequest | MADE.NET",
    "keywords": "Interface INetworkRequest Defines an interface for a basic network request. Namespace : MADE.Networking.Http.Requests Assembly : MADE.Networking.dll Syntax public interface INetworkRequest Properties | Improve this Doc View Source Headers Gets the headers for the request. Declaration Dictionary<string, string> Headers { get; } Property Value Type Description Dictionary < System.String , System.String > | Improve this Doc View Source Identifier Gets the identifier for the request. Declaration Guid Identifier { get; } Property Value Type Description Guid | Improve this Doc View Source Url Gets or sets the URL for the request. Declaration string Url { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source ExecuteAsync(Type, CancellationToken) Executes the network request. Declaration Task<object> ExecuteAsync(Type expectedResponse, CancellationToken cancellationToken = null) Parameters Type Name Description Type expectedResponse The type expected by the response of the request. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < System.Object > Returns the response of the request as an object. | Improve this Doc View Source ExecuteAsync<TResponse>(CancellationToken) Executes the network request. Declaration Task<TResponse> ExecuteAsync<TResponse>(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken The cancellation token. Returns Type Description Task <TResponse> Returns the response of the request as the specified type. Type Parameters Name Description TResponse The type of object returned from the request. Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Networking.Http.Requests.Json.html": {
    "href": "api/MADE.Networking.Http.Requests.Json.html",
    "title": "Namespace MADE.Networking.Http.Requests.Json | MADE.NET",
    "keywords": "Namespace MADE.Networking.Http.Requests.Json Classes JsonDeleteNetworkRequest Defines a network request for a DELETE call with a JSON response. JsonGetNetworkRequest Defines a network request for a GET call with a JSON response. JsonPatchNetworkRequest Defines a network request for a PATCH call with a JSON response. JsonPostNetworkRequest Defines a network request for a POST call with a JSON response. JsonPutNetworkRequest Defines a network request for a PUT call with a JSON response."
  },
  "api/MADE.Networking.Http.Requests.Json.JsonDeleteNetworkRequest.html": {
    "href": "api/MADE.Networking.Http.Requests.Json.JsonDeleteNetworkRequest.html",
    "title": "Class JsonDeleteNetworkRequest | MADE.NET",
    "keywords": "Class JsonDeleteNetworkRequest Defines a network request for a DELETE call with a JSON response. Inheritance System.Object NetworkRequest JsonDeleteNetworkRequest Implements INetworkRequest Inherited Members NetworkRequest.Identifier NetworkRequest.Url NetworkRequest.Headers Namespace : MADE.Networking.Http.Requests.Json Assembly : MADE.Networking.dll Syntax public sealed class JsonDeleteNetworkRequest : NetworkRequest, INetworkRequest Constructors | Improve this Doc View Source JsonDeleteNetworkRequest(HttpClient, String) Initializes a new instance of the JsonDeleteNetworkRequest class. Declaration public JsonDeleteNetworkRequest(HttpClient client, string url) Parameters Type Name Description HttpClient client The for executing the request. System.String url The URL for the request. | Improve this Doc View Source JsonDeleteNetworkRequest(HttpClient, String, Dictionary<String, String>) Initializes a new instance of the JsonDeleteNetworkRequest class. Declaration public JsonDeleteNetworkRequest(HttpClient client, string url, Dictionary<string, string> headers) Parameters Type Name Description HttpClient client The for executing the request. System.String url The URL for the request. Dictionary < System.String , System.String > headers The additional headers. Methods | Improve this Doc View Source ExecuteAsync(Type, CancellationToken) Executes the network request. Declaration public override async Task<object> ExecuteAsync(Type expectedResponse, CancellationToken cancellationToken = null) Parameters Type Name Description Type expectedResponse The type expected by the response of the request. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < System.Object > Returns the response of the request as an object. Overrides NetworkRequest.ExecuteAsync(Type, CancellationToken) | Improve this Doc View Source ExecuteAsync<TResponse>(CancellationToken) Executes the network request. Declaration public override async Task<TResponse> ExecuteAsync<TResponse>(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken The cancellation token. Returns Type Description Task <TResponse> Returns the response of the request as the specified type. Type Parameters Name Description TResponse The type of object returned from the request. Overrides NetworkRequest.ExecuteAsync<TResponse>(CancellationToken) Implements INetworkRequest Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Networking.Http.Requests.Json.JsonGetNetworkRequest.html": {
    "href": "api/MADE.Networking.Http.Requests.Json.JsonGetNetworkRequest.html",
    "title": "Class JsonGetNetworkRequest | MADE.NET",
    "keywords": "Class JsonGetNetworkRequest Defines a network request for a GET call with a JSON response. Inheritance System.Object NetworkRequest JsonGetNetworkRequest Implements INetworkRequest Inherited Members NetworkRequest.Identifier NetworkRequest.Url NetworkRequest.Headers Namespace : MADE.Networking.Http.Requests.Json Assembly : MADE.Networking.dll Syntax public sealed class JsonGetNetworkRequest : NetworkRequest, INetworkRequest Constructors | Improve this Doc View Source JsonGetNetworkRequest(HttpClient, String) Initializes a new instance of the JsonGetNetworkRequest class. Declaration public JsonGetNetworkRequest(HttpClient client, string url) Parameters Type Name Description HttpClient client The for executing the request. System.String url The URL for the request. | Improve this Doc View Source JsonGetNetworkRequest(HttpClient, String, Dictionary<String, String>) Initializes a new instance of the JsonGetNetworkRequest class. Declaration public JsonGetNetworkRequest(HttpClient client, string url, Dictionary<string, string> headers) Parameters Type Name Description HttpClient client The for executing the request. System.String url The URL for the request. Dictionary < System.String , System.String > headers The additional headers. Methods | Improve this Doc View Source ExecuteAsync(Type, CancellationToken) Executes the network request. Declaration public override async Task<object> ExecuteAsync(Type expectedResponse, CancellationToken cancellationToken = null) Parameters Type Name Description Type expectedResponse The type expected by the response of the request. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < System.Object > Returns the response of the request as an object. Overrides NetworkRequest.ExecuteAsync(Type, CancellationToken) | Improve this Doc View Source ExecuteAsync<TResponse>(CancellationToken) Executes the network request. Declaration public override async Task<TResponse> ExecuteAsync<TResponse>(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken The cancellation token. Returns Type Description Task <TResponse> Returns the response of the request as the specified type. Type Parameters Name Description TResponse The type of object returned from the request. Overrides NetworkRequest.ExecuteAsync<TResponse>(CancellationToken) Implements INetworkRequest Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Networking.Http.Requests.Json.JsonPatchNetworkRequest.html": {
    "href": "api/MADE.Networking.Http.Requests.Json.JsonPatchNetworkRequest.html",
    "title": "Class JsonPatchNetworkRequest | MADE.NET",
    "keywords": "Class JsonPatchNetworkRequest Defines a network request for a PATCH call with a JSON response. Inheritance System.Object NetworkRequest JsonPatchNetworkRequest Implements INetworkRequest Inherited Members NetworkRequest.Identifier NetworkRequest.Url NetworkRequest.Headers Namespace : MADE.Networking.Http.Requests.Json Assembly : MADE.Networking.dll Syntax public sealed class JsonPatchNetworkRequest : NetworkRequest, INetworkRequest Constructors | Improve this Doc View Source JsonPatchNetworkRequest(HttpClient, String) Initializes a new instance of the JsonPatchNetworkRequest class. Declaration public JsonPatchNetworkRequest(HttpClient client, string url) Parameters Type Name Description HttpClient client The for executing the request. System.String url The URL for the request. | Improve this Doc View Source JsonPatchNetworkRequest(HttpClient, String, String) Initializes a new instance of the JsonPatchNetworkRequest class. Declaration public JsonPatchNetworkRequest(HttpClient client, string url, string jsonData) Parameters Type Name Description HttpClient client The for executing the request. System.String url The URL for the request. System.String jsonData The JSON data to post. | Improve this Doc View Source JsonPatchNetworkRequest(HttpClient, String, String, Dictionary<String, String>) Initializes a new instance of the JsonPatchNetworkRequest class. Declaration public JsonPatchNetworkRequest(HttpClient client, string url, string jsonData, Dictionary<string, string> headers) Parameters Type Name Description HttpClient client The for executing the request. System.String url The URL for the request. System.String jsonData The JSON data to post. Dictionary < System.String , System.String > headers The additional headers. Properties | Improve this Doc View Source Data Gets or sets the data. Declaration public string Data { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source ExecuteAsync(Type, CancellationToken) Executes the network request. Declaration public override async Task<object> ExecuteAsync(Type expectedResponse, CancellationToken cancellationToken = null) Parameters Type Name Description Type expectedResponse The type expected by the response of the request. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < System.Object > Returns the response of the request as an object. Overrides NetworkRequest.ExecuteAsync(Type, CancellationToken) | Improve this Doc View Source ExecuteAsync<TResponse>(CancellationToken) Executes the network request. Declaration public override async Task<TResponse> ExecuteAsync<TResponse>(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken The cancellation token. Returns Type Description Task <TResponse> Returns the response of the request as the specified type. Type Parameters Name Description TResponse The type of object returned from the request. Overrides NetworkRequest.ExecuteAsync<TResponse>(CancellationToken) Implements INetworkRequest Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Networking.Http.Requests.Json.JsonPostNetworkRequest.html": {
    "href": "api/MADE.Networking.Http.Requests.Json.JsonPostNetworkRequest.html",
    "title": "Class JsonPostNetworkRequest | MADE.NET",
    "keywords": "Class JsonPostNetworkRequest Defines a network request for a POST call with a JSON response. Inheritance System.Object NetworkRequest JsonPostNetworkRequest Implements INetworkRequest Inherited Members NetworkRequest.Identifier NetworkRequest.Url NetworkRequest.Headers Namespace : MADE.Networking.Http.Requests.Json Assembly : MADE.Networking.dll Syntax public sealed class JsonPostNetworkRequest : NetworkRequest, INetworkRequest Constructors | Improve this Doc View Source JsonPostNetworkRequest(HttpClient, String) Initializes a new instance of the JsonPostNetworkRequest class. Declaration public JsonPostNetworkRequest(HttpClient client, string url) Parameters Type Name Description HttpClient client The for executing the request. System.String url The URL for the request. | Improve this Doc View Source JsonPostNetworkRequest(HttpClient, String, String) Initializes a new instance of the JsonPostNetworkRequest class. Declaration public JsonPostNetworkRequest(HttpClient client, string url, string jsonData) Parameters Type Name Description HttpClient client The for executing the request. System.String url The URL for the request. System.String jsonData The JSON data to post. | Improve this Doc View Source JsonPostNetworkRequest(HttpClient, String, String, Dictionary<String, String>) Initializes a new instance of the JsonPostNetworkRequest class. Declaration public JsonPostNetworkRequest(HttpClient client, string url, string jsonData, Dictionary<string, string> headers) Parameters Type Name Description HttpClient client The for executing the request. System.String url The URL for the request. System.String jsonData The JSON data to post. Dictionary < System.String , System.String > headers The additional headers. Properties | Improve this Doc View Source Data Gets or sets the data. Declaration public string Data { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source ExecuteAsync(Type, CancellationToken) Executes the network request. Declaration public override async Task<object> ExecuteAsync(Type expectedResponse, CancellationToken cancellationToken = null) Parameters Type Name Description Type expectedResponse The type expected by the response of the request. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < System.Object > Returns the response of the request as an object. Overrides NetworkRequest.ExecuteAsync(Type, CancellationToken) | Improve this Doc View Source ExecuteAsync<TResponse>(CancellationToken) Executes the network request. Declaration public override async Task<TResponse> ExecuteAsync<TResponse>(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken The cancellation token. Returns Type Description Task <TResponse> Returns the response of the request as the specified type. Type Parameters Name Description TResponse The type of object returned from the request. Overrides NetworkRequest.ExecuteAsync<TResponse>(CancellationToken) Implements INetworkRequest Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Networking.Http.Requests.Json.JsonPutNetworkRequest.html": {
    "href": "api/MADE.Networking.Http.Requests.Json.JsonPutNetworkRequest.html",
    "title": "Class JsonPutNetworkRequest | MADE.NET",
    "keywords": "Class JsonPutNetworkRequest Defines a network request for a PUT call with a JSON response. Inheritance System.Object NetworkRequest JsonPutNetworkRequest Implements INetworkRequest Inherited Members NetworkRequest.Identifier NetworkRequest.Url NetworkRequest.Headers Namespace : MADE.Networking.Http.Requests.Json Assembly : MADE.Networking.dll Syntax public sealed class JsonPutNetworkRequest : NetworkRequest, INetworkRequest Constructors | Improve this Doc View Source JsonPutNetworkRequest(HttpClient, String) Initializes a new instance of the JsonPutNetworkRequest class. Declaration public JsonPutNetworkRequest(HttpClient client, string url) Parameters Type Name Description HttpClient client The for executing the request. System.String url The URL for the request. | Improve this Doc View Source JsonPutNetworkRequest(HttpClient, String, String) Initializes a new instance of the JsonPutNetworkRequest class. Declaration public JsonPutNetworkRequest(HttpClient client, string url, string jsonData) Parameters Type Name Description HttpClient client The for executing the request. System.String url The URL for the request. System.String jsonData The JSON data to put. | Improve this Doc View Source JsonPutNetworkRequest(HttpClient, String, String, Dictionary<String, String>) Initializes a new instance of the JsonPutNetworkRequest class. Declaration public JsonPutNetworkRequest(HttpClient client, string url, string jsonData, Dictionary<string, string> headers) Parameters Type Name Description HttpClient client The for executing the request. System.String url The URL for the request. System.String jsonData The JSON data to put. Dictionary < System.String , System.String > headers The additional headers. Properties | Improve this Doc View Source Data Gets or sets the data. Declaration public string Data { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source ExecuteAsync(Type, CancellationToken) Executes the network request. Declaration public override async Task<object> ExecuteAsync(Type expectedResponse, CancellationToken cancellationToken = null) Parameters Type Name Description Type expectedResponse The type expected by the response of the request. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < System.Object > Returns the response of the request as an object. Overrides NetworkRequest.ExecuteAsync(Type, CancellationToken) | Improve this Doc View Source ExecuteAsync<TResponse>(CancellationToken) Executes the network request. Declaration public override async Task<TResponse> ExecuteAsync<TResponse>(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken The cancellation token. Returns Type Description Task <TResponse> Returns the response of the request as the specified type. Type Parameters Name Description TResponse The type of object returned from the request. Overrides NetworkRequest.ExecuteAsync<TResponse>(CancellationToken) Implements INetworkRequest Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Networking.Http.Requests.NetworkRequest.html": {
    "href": "api/MADE.Networking.Http.Requests.NetworkRequest.html",
    "title": "Class NetworkRequest | MADE.NET",
    "keywords": "Class NetworkRequest Defines the model for a network request. Inheritance System.Object NetworkRequest JsonDeleteNetworkRequest JsonGetNetworkRequest JsonPatchNetworkRequest JsonPostNetworkRequest JsonPutNetworkRequest StreamGetNetworkRequest Implements INetworkRequest Namespace : MADE.Networking.Http.Requests Assembly : MADE.Networking.dll Syntax public abstract class NetworkRequest : object, INetworkRequest Constructors | Improve this Doc View Source NetworkRequest(String) Initializes a new instance of the NetworkRequest class. Declaration protected NetworkRequest(string url) Parameters Type Name Description System.String url The URL for the request. | Improve this Doc View Source NetworkRequest(String, Dictionary<String, String>) Initializes a new instance of the NetworkRequest class. Declaration protected NetworkRequest(string url, Dictionary<string, string> headers) Parameters Type Name Description System.String url The URL for the request. Dictionary < System.String , System.String > headers Additional headers for the request. Properties | Improve this Doc View Source Headers Gets the headers for the request. Declaration public Dictionary<string, string> Headers { get; } Property Value Type Description Dictionary < System.String , System.String > | Improve this Doc View Source Identifier Gets the identifier for the request. Declaration public Guid Identifier { get; } Property Value Type Description Guid | Improve this Doc View Source Url Gets or sets the URL for the request. Declaration public string Url { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source ExecuteAsync(Type, CancellationToken) Executes the network request. Declaration public abstract Task<object> ExecuteAsync(Type expectedResponse, CancellationToken cancellationToken = null) Parameters Type Name Description Type expectedResponse The type expected by the response of the request. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < System.Object > Returns the response of the request as an object. | Improve this Doc View Source ExecuteAsync<TResponse>(CancellationToken) Executes the network request. Declaration public abstract Task<TResponse> ExecuteAsync<TResponse>(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken The cancellation token. Returns Type Description Task <TResponse> Returns the response of the request as the specified type. Type Parameters Name Description TResponse The type of object returned from the request. Implements INetworkRequest Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Networking.Http.Requests.NetworkRequestCallback.html": {
    "href": "api/MADE.Networking.Http.Requests.NetworkRequestCallback.html",
    "title": "Class NetworkRequestCallback | MADE.NET",
    "keywords": "Class NetworkRequestCallback Defines a model for a network request callback. Inheritance System.Object NetworkRequestCallback Namespace : MADE.Networking.Http.Requests Assembly : MADE.Networking.dll Syntax public sealed class NetworkRequestCallback : object Constructors | Improve this Doc View Source NetworkRequestCallback(NetworkRequest) Initializes a new instance of the NetworkRequestCallback class. Declaration public NetworkRequestCallback(NetworkRequest request) Parameters Type Name Description NetworkRequest request The network request. | Improve this Doc View Source NetworkRequestCallback(NetworkRequest, WeakReferenceCallback) Initializes a new instance of the NetworkRequestCallback class. Declaration public NetworkRequestCallback(NetworkRequest request, WeakReferenceCallback successCallback) Parameters Type Name Description NetworkRequest request The network request. WeakReferenceCallback successCallback The success callback. | Improve this Doc View Source NetworkRequestCallback(NetworkRequest, WeakReferenceCallback, WeakReferenceCallback) Initializes a new instance of the NetworkRequestCallback class. Declaration public NetworkRequestCallback(NetworkRequest request, WeakReferenceCallback successCallback, WeakReferenceCallback errorCallback) Parameters Type Name Description NetworkRequest request The network request. WeakReferenceCallback successCallback The success callback. WeakReferenceCallback errorCallback The error callback. Properties | Improve this Doc View Source ErrorCallback Gets the error callback. Declaration public WeakReferenceCallback ErrorCallback { get; } Property Value Type Description WeakReferenceCallback | Improve this Doc View Source Request Gets the network process. Declaration public NetworkRequest Request { get; } Property Value Type Description NetworkRequest | Improve this Doc View Source SuccessCallback Gets the success callback. Declaration public WeakReferenceCallback SuccessCallback { get; } Property Value Type Description WeakReferenceCallback Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Networking.Http.Requests.Streams.html": {
    "href": "api/MADE.Networking.Http.Requests.Streams.html",
    "title": "Namespace MADE.Networking.Http.Requests.Streams | MADE.NET",
    "keywords": "Namespace MADE.Networking.Http.Requests.Streams Classes StreamGetNetworkRequest Defines a network request for a GET call with a data stream response."
  },
  "api/MADE.Networking.Http.Requests.Streams.StreamGetNetworkRequest.html": {
    "href": "api/MADE.Networking.Http.Requests.Streams.StreamGetNetworkRequest.html",
    "title": "Class StreamGetNetworkRequest | MADE.NET",
    "keywords": "Class StreamGetNetworkRequest Defines a network request for a GET call with a data stream response. Inheritance System.Object NetworkRequest StreamGetNetworkRequest Implements INetworkRequest Inherited Members NetworkRequest.Identifier NetworkRequest.Url NetworkRequest.Headers Namespace : MADE.Networking.Http.Requests.Streams Assembly : MADE.Networking.dll Syntax public sealed class StreamGetNetworkRequest : NetworkRequest, INetworkRequest Constructors | Improve this Doc View Source StreamGetNetworkRequest(HttpClient, String) Initializes a new instance of the StreamGetNetworkRequest class. Declaration public StreamGetNetworkRequest(HttpClient client, string url) Parameters Type Name Description HttpClient client The for executing the request. System.String url The URL for the request. | Improve this Doc View Source StreamGetNetworkRequest(HttpClient, String, Dictionary<String, String>) Initializes a new instance of the StreamGetNetworkRequest class. Declaration public StreamGetNetworkRequest(HttpClient client, string url, Dictionary<string, string> headers) Parameters Type Name Description HttpClient client The for executing the request. System.String url The URL for the request. Dictionary < System.String , System.String > headers The additional headers. Methods | Improve this Doc View Source ExecuteAsync(Type, CancellationToken) Executes the network request. Declaration public override async Task<object> ExecuteAsync(Type expectedResponse, CancellationToken cancellationToken = null) Parameters Type Name Description Type expectedResponse The type expected by the response of the request. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < System.Object > Returns the response of the request as an object. Overrides NetworkRequest.ExecuteAsync(Type, CancellationToken) | Improve this Doc View Source ExecuteAsync<TResponse>(CancellationToken) Executes the network request. Declaration public override async Task<TResponse> ExecuteAsync<TResponse>(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken The cancellation token. Returns Type Description Task <TResponse> Returns the response of the request as the specified type. Type Parameters Name Description TResponse The type of object returned from the request. Overrides NetworkRequest.ExecuteAsync<TResponse>(CancellationToken) Implements INetworkRequest Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Networking.Http.Responses.html": {
    "href": "api/MADE.Networking.Http.Responses.html",
    "title": "Namespace MADE.Networking.Http.Responses | MADE.NET",
    "keywords": "Namespace MADE.Networking.Http.Responses Classes HttpResponseMessage<T> Defines a HTTP response message that includes a deserializing option for the response data."
  },
  "api/MADE.Networking.Http.Responses.HttpResponseMessage-1.html": {
    "href": "api/MADE.Networking.Http.Responses.HttpResponseMessage-1.html",
    "title": "Class HttpResponseMessage<T> | MADE.NET",
    "keywords": "Class HttpResponseMessage<T> Defines a HTTP response message that includes a deserializing option for the response data. Inheritance System.Object HttpResponseMessage<T> Namespace : MADE.Networking.Http.Responses Assembly : MADE.Networking.dll Syntax public class HttpResponseMessage<T> : IDisposable Type Parameters Name Description T The type of response expected. Constructors | Improve this Doc View Source HttpResponseMessage(HttpResponseMessage) Initializes a new instance of the HttpResponseMessage<T> class with the original . Declaration public HttpResponseMessage(HttpResponseMessage response) Parameters Type Name Description MADE.Networking.Http.Responses.HttpResponseMessage response The original . Properties | Improve this Doc View Source Content Gets the content of the HTTP response message. Declaration public HttpContent Content { get; } Property Value Type Description HttpContent | Improve this Doc View Source DeserializedContent Gets the deserialized content of the original as the specified T type. Note, ensure that DeserializeAsync() has been called first, otherwise this value will be default. Declaration public T DeserializedContent { get; } Property Value Type Description T | Improve this Doc View Source Headers Gets the collection of HTTP response headers. Declaration public HttpResponseHeaders Headers { get; } Property Value Type Description HttpResponseHeaders | Improve this Doc View Source IsSuccessStatusCode Gets a value indicating whether the HTTP response was successful. Declaration public bool IsSuccessStatusCode { get; } Property Value Type Description System.Boolean | Improve this Doc View Source ReasonPhrase Gets the reason phrase that typically is sent by servers together with the status code. Declaration public string ReasonPhrase { get; } Property Value Type Description System.String | Improve this Doc View Source RequestMessage Gets the request message which led to this response message. Declaration public HttpRequestMessage RequestMessage { get; } Property Value Type Description HttpRequestMessage | Improve this Doc View Source StatusCode Gets the status code of the HTTP response. Declaration public HttpStatusCode StatusCode { get; } Property Value Type Description HttpStatusCode | Improve this Doc View Source Version Gets the HTTP message version. Declaration public Version Version { get; } Property Value Type Description Version Methods | Improve this Doc View Source DeserializeAsync() Deserializes the content of the into the DeserializedContent value. Declaration public async Task<T> DeserializeAsync() Returns Type Description Task <T> A representing the result of the asynchronous operation. | Improve this Doc View Source Dispose() Releases the unmanaged resources and disposes of unmanaged resources used by the HttpResponseMessage<T> . Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Releases the unmanaged resources used by the HttpResponseMessage<T> and optionally disposes of the managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing A value indicating whether to release both managed and unmanaged resources. | Improve this Doc View Source EnsureSuccessStatusCode() Throws an exception if the IsSuccessStatusCode property for the HTTP response is false. Declaration public HttpResponseMessage<T> EnsureSuccessStatusCode() Returns Type Description HttpResponseMessage <T> The HTTP response message if the call is successful. Operators | Improve this Doc View Source Implicit(HttpResponseMessage to HttpResponseMessage<T>) Allows conversion of a to the HttpResponseMessage<T> without direct casting. Declaration public static implicit operator HttpResponseMessage<T>(HttpResponseMessage response) Parameters Type Name Description MADE.Networking.Http.Responses.HttpResponseMessage response The . Returns Type Description HttpResponseMessage <T> The HttpResponseMessage<T> . Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Runtime.Actions.Chain-1.html": {
    "href": "api/MADE.Runtime.Actions.Chain-1.html",
    "title": "Class Chain<T> | MADE.NET",
    "keywords": "Class Chain<T> Defines an implementation for a chain of objects. Inheritance System.Object Chain<T> Implements IChain <T> Namespace : MADE.Runtime.Actions Assembly : MADE.Runtime.dll Syntax public class Chain<T> : object, IChain<T> where T : class Type Parameters Name Description T The type of object being chained. Constructors | Improve this Doc View Source Chain(T) Initializes a new instance of the Chain<T> class with an instance. Declaration public Chain(T instance) Parameters Type Name Description T instance The instance to begin the chain. | Improve this Doc View Source Chain(IEnumerable<T>) Initializes a new instance of the Chain<T> class with a collection of instances. Declaration public Chain(IEnumerable<T> instances) Parameters Type Name Description IEnumerable <T> instances The instances to begin the chain. Methods | Improve this Doc View Source Invoke(Action<T>) Invokes an action with the chain. Declaration public void Invoke(Action<T> func) Parameters Type Name Description Action <T> func The action to invoke. | Improve this Doc View Source InvokeAsync(Func<T, Task>) Invokes an asynchronous action with the chain. Declaration public async Task InvokeAsync(Func<T, Task> func) Parameters Type Name Description Func <T, Task > func The asynchronous action to invoke. Returns Type Description Task An asynchronous operation. | Improve this Doc View Source With(T) Concatenates the current instances in the chain with the specified instance. Declaration public Chain<T> With(T instance) Parameters Type Name Description T instance The instance to chain. Returns Type Description Chain <T> The updated Chain<T> . | Improve this Doc View Source With(IEnumerable<T>) Concatenates the current instances in the chain with the specified instances. Declaration public Chain<T> With(IEnumerable<T> instances) Parameters Type Name Description IEnumerable <T> instances The instances to chain. Returns Type Description Chain <T> The updated Chain<T> . Implements IChain<T> Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Runtime.Actions.html": {
    "href": "api/MADE.Runtime.Actions.html",
    "title": "Namespace MADE.Runtime.Actions | MADE.NET",
    "keywords": "Namespace MADE.Runtime.Actions Classes Chain<T> Defines an implementation for a chain of objects. Interfaces IChain<T> Defines an interface for a chain of objects."
  },
  "api/MADE.Runtime.Actions.IChain-1.html": {
    "href": "api/MADE.Runtime.Actions.IChain-1.html",
    "title": "Interface IChain<T> | MADE.NET",
    "keywords": "Interface IChain<T> Defines an interface for a chain of objects. Namespace : MADE.Runtime.Actions Assembly : MADE.Runtime.dll Syntax public interface IChain<T> where T : class Type Parameters Name Description T The type of object being chained. Methods | Improve this Doc View Source Invoke(Action<T>) Invokes an action with the chain. Declaration void Invoke(Action<T> func) Parameters Type Name Description Action <T> func The action to invoke. | Improve this Doc View Source InvokeAsync(Func<T, Task>) Invokes an asynchronous action with the chain. Declaration Task InvokeAsync(Func<T, Task> func) Parameters Type Name Description Func <T, Task > func The asynchronous action to invoke. Returns Type Description Task An asynchronous operation. | Improve this Doc View Source With(T) Concatenates the current instances in the chain with the specified instance. Declaration Chain<T> With(T instance) Parameters Type Name Description T instance The instance to chain. Returns Type Description Chain <T> The updated Chain<T> . | Improve this Doc View Source With(IEnumerable<T>) Concatenates the current instances in the chain with the specified instances. Declaration Chain<T> With(IEnumerable<T> instances) Parameters Type Name Description IEnumerable <T> instances The instances to chain. Returns Type Description Chain <T> The updated Chain<T> . Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Runtime.Extensions.html": {
    "href": "api/MADE.Runtime.Extensions.html",
    "title": "Namespace MADE.Runtime.Extensions | MADE.NET",
    "keywords": "Namespace MADE.Runtime.Extensions Classes ReflectionExtensions Defines a collection of extensions for object reflection."
  },
  "api/MADE.Runtime.Extensions.ReflectionExtensions.html": {
    "href": "api/MADE.Runtime.Extensions.ReflectionExtensions.html",
    "title": "Class ReflectionExtensions | MADE.NET",
    "keywords": "Class ReflectionExtensions Defines a collection of extensions for object reflection. Inheritance System.Object ReflectionExtensions Namespace : MADE.Runtime.Extensions Assembly : MADE.Runtime.dll Syntax public static class ReflectionExtensions : object Methods | Improve this Doc View Source GetPropertyNames(Object) Gets all the property names declared for the specified object. Declaration public static IEnumerable<string> GetPropertyNames(this object obj) Parameters Type Name Description System.Object obj The object to retrieve property names from. Returns Type Description IEnumerable < System.String > A collection of object property names as a string. | Improve this Doc View Source GetPropertyValue<T>(Object, String) Gets a value for a property of the obj based on the property . Declaration public static T GetPropertyValue<T>(this object obj, string property) where T : class Parameters Type Name Description System.Object obj The object to retrieve the property value from. System.String property The name of the property to retrieve a value for. Returns Type Description T The value of the property. Type Parameters Name Description T The type of expected value."
  },
  "api/MADE.Runtime.html": {
    "href": "api/MADE.Runtime.html",
    "title": "Namespace MADE.Runtime | MADE.NET",
    "keywords": "Namespace MADE.Runtime Classes WeakReferenceCallback Defines a model for providing a weak referenced callback. WeakReferenceEventListener<TInstance, TSource> Defines a model for providing a weak referenced event listener. WeakReferenceEventListener<TInstance, TSource, TEventArgs> Defines a model for providing a weak referenced event listener."
  },
  "api/MADE.Runtime.WeakReferenceCallback.html": {
    "href": "api/MADE.Runtime.WeakReferenceCallback.html",
    "title": "Class WeakReferenceCallback | MADE.NET",
    "keywords": "Class WeakReferenceCallback Defines a model for providing a weak referenced callback. Inheritance System.Object WeakReferenceCallback Namespace : MADE.Runtime Assembly : MADE.Runtime.dll Syntax public sealed class WeakReferenceCallback : object Constructors | Improve this Doc View Source WeakReferenceCallback(Delegate, Type) Initializes a new instance of the WeakReferenceCallback class. Declaration public WeakReferenceCallback(Delegate action, Type callbackType) Parameters Type Name Description Delegate action The callback action. Type callbackType The expected type for the callback. Exceptions Type Condition System.Exception The action callback throws an exception acquiring method info. Properties | Improve this Doc View Source IsAlive Gets a value indicating whether the callback is alive. Declaration public bool IsAlive { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Type Gets the expected type for the callback. Declaration public Type Type { get; } Property Value Type Description Type Methods | Improve this Doc View Source Invoke(Object) Invokes the callback with the specified parameter. Declaration public void Invoke(object param) Parameters Type Name Description System.Object param The parameter to pass to the callback. Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Runtime.WeakReferenceEventListener-2.html": {
    "href": "api/MADE.Runtime.WeakReferenceEventListener-2.html",
    "title": "Class WeakReferenceEventListener<TInstance, TSource> | MADE.NET",
    "keywords": "Class WeakReferenceEventListener<TInstance, TSource> Defines a model for providing a weak referenced event listener. Inheritance System.Object WeakReferenceEventListener<TInstance, TSource> Namespace : MADE.Runtime Assembly : MADE.Runtime.dll Syntax public sealed class WeakReferenceEventListener<TInstance, TSource> : object where TInstance : class Type Parameters Name Description TInstance The instance type for the listener. TSource The source type. Constructors | Improve this Doc View Source WeakReferenceEventListener(TInstance) Initializes a new instance of the WeakReferenceEventListener<TInstance, TSource> class. Declaration public WeakReferenceEventListener(TInstance instance) Parameters Type Name Description TInstance instance The instance. Properties | Improve this Doc View Source OnDetachAction Gets or sets the action to be fired when the listener is detached. Declaration public Action<TInstance, WeakReferenceEventListener<TInstance, TSource>> OnDetachAction { get; set; } Property Value Type Description Action <TInstance, WeakReferenceEventListener <TInstance, TSource>> | Improve this Doc View Source OnEventAction Gets or sets the action to be fired when the event is triggered. Declaration public Action<TInstance, TSource> OnEventAction { get; set; } Property Value Type Description Action <TInstance, TSource> Methods | Improve this Doc View Source Detach() Called when detaching the event listener. Declaration public void Detach() | Improve this Doc View Source OnEvent(TSource) Called when the event is fired. Declaration public void OnEvent(TSource source) Parameters Type Name Description TSource source The source of the event. Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Runtime.WeakReferenceEventListener-3.html": {
    "href": "api/MADE.Runtime.WeakReferenceEventListener-3.html",
    "title": "Class WeakReferenceEventListener<TInstance, TSource, TEventArgs> | MADE.NET",
    "keywords": "Class WeakReferenceEventListener<TInstance, TSource, TEventArgs> Defines a model for providing a weak referenced event listener. Inheritance System.Object WeakReferenceEventListener<TInstance, TSource, TEventArgs> Namespace : MADE.Runtime Assembly : MADE.Runtime.dll Syntax public sealed class WeakReferenceEventListener<TInstance, TSource, TEventArgs> : object where TInstance : class Type Parameters Name Description TInstance The instance type for the listener. TSource The source type. TEventArgs The event argument type. Constructors | Improve this Doc View Source WeakReferenceEventListener(TInstance) Initializes a new instance of the WeakReferenceEventListener<TInstance, TSource, TEventArgs> class. Declaration public WeakReferenceEventListener(TInstance instance) Parameters Type Name Description TInstance instance The instance. Properties | Improve this Doc View Source OnDetachAction Gets or sets the action to be fired when the listener is detached. Declaration public Action<TInstance, WeakReferenceEventListener<TInstance, TSource, TEventArgs>> OnDetachAction { get; set; } Property Value Type Description Action <TInstance, WeakReferenceEventListener <TInstance, TSource, TEventArgs>> | Improve this Doc View Source OnEventAction Gets or sets the action to be fired when the event is triggered. Declaration public Action<TInstance, TSource, TEventArgs> OnEventAction { get; set; } Property Value Type Description Action <TInstance, TSource, TEventArgs> Methods | Improve this Doc View Source Detach() Called when detaching the event listener. Declaration public void Detach() | Improve this Doc View Source OnEvent(TSource, TEventArgs) Called when the event is fired. Declaration public void OnEvent(TSource source, TEventArgs eventArgs) Parameters Type Name Description TSource source The source of the event. TEventArgs eventArgs The event arguments. Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Testing.CollectionAssertExtensions.html": {
    "href": "api/MADE.Testing.CollectionAssertExtensions.html",
    "title": "Class CollectionAssertExtensions | MADE.NET",
    "keywords": "Class CollectionAssertExtensions Defines a code assertion helper for collection based scenarios. Inheritance System.Object CollectionAssertExtensions Namespace : MADE.Testing Assembly : MADE.Testing.dll Syntax public static class CollectionAssertExtensions : object Methods | Improve this Doc View Source ShouldBeEquivalentTo<TItem>(IEnumerable<TItem>, IEnumerable<TItem>) Tests whether two collections contain the same elements and throws an exception if either collection contains an element not in the other collection. Declaration public static void ShouldBeEquivalentTo<TItem>(this IEnumerable<TItem> expected, IEnumerable<TItem> actual) Parameters Type Name Description IEnumerable <TItem> expected The first collection to compare. This contains the elements the test expects. IEnumerable <TItem> actual The second collection to compare. This is the collection produced by the code under test. Type Parameters Name Description TItem The type of item in the collection. Exceptions Type Condition MADE.Testing.CollectionAssertExtensions.AssertFailedException Thrown if the condition of equivalency could not be met. | Improve this Doc View Source ShouldNotBeEquivalentTo<TItem>(IEnumerable<TItem>, IEnumerable<TItem>) Tests whether two collections do not contain the same elements. Declaration public static void ShouldNotBeEquivalentTo<TItem>(this IEnumerable<TItem> expected, IEnumerable<TItem> actual) Parameters Type Name Description IEnumerable <TItem> expected The first collection to compare. This contains the elements the test expects. IEnumerable <TItem> actual The second collection to compare. This is the collection produced by the code under test. Type Parameters Name Description TItem The type of item in the collection. Exceptions Type Condition MADE.Testing.CollectionAssertExtensions.AssertFailedException Thrown if the condition of equivalency could not be met."
  },
  "api/MADE.Testing.html": {
    "href": "api/MADE.Testing.html",
    "title": "Namespace MADE.Testing | MADE.NET",
    "keywords": "Namespace MADE.Testing Classes CollectionAssertExtensions Defines a code assertion helper for collection based scenarios."
  },
  "api/MADE.Threading.html": {
    "href": "api/MADE.Threading.html",
    "title": "Namespace MADE.Threading | MADE.NET",
    "keywords": "Namespace MADE.Threading Classes TaskExtensions Defines a collection of extensions for tasks. Timer Defines a timer to use for performing actions on a tick. Interfaces ITimer Defines an interface for a timer to use for performing actions on a tick."
  },
  "api/MADE.Threading.ITimer.html": {
    "href": "api/MADE.Threading.ITimer.html",
    "title": "Interface ITimer | MADE.NET",
    "keywords": "Interface ITimer Defines an interface for a timer to use for performing actions on a tick. Namespace : MADE.Threading Assembly : MADE.Threading.dll Syntax public interface ITimer Properties | Improve this Doc View Source DueTime Gets or sets the time before initiating the first Tick event. Declaration TimeSpan DueTime { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source Interval Gets or sets the interval between initiating the Tick event. Declaration TimeSpan Interval { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source IsRunning Gets a value indicating whether the timer is currently running. Declaration bool IsRunning { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Start() Starts the timer. Declaration void Start() | Improve this Doc View Source Start(Int32) Starts the timer after the given dueTime in milliseconds. Declaration void Start(int dueTime) Parameters Type Name Description System.Int32 dueTime The time before initiating the first Tick event in milliseconds. | Improve this Doc View Source Start(TimeSpan) Starts the timer after the given dueTime . Declaration void Start(TimeSpan dueTime) Parameters Type Name Description TimeSpan dueTime The time before initiating the first Tick event. | Improve this Doc View Source Stop() Stops the timer. Declaration void Stop() Events | Improve this Doc View Source Tick Occurs when the timer ticks over the specified Interval . Declaration event EventHandler<object> Tick Event Type Type Description EventHandler < System.Object > Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Threading.TaskExtensions.html": {
    "href": "api/MADE.Threading.TaskExtensions.html",
    "title": "Class TaskExtensions | MADE.NET",
    "keywords": "Class TaskExtensions Defines a collection of extensions for tasks. Inheritance System.Object TaskExtensions Namespace : MADE.Threading Assembly : MADE.Threading.dll Syntax public static class TaskExtensions : object Methods | Improve this Doc View Source AndObserveExceptions(Task, Action<Exception>) Observes the exceptions of faulted tasks. Declaration public static Task AndObserveExceptions(this Task task, Action<Exception> onException = null) Parameters Type Name Description Task task The task to observe for exceptions. Action < Exception > onException An action invoked when an exception is caught. Returns Type Description Task An asynchronous operation. | Improve this Doc View Source AndObserveExceptions<T>(Task<T>, Action<Exception>) Observes the exceptions of faulted tasks. Declaration public static Task<T> AndObserveExceptions<T>(this Task<T> task, Action<Exception> onException = null) Parameters Type Name Description Task <T> task The task to observe for exceptions. Action < Exception > onException An action invoked when an exception is caught. Returns Type Description Task <T> An asynchronous operation. Type Parameters Name Description T The instance type for the listener. | Improve this Doc View Source WhenAll(IEnumerable<Task>) Creates a task that will complete when all of the objects in the collection have completed. Declaration public static async Task WhenAll(this IEnumerable<Task> tasks) Parameters Type Name Description IEnumerable < Task > tasks The tasks to wait on for completion. Returns Type Description Task A task that represents the completion of all of the supplied tasks. | Improve this Doc View Source WhenAny(IEnumerable<Task>) Creates a task that will complete when any of the objects in the collection have completed. Declaration public static async Task WhenAny(this IEnumerable<Task> tasks) Parameters Type Name Description IEnumerable < Task > tasks The tasks to wait on for completion. Returns Type Description Task A task that represents the completion of one of the supplied tasks."
  },
  "api/MADE.Threading.Timer.html": {
    "href": "api/MADE.Threading.Timer.html",
    "title": "Class Timer | MADE.NET",
    "keywords": "Class Timer Defines a timer to use for performing actions on a tick. Inheritance System.Object Timer Implements ITimer IDisposable Namespace : MADE.Threading Assembly : MADE.Threading.dll Syntax public class Timer : object, ITimer Properties | Improve this Doc View Source DueTime Gets or sets the time before initiating the first Tick event. Declaration public TimeSpan DueTime { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source Interval Gets or sets the interval between initiating the Tick event. Declaration public TimeSpan Interval { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source IsRunning Gets a value indicating whether the timer is currently running. Declaration public bool IsRunning { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing A value indicating whether the object is being disposed by the method. | Improve this Doc View Source InvokeTick() Invokes the Tick event, if attached. Declaration protected virtual void InvokeTick() | Improve this Doc View Source Start() Starts the timer. Declaration public void Start() | Improve this Doc View Source Start(Int32) Starts the timer after the given dueTime in milliseconds. Declaration public void Start(int dueTime) Parameters Type Name Description System.Int32 dueTime The time before initiating the first Tick event in milliseconds. | Improve this Doc View Source Start(TimeSpan) Starts the timer after the given dueTime . Declaration public void Start(TimeSpan dueTime) Parameters Type Name Description TimeSpan dueTime The time before initiating the first Tick event. | Improve this Doc View Source Stop() Stops the timer. Declaration public void Stop() Events | Improve this Doc View Source Tick Occurs when the timer ticks over the specified Interval . Declaration public event EventHandler<object> Tick Event Type Type Description EventHandler < System.Object > Implements ITimer IDisposable Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Web.Exceptions.DefaultExceptionHandler.html": {
    "href": "api/MADE.Web.Exceptions.DefaultExceptionHandler.html",
    "title": "Class DefaultExceptionHandler | MADE.NET",
    "keywords": "Class DefaultExceptionHandler Defines a default exception handler for exceptions thrown which are not explicitly handled. Inheritance System.Object DefaultExceptionHandler Implements IHttpContextExceptionHandler < Exception > Namespace : MADE.Web.Exceptions Assembly : MADE.Web.dll Syntax public class DefaultExceptionHandler : object, IHttpContextExceptionHandler<Exception> Methods | Improve this Doc View Source HandleAsync(HttpContext, Exception) Handles the specified exception for the given context. Declaration public async Task HandleAsync(HttpContext context, Exception exception) Parameters Type Name Description HttpContext context The request context. Exception exception The exception thrown. Returns Type Description Task An asynchronous operation. Implements IHttpContextExceptionHandler<TException> Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Web.Exceptions.ExceptionResponse-1.html": {
    "href": "api/MADE.Web.Exceptions.ExceptionResponse-1.html",
    "title": "Class ExceptionResponse<TException> | MADE.NET",
    "keywords": "Class ExceptionResponse<TException> Defines a response to a an exception being thrown. Inheritance System.Object ExceptionResponse<TException> Namespace : MADE.Web.Exceptions Assembly : MADE.Web.dll Syntax public class ExceptionResponse<TException> : object where TException : Exception Type Parameters Name Description TException The type of exception thrown. Constructors | Improve this Doc View Source ExceptionResponse(String, String, TException) Initializes a new instance of the ExceptionResponse<TException> class with an error code and message. Declaration public ExceptionResponse(string errorCode, string errorMessage, TException exception) Parameters Type Name Description System.String errorCode The error code. System.String errorMessage The error message. TException exception The exception thrown. Properties | Improve this Doc View Source ErrorCode Gets the error code. Declaration public string ErrorCode { get; } Property Value Type Description System.String | Improve this Doc View Source ErrorMessage Gets the error message. Declaration public string ErrorMessage { get; } Property Value Type Description System.String | Improve this Doc View Source Exception Gets the exception thrown. Declaration public TException Exception { get; } Property Value Type Description TException Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Web.Exceptions.html": {
    "href": "api/MADE.Web.Exceptions.html",
    "title": "Namespace MADE.Web.Exceptions | MADE.NET",
    "keywords": "Namespace MADE.Web.Exceptions Classes DefaultExceptionHandler Defines a default exception handler for exceptions thrown which are not explicitly handled. ExceptionResponse<TException> Defines a response to a an exception being thrown. HttpContextExceptionsMiddleware Defines a middleware for handling JSON exceptions. Interfaces IHttpContextExceptionHandler<TException> Defines an interface for a exception handler."
  },
  "api/MADE.Web.Exceptions.HttpContextExceptionsMiddleware.html": {
    "href": "api/MADE.Web.Exceptions.HttpContextExceptionsMiddleware.html",
    "title": "Class HttpContextExceptionsMiddleware | MADE.NET",
    "keywords": "Class HttpContextExceptionsMiddleware Defines a middleware for handling JSON exceptions. Inheritance System.Object HttpContextExceptionsMiddleware Namespace : MADE.Web.Exceptions Assembly : MADE.Web.dll Syntax public class HttpContextExceptionsMiddleware : object Constructors | Improve this Doc View Source HttpContextExceptionsMiddleware(RequestDelegate, IHostEnvironment, IServiceProvider, IHttpContextExceptionHandler<Exception>) Initializes a new instance of the HttpContextExceptionsMiddleware class. Declaration public HttpContextExceptionsMiddleware(RequestDelegate httpRequestDelegate, IHostEnvironment hostEnvironment, IServiceProvider serviceProvider, IHttpContextExceptionHandler<Exception> defaultExceptionHandler) Parameters Type Name Description RequestDelegate httpRequestDelegate The request delegate for processing a HTTP request. IHostEnvironment hostEnvironment The host environment. IServiceProvider serviceProvider The service provider. IHttpContextExceptionHandler < Exception > defaultExceptionHandler The default exception handler. Methods | Improve this Doc View Source Invoke(HttpContext) Invokes the middleware to perform the request and handle any exceptions thrown. Declaration public async Task Invoke(HttpContext context) Parameters Type Name Description HttpContext context The to make a request with. Returns Type Description Task An asynchronous operation. Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Web.Exceptions.IHttpContextExceptionHandler-1.html": {
    "href": "api/MADE.Web.Exceptions.IHttpContextExceptionHandler-1.html",
    "title": "Interface IHttpContextExceptionHandler<TException> | MADE.NET",
    "keywords": "Interface IHttpContextExceptionHandler<TException> Defines an interface for a exception handler. Namespace : MADE.Web.Exceptions Assembly : MADE.Web.dll Syntax public interface IHttpContextExceptionHandler<in TException> where TException : Exception Type Parameters Name Description TException The type of exception thrown. Methods | Improve this Doc View Source HandleAsync(HttpContext, TException) Handles the specified exception for the given context . Declaration Task HandleAsync(HttpContext context, TException exception) Parameters Type Name Description HttpContext context The request context. TException exception The exception that was thrown. Returns Type Description Task An asynchronous operation. Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Web.Extensions.ApiVersioningExtensions.html": {
    "href": "api/MADE.Web.Extensions.ApiVersioningExtensions.html",
    "title": "Class ApiVersioningExtensions | MADE.NET",
    "keywords": "Class ApiVersioningExtensions Defines a collection of extensions for API versioning. Inheritance System.Object ApiVersioningExtensions Namespace : MADE.Web.Extensions Assembly : MADE.Web.dll Syntax public static class ApiVersioningExtensions : object Methods | Improve this Doc View Source AddApiVersionHeaderSupport(IServiceCollection, String, Int32, Int32) Adds request header API versioning for controllers and APIs to the specified services collection. Declaration public static IServiceCollection AddApiVersionHeaderSupport(this IServiceCollection services, string apiHeaderName = \"x-api-version\", int defaultMajor = 1, int defaultMinor = 0) Parameters Type Name Description IServiceCollection services The services available in the application. System.String apiHeaderName The name of the header that is required when making requests to API endpoints. Default, x-api-version. System.Int32 defaultMajor The default major version of the API. Default, 1. System.Int32 defaultMinor The default minor version of the API. Default, 0. Returns Type Description IServiceCollection The configured services object. | Improve this Doc View Source AddApiVersionSupport(IServiceCollection, Int32, Int32) Adds request API versioning for controllers and APIs to the specified services collection. Declaration public static IServiceCollection AddApiVersionSupport(this IServiceCollection services, int defaultMajor = 1, int defaultMinor = 0) Parameters Type Name Description IServiceCollection services The services available in the application. System.Int32 defaultMajor The default major version of the API. Default, 1. System.Int32 defaultMinor The default minor version of the API. Default, 0. Returns Type Description IServiceCollection The configured services object."
  },
  "api/MADE.Web.Extensions.html": {
    "href": "api/MADE.Web.Extensions.html",
    "title": "Namespace MADE.Web.Extensions | MADE.NET",
    "keywords": "Namespace MADE.Web.Extensions Classes ApiVersioningExtensions Defines a collection of extensions for API versioning. HttpContextExceptionHandlerExtensions Defines a collection of extensions for IHttpContextExceptionHandler<TException> objects. HttpContextExtensions Defines a collection of extensions for a object. HttpResponseExtensions Defines a collection of extensions for a object. IntExtensions Defines a collection of extensions for integer values. QueryCollectionExtensions Defines a collection of extensions for objects."
  },
  "api/MADE.Web.Extensions.HttpContextExceptionHandlerExtensions.html": {
    "href": "api/MADE.Web.Extensions.HttpContextExceptionHandlerExtensions.html",
    "title": "Class HttpContextExceptionHandlerExtensions | MADE.NET",
    "keywords": "Class HttpContextExceptionHandlerExtensions Defines a collection of extensions for IHttpContextExceptionHandler<TException> objects. Inheritance System.Object HttpContextExceptionHandlerExtensions Namespace : MADE.Web.Extensions Assembly : MADE.Web.dll Syntax public static class HttpContextExceptionHandlerExtensions : object Methods | Improve this Doc View Source AddDefaultHttpContextExceptionHandler(IServiceCollection) Adds the default handlers to the service collection. Declaration public static IServiceCollection AddDefaultHttpContextExceptionHandler(this IServiceCollection serviceCollection) Parameters Type Name Description IServiceCollection serviceCollection The service collection. Returns Type Description IServiceCollection The configured service collection. | Improve this Doc View Source AddHttpContextExceptionHandler<TException, THandler>(IServiceCollection) Adds a exception handler to the service collection. Declaration public static IServiceCollection AddHttpContextExceptionHandler<TException, THandler>(this IServiceCollection serviceCollection) where TException : Exception where THandler : class, IHttpContextExceptionHandler<TException> Parameters Type Name Description IServiceCollection serviceCollection The service collection. Returns Type Description IServiceCollection The configured service collection. Type Parameters Name Description TException The type of exception handled. THandler The type of exception handler. | Improve this Doc View Source UseHttpContextExceptionHandling(IApplicationBuilder) Adds the IHttpContextExceptionHandler<TException> middleware to the application builder. Declaration public static IApplicationBuilder UseHttpContextExceptionHandling(this IApplicationBuilder builder) Parameters Type Name Description IApplicationBuilder builder The application builder. Returns Type Description IApplicationBuilder The configured application builder."
  },
  "api/MADE.Web.Extensions.HttpContextExtensions.html": {
    "href": "api/MADE.Web.Extensions.HttpContextExtensions.html",
    "title": "Class HttpContextExtensions | MADE.NET",
    "keywords": "Class HttpContextExtensions Defines a collection of extensions for a object. Inheritance System.Object HttpContextExtensions Namespace : MADE.Web.Extensions Assembly : MADE.Web.dll Syntax public static class HttpContextExtensions : object Methods | Improve this Doc View Source GetDomain(HttpContext) Gets the domain name of the requesting context. Declaration public static string GetDomain(this HttpContext context) Parameters Type Name Description HttpContext context The requesting . Returns Type Description System.String The domain part of the request's host."
  },
  "api/MADE.Web.Extensions.HttpResponseExtensions.html": {
    "href": "api/MADE.Web.Extensions.HttpResponseExtensions.html",
    "title": "Class HttpResponseExtensions | MADE.NET",
    "keywords": "Class HttpResponseExtensions Defines a collection of extensions for a object. Inheritance System.Object HttpResponseExtensions Namespace : MADE.Web.Extensions Assembly : MADE.Web.dll Syntax public static class HttpResponseExtensions : object Methods | Improve this Doc View Source WriteJsonAsync(HttpResponse, HttpStatusCode, Object) Writes an object value as JSON to the specified response . Declaration public static async Task WriteJsonAsync(this HttpResponse response, HttpStatusCode statusCode, object value) Parameters Type Name Description HttpResponse response The HTTP response to write to. HttpStatusCode statusCode The status code of the response. System.Object value The object to serialize as JSON. Returns Type Description Task An asynchronous operation. | Improve this Doc View Source WriteJsonAsync(HttpResponse, HttpStatusCode, Object, JsonSerializerSettings) Writes an object value as JSON to the specified response . Declaration public static async Task WriteJsonAsync(this HttpResponse response, HttpStatusCode statusCode, object value, JsonSerializerSettings serializerSettings) Parameters Type Name Description HttpResponse response The HTTP response to write to. HttpStatusCode statusCode The status code of the response. System.Object value The object to serialize as JSON. JsonSerializerSettings serializerSettings The JSON serializer settings. Returns Type Description Task An asynchronous operation. | Improve this Doc View Source WriteJsonAsync(HttpResponse, Int32, Object) Writes an object value as JSON to the specified response . Declaration public static async Task WriteJsonAsync(this HttpResponse response, int statusCode, object value) Parameters Type Name Description HttpResponse response The HTTP response to write to. System.Int32 statusCode The status code of the response. System.Object value The object to serialize as JSON. Returns Type Description Task An asynchronous operation. | Improve this Doc View Source WriteJsonAsync(HttpResponse, Int32, Object, JsonSerializerSettings) Writes an object value as JSON to the specified response . Declaration public static async Task WriteJsonAsync(this HttpResponse response, int statusCode, object value, JsonSerializerSettings serializerSettings) Parameters Type Name Description HttpResponse response The HTTP response to write to. System.Int32 statusCode The status code of the response. System.Object value The object to serialize as JSON. JsonSerializerSettings serializerSettings The JSON serializer settings. Returns Type Description Task An asynchronous operation."
  },
  "api/MADE.Web.Extensions.IntExtensions.html": {
    "href": "api/MADE.Web.Extensions.IntExtensions.html",
    "title": "Class IntExtensions | MADE.NET",
    "keywords": "Class IntExtensions Defines a collection of extensions for integer values. Inheritance System.Object IntExtensions Namespace : MADE.Web.Extensions Assembly : MADE.Web.dll Syntax public static class IntExtensions : object"
  },
  "api/MADE.Web.Extensions.QueryCollectionExtensions.html": {
    "href": "api/MADE.Web.Extensions.QueryCollectionExtensions.html",
    "title": "Class QueryCollectionExtensions | MADE.NET",
    "keywords": "Class QueryCollectionExtensions Defines a collection of extensions for objects. Inheritance System.Object QueryCollectionExtensions Namespace : MADE.Web.Extensions Assembly : MADE.Web.dll Syntax public static class QueryCollectionExtensions : object Methods | Improve this Doc View Source GetDateTimeValueOrDefault(IQueryCollection, String, DateTime) Gets a value from the query by the specified key . Declaration public static DateTime GetDateTimeValueOrDefault(this IQueryCollection query, string key, DateTime defaultValue) Parameters Type Name Description IQueryCollection query The query to retrieve a value from. System.String key The key associated with the parameter to retrieve. DateTime defaultValue The default value if the value does not exist. Returns Type Description DateTime The value for the specified key . | Improve this Doc View Source GetIntValueOrDefault(IQueryCollection, String, Int32, Boolean) Gets an integer value from the query by the specified key . Declaration public static int GetIntValueOrDefault(this IQueryCollection query, string key, int defaultValue, bool treatZeroAsEmpty = true) Parameters Type Name Description IQueryCollection query The query to retrieve an integer value from. System.String key The key associated with the parameter to retrieve. System.Int32 defaultValue The default value if the value does not exist. System.Boolean treatZeroAsEmpty A value indicating whether to treat 0 as empty. True by default. Returns Type Description System.Int32 The integer value for the specified key . | Improve this Doc View Source GetStringValueOrDefault(IQueryCollection, String, String) Gets a string value from the query by the specified key . Declaration public static string GetStringValueOrDefault(this IQueryCollection query, string key, string defaultValue = null) Parameters Type Name Description IQueryCollection query The query to retrieve a string value from. System.String key The key associated with the parameter to retrieve. System.String defaultValue The default value if the value does not exist. Returns Type Description System.String The string value for the specified key ."
  },
  "api/MADE.Web.Identity.AuthenticatedUser.html": {
    "href": "api/MADE.Web.Identity.AuthenticatedUser.html",
    "title": "Class AuthenticatedUser | MADE.NET",
    "keywords": "Class AuthenticatedUser Defines a base model for an authenticated user within the application. Inheritance System.Object AuthenticatedUser Namespace : MADE.Web.Identity Assembly : MADE.Web.dll Syntax public class AuthenticatedUser : object Constructors | Improve this Doc View Source AuthenticatedUser(ClaimsPrincipal) Initializes a new instance of the AuthenticatedUser class with the claims principal associated with the user and configures the properties based on the claims. Declaration public AuthenticatedUser(ClaimsPrincipal claimsPrincipal) Parameters Type Name Description ClaimsPrincipal claimsPrincipal The claims principal associated with the user. Fields | Improve this Doc View Source EmailClaimType The value associated with the authenticated user's preferred email address. Declaration public const string EmailClaimType = null Field Value Type Description System.String | Improve this Doc View Source RoleClaimType The value associated with the authenticated user's assigned role(s). Declaration public const string RoleClaimType = null Field Value Type Description System.String | Improve this Doc View Source SubjectClaimType The value associated with the authenticated user's identity. Declaration public const string SubjectClaimType = null Field Value Type Description System.String Properties | Improve this Doc View Source Claims Gets the collection of the authenticated user's claims. Declaration public IImmutableList<Claim> Claims { get; } Property Value Type Description IImmutableList < Claim > | Improve this Doc View Source ClaimsPrincipal Gets the claims principal associated with the user. Declaration public ClaimsPrincipal ClaimsPrincipal { get; } Property Value Type Description ClaimsPrincipal | Improve this Doc View Source Email Gets the authenticated user's preferred email address. Declaration public string Email { get; } Property Value Type Description System.String | Improve this Doc View Source Roles Gets the collection of the authenticated user's assigned roles. Declaration public IEnumerable<string> Roles { get; } Property Value Type Description IEnumerable < System.String > | Improve this Doc View Source Subject Gets the authenticated user's identity. Declaration public string Subject { get; } Property Value Type Description System.String Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Web.Identity.AuthenticatedUserAccessor.html": {
    "href": "api/MADE.Web.Identity.AuthenticatedUserAccessor.html",
    "title": "Class AuthenticatedUserAccessor | MADE.NET",
    "keywords": "Class AuthenticatedUserAccessor Defines an accessor for retrieving the authenticated user from a . Inheritance System.Object AuthenticatedUserAccessor Implements IAuthenticatedUserAccessor Namespace : MADE.Web.Identity Assembly : MADE.Web.dll Syntax public class AuthenticatedUserAccessor : object, IAuthenticatedUserAccessor Constructors | Improve this Doc View Source AuthenticatedUserAccessor(IHttpContextAccessor) Initializes a new instance of the AuthenticatedUserAccessor class with an instance of the . Declaration public AuthenticatedUserAccessor(IHttpContextAccessor httpContextAccessor) Parameters Type Name Description IHttpContextAccessor httpContextAccessor The . Properties | Improve this Doc View Source AuthenticatedUser Gets the authenticated user model for the specified ClaimsPrincipal / Declaration public AuthenticatedUser AuthenticatedUser { get; } Property Value Type Description AuthenticatedUser | Improve this Doc View Source ClaimsPrincipal Gets the authenticated user's claims principal. Declaration public ClaimsPrincipal ClaimsPrincipal { get; } Property Value Type Description ClaimsPrincipal Implements IAuthenticatedUserAccessor Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Web.Identity.AuthenticatedUserExtensions.html": {
    "href": "api/MADE.Web.Identity.AuthenticatedUserExtensions.html",
    "title": "Class AuthenticatedUserExtensions | MADE.NET",
    "keywords": "Class AuthenticatedUserExtensions Defines a collection of extensions for AuthenticatedUser objects. Inheritance System.Object AuthenticatedUserExtensions Namespace : MADE.Web.Identity Assembly : MADE.Web.dll Syntax public static class AuthenticatedUserExtensions : object Methods | Improve this Doc View Source AddAuthenticatedUserAccessor(IServiceCollection) Adds the and AuthenticatedUserAccessor to the specified services collection. Declaration public static IServiceCollection AddAuthenticatedUserAccessor(this IServiceCollection serviceCollection) Parameters Type Name Description IServiceCollection serviceCollection The service collection. Returns Type Description IServiceCollection The configured service collection."
  },
  "api/MADE.Web.Identity.html": {
    "href": "api/MADE.Web.Identity.html",
    "title": "Namespace MADE.Web.Identity | MADE.NET",
    "keywords": "Namespace MADE.Web.Identity Classes AuthenticatedUser Defines a base model for an authenticated user within the application. AuthenticatedUserAccessor Defines an accessor for retrieving the authenticated user from a . AuthenticatedUserExtensions Defines a collection of extensions for AuthenticatedUser objects. Interfaces IAuthenticatedUserAccessor Defines an interface for accessing an authenticated user's claims principal."
  },
  "api/MADE.Web.Identity.IAuthenticatedUserAccessor.html": {
    "href": "api/MADE.Web.Identity.IAuthenticatedUserAccessor.html",
    "title": "Interface IAuthenticatedUserAccessor | MADE.NET",
    "keywords": "Interface IAuthenticatedUserAccessor Defines an interface for accessing an authenticated user's claims principal. Namespace : MADE.Web.Identity Assembly : MADE.Web.dll Syntax public interface IAuthenticatedUserAccessor Properties | Improve this Doc View Source AuthenticatedUser Gets the authenticated user model for the specified ClaimsPrincipal / Declaration AuthenticatedUser AuthenticatedUser { get; } Property Value Type Description AuthenticatedUser | Improve this Doc View Source ClaimsPrincipal Gets the authenticated user's claims principal. Declaration ClaimsPrincipal ClaimsPrincipal { get; } Property Value Type Description ClaimsPrincipal Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Web.Mvc.Extensions.ControllerBaseExtensions.html": {
    "href": "api/MADE.Web.Mvc.Extensions.ControllerBaseExtensions.html",
    "title": "Class ControllerBaseExtensions | MADE.NET",
    "keywords": "Class ControllerBaseExtensions Defines a collection of extensions for MVC instances. Inheritance System.Object ControllerBaseExtensions Namespace : MADE.Web.Mvc.Extensions Assembly : MADE.Web.Mvc.dll Syntax public static class ControllerBaseExtensions : object Methods | Improve this Doc View Source InternalServerError(ControllerBase, ModelStateDictionary) Creates an InternalServerErrorObjectResult that produces a response. Declaration public static IActionResult InternalServerError(this ControllerBase controller, ModelStateDictionary modelState) Parameters Type Name Description ControllerBase controller The controller that is performing the response. ModelStateDictionary modelState The containing errors to be returned to the client. Returns Type Description IActionResult The created for the response. | Improve this Doc View Source InternalServerError(ControllerBase, Object) Creates an InternalServerErrorObjectResult that produces a response. Declaration public static IActionResult InternalServerError(this ControllerBase controller, object responseContent) Parameters Type Name Description ControllerBase controller The controller that is performing the response. System.Object responseContent An error object to be returned to the client. Returns Type Description IActionResult The created for the response. | Improve this Doc View Source Json(ControllerBase, Object, HttpStatusCode, JsonSerializerSettings) Creates a JsonResult object from the specified value for a controller response. Declaration public static IActionResult Json(this ControllerBase controller, object value, HttpStatusCode statusCode = null, JsonSerializerSettings serializerSettings = null) Parameters Type Name Description ControllerBase controller The controller that is performing the response. System.Object value The value object to serialize. HttpStatusCode statusCode The expected result HTTP status code. JsonSerializerSettings serializerSettings The Json.NET serializer settings for serializing the result. Returns Type Description IActionResult The created JsonResult for the response."
  },
  "api/MADE.Web.Mvc.Extensions.html": {
    "href": "api/MADE.Web.Mvc.Extensions.html",
    "title": "Namespace MADE.Web.Mvc.Extensions | MADE.NET",
    "keywords": "Namespace MADE.Web.Mvc.Extensions Classes ControllerBaseExtensions Defines a collection of extensions for MVC instances."
  },
  "api/MADE.Web.Mvc.Responses.html": {
    "href": "api/MADE.Web.Mvc.Responses.html",
    "title": "Namespace MADE.Web.Mvc.Responses | MADE.NET",
    "keywords": "Namespace MADE.Web.Mvc.Responses Classes InternalServerErrorObjectResult Defines an that when executed will produce a Internal Server Error (500) response. JsonResult Defines a model for a result of a request that is serialized as JSON using Json.NET."
  },
  "api/MADE.Web.Mvc.Responses.InternalServerErrorObjectResult.html": {
    "href": "api/MADE.Web.Mvc.Responses.InternalServerErrorObjectResult.html",
    "title": "Class InternalServerErrorObjectResult | MADE.NET",
    "keywords": "Class InternalServerErrorObjectResult Defines an that when executed will produce a Internal Server Error (500) response. Inheritance System.Object InternalServerErrorObjectResult Namespace : MADE.Web.Mvc.Responses Assembly : MADE.Web.Mvc.dll Syntax public class InternalServerErrorObjectResult : ObjectResult Constructors | Improve this Doc View Source InternalServerErrorObjectResult(ModelStateDictionary) Initializes a new instance of the InternalServerErrorObjectResult class. Declaration public InternalServerErrorObjectResult(ModelStateDictionary modelState) Parameters Type Name Description ModelStateDictionary modelState The containing the validation errors. Exceptions Type Condition System.ArgumentNullException Thrown if the modelState is null . | Improve this Doc View Source InternalServerErrorObjectResult(Object) Initializes a new instance of the InternalServerErrorObjectResult class. Declaration public InternalServerErrorObjectResult(object error) Parameters Type Name Description System.Object error Contains the errors to be returned to the client. Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Web.Mvc.Responses.JsonResult.html": {
    "href": "api/MADE.Web.Mvc.Responses.JsonResult.html",
    "title": "Class JsonResult | MADE.NET",
    "keywords": "Class JsonResult Defines a model for a result of a request that is serialized as JSON using Json.NET. Inheritance System.Object JsonResult Implements IStatusCodeActionResult Namespace : MADE.Web.Mvc.Responses Assembly : MADE.Web.Mvc.dll Syntax public class JsonResult : ActionResult Constructors | Improve this Doc View Source JsonResult(Object, HttpStatusCode, JsonSerializerSettings) Initializes a new instance of the JsonResult class with the object to serialize. Declaration public JsonResult(object value, HttpStatusCode statusCode = null, JsonSerializerSettings serializerSettings = null) Parameters Type Name Description System.Object value The value object to serialize. HttpStatusCode statusCode The expected result HTTP status code. JsonSerializerSettings serializerSettings The Json.Net serializer settings for serializing the result. Properties | Improve this Doc View Source SerializerSettings Gets the Json.Net serializer settings for serializing the result. Declaration public JsonSerializerSettings SerializerSettings { get; } Property Value Type Description JsonSerializerSettings | Improve this Doc View Source StatusCode Gets the expected result HTTP status code. Declaration public int? StatusCode { get; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source Value Gets the value object to serialize. Declaration public object Value { get; } Property Value Type Description System.Object Methods | Improve this Doc View Source ExecuteResultAsync(ActionContext) Executes the result operation of the action method asynchronously writing the Value to the response. Declaration public override async Task ExecuteResultAsync(ActionContext context) Parameters Type Name Description ActionContext context The context in which the result is executed. Returns Type Description Task An asynchronous operation. Implements IStatusCodeActionResult Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Web.Requests.html": {
    "href": "api/MADE.Web.Requests.html",
    "title": "Namespace MADE.Web.Requests | MADE.NET",
    "keywords": "Namespace MADE.Web.Requests Classes PaginatedRequest<T> Defines a request with paginated results of the specified response type. Interfaces IPaginatedRequest<T> Defines an interface for a request with paginated results of the specified response type."
  },
  "api/MADE.Web.Requests.IPaginatedRequest-1.html": {
    "href": "api/MADE.Web.Requests.IPaginatedRequest-1.html",
    "title": "Interface IPaginatedRequest<T> | MADE.NET",
    "keywords": "Interface IPaginatedRequest<T> Defines an interface for a request with paginated results of the specified response type. Namespace : MADE.Web.Requests Assembly : MADE.Web.dll Syntax public interface IPaginatedRequest<T> Type Parameters Name Description T The type of item to return. Properties | Improve this Doc View Source Page Gets or sets the page requested. Declaration int Page { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source PageSize Gets or sets the number of expected results for the requested page. Declaration int PageSize { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Skip Gets the number of items to skip. Declaration int Skip { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Take Gets the number of items to take. Declaration int Take { get; } Property Value Type Description System.Int32 Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Web.Requests.PaginatedRequest-1.html": {
    "href": "api/MADE.Web.Requests.PaginatedRequest-1.html",
    "title": "Class PaginatedRequest<T> | MADE.NET",
    "keywords": "Class PaginatedRequest<T> Defines a request with paginated results of the specified response type. Inheritance System.Object PaginatedRequest<T> Implements IPaginatedRequest <T> Namespace : MADE.Web.Requests Assembly : MADE.Web.dll Syntax public class PaginatedRequest<T> : object, IPaginatedRequest<T> Type Parameters Name Description T The type of item to return. Constructors | Improve this Doc View Source PaginatedRequest(Int32, Int32) Initializes a new instance of the PaginatedRequest<T> class. Declaration public PaginatedRequest(int page = 1, int pageSize = 10) Parameters Type Name Description System.Int32 page The page requested. System.Int32 pageSize The number of expected results for the requested page. Properties | Improve this Doc View Source Page Gets or sets the page requested. Declaration public int Page { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source PageSize Gets or sets the number of expected results for the requested page. Declaration public int PageSize { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Skip Gets the number of items to skip. Declaration public int Skip { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Take Gets the number of items to take. Declaration public int Take { get; } Property Value Type Description System.Int32 Implements IPaginatedRequest<T> Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Web.Responses.html": {
    "href": "api/MADE.Web.Responses.html",
    "title": "Namespace MADE.Web.Responses | MADE.NET",
    "keywords": "Namespace MADE.Web.Responses Classes PaginatedResponse<T> Defines a response to a IPaginatedRequest<T> request. Interfaces IPaginatedResponse<T> Defines an interface for a response to a IPaginatedRequest<T> request."
  },
  "api/MADE.Web.Responses.IPaginatedResponse-1.html": {
    "href": "api/MADE.Web.Responses.IPaginatedResponse-1.html",
    "title": "Interface IPaginatedResponse<T> | MADE.NET",
    "keywords": "Interface IPaginatedResponse<T> Defines an interface for a response to a IPaginatedRequest<T> request. Namespace : MADE.Web.Responses Assembly : MADE.Web.dll Syntax public interface IPaginatedResponse<T> Type Parameters Name Description T The type of item to return. Properties | Improve this Doc View Source AvailableCount Gets or sets the count of the number of available items. Declaration int AvailableCount { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Items Gets or sets the items associated with the page. Declaration IEnumerable<T> Items { get; set; } Property Value Type Description IEnumerable <T> | Improve this Doc View Source Page Gets or sets the page associated with the results. Declaration int Page { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source PageSize Gets or sets the number of expected results for the page. Declaration int PageSize { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source TotalPages Gets the total number of pages for the available items based on the page size. Declaration int TotalPages { get; } Property Value Type Description System.Int32 Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "api/MADE.Web.Responses.PaginatedResponse-1.html": {
    "href": "api/MADE.Web.Responses.PaginatedResponse-1.html",
    "title": "Class PaginatedResponse<T> | MADE.NET",
    "keywords": "Class PaginatedResponse<T> Defines a response to a IPaginatedRequest<T> request. Inheritance System.Object PaginatedResponse<T> Implements IPaginatedResponse <T> Namespace : MADE.Web.Responses Assembly : MADE.Web.dll Syntax public class PaginatedResponse<T> : object, IPaginatedResponse<T> Type Parameters Name Description T The type of item to return. Constructors | Improve this Doc View Source PaginatedResponse(IEnumerable<T>, Int32, Int32, Int32) Initializes a new instance of the PaginatedResponse<T> class. Declaration public PaginatedResponse(IEnumerable<T> items, int page, int pageSize, int availableCount) Parameters Type Name Description IEnumerable <T> items The items associated with the page. System.Int32 page The page associated with the results. System.Int32 pageSize The number of expected results for the page. System.Int32 availableCount The count of the number of available items. Properties | Improve this Doc View Source AvailableCount Gets or sets the count of the number of available items. Declaration public int AvailableCount { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Items Gets or sets the items associated with the page. Declaration public IEnumerable<T> Items { get; set; } Property Value Type Description IEnumerable <T> | Improve this Doc View Source Page Gets or sets the page associated with the results. Declaration public int Page { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source PageSize Gets or sets the number of expected results for the page. Declaration public int PageSize { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source TotalPages Gets the total number of pages for the available items based on the page size. Declaration public int TotalPages { get; } Property Value Type Description System.Int32 Implements IPaginatedResponse<T> Extension Methods ReflectionExtensions.GetPropertyValue<T>(Object, String) ReflectionExtensions.GetPropertyNames(Object)"
  },
  "articles/features/collections.html": {
    "href": "articles/features/collections.html",
    "title": "Using the Collections package | MADE.NET",
    "keywords": "Using the Collections package The Collections package is designed to provide helpful extensions and additional types for working with enumerable objects in your applications. Comparing objects using the GenericEqualityComparer The MADE.Collections.Compare.GenericEqualityComparer is a simple to use IEqualityComparer that takes a function as a parameter when constructed. This function is used when comparing for equality to validate that the two objects under test are equal. It allows you to go over equality based on the Equals method and provide your own equality comparison. Here's an example of it in use, combining multiple collections together with distinct objects by comparing based on the ID of the items. namespace App.Permissions { using System.Collections.Generic; using System.Linq; using MADE.Collections.Compare; public static class ApplicationPermissions { private static readonly GenericEqualityComparer<Permission> PermissionComparer = new GenericEqualityComparer<Permission>( permission => permission.Id ); private static readonly IEnumerable<Permission> AdminPermissions = new List<Permission>(); private static readonly IEnumerable<Permission> UserPermissions = new List<Permission>(); public static IEnumerable<Permission> GetAllPermissions() { return AdminPermissions.Union(UserPermissions, PermissionComparer); } } } Make a collection of items equal to another using the MakeEqualTo extension The MADE.Collections.CollectionExtensions static class contains a MakeEqualTo<T> extension method for ICollection<T> objects that will add or remove items from the destination collection to match the source. You can use this in your projects similar to our example below. public void UpdateAdminPermissions(IEnumerable<Permission> permissions) { AdminPermissions.MakeEqualTo<Permission>(permissions); } Ensuring a collection of items is equivalent to another using the AreEquivalent extension The MADE.Collections.CollectionExtensions static class contains an AreEquivalent<T> extension method for ICollection<T> objects that will ensure the expected and actual collections contain the same items with no regard to order. Here's an example of this in use. public void UpdateAdminPermissions(IEnumerable<Permission> permissions) { AdminPermissions.MakeEqualTo<Permission>(permissions); if (!AdminPermission.AreEquivalent<Permission>(permissions)) { throw new InvalidOperationException(\"Permissions were not updated successfully.\"); } } Adding a collection of items to another using the AddRange extension ICollection<T> objects don't contain a method for adding a collection of items to it. This extension method takes a collection of items with the same item type and adds them all in order to the end of the destination collection. You can use this extension in your own code like this example. public void AddAdminPermissions(IEnumerable<Permission> permissions) { AdminPermissions.AddRange<Permission>(permissions); } Updating an item in a collection using the Update extension The MADE.Collections.CollectionExtensions static class contains an Update<T> extension method for IList<T> objects that allows an item to be updated in the collection based on a predicate. The predicate will find the item in the collection, and ensure that it is updated, returning true once executed. If the item can't be found, it will return false. You can use this extension in your application like the example below. public void UpdatePermission(Permission permissionToUpdate) { var updated = AdminPermissions.Update<Permission>(permissionToUpdate, (p1, p2) => p1.Id == p2.Id); if (updated) { // Update UI } } Removing a collection of items from another using the RemoveRange extension ICollection<T> objects don't contain a method for removing a collection of items from it. This extension method takes a collection of items with the same item type and removes them from the destination collection. Here's an example of this in use. public void RemoveAdminPermissions(IEnumerable<Permission> permissions) { AdminPermissions.RemoveRange<Permission>(permissions); } Performing actions over collections using the ForEach extension Just a quick and easy extension to have at your disposal, ForEach is an IEnumerable extension that allows you to perform an action on each element in the collection. Simply call ForEach on your collection passing an action to perform on the items, for example: private void Update() { myStrings.ForEach(s => VerifyString(s)); } private void VerifyString(string val) { // Do verification } Breaking collections up into chunks using the Chunk extension When you want to process your data in limited sets, you need to split your collection up. The Chunk extension allows you to achieve this by splitting your lists up into datasets by a specified size for you. Here's how you can do this in your projects. public async Task ProcessMessagesAsync(IEnumerable<Message> messages, CancellationToken cancellationToken = default ) { foreach ( var messageChunk in messages.Chunk( 10 ) ) { foreach ( var message in messageChunk ) { await this.processor.SendMessageAsync( message, cancellationToken ); } } }"
  },
  "articles/features/data-converters.html": {
    "href": "articles/features/data-converters.html",
    "title": "Using the Data Converters package | MADE.NET",
    "keywords": "Using the Data Converters package The Data Converters package provides a collection of value converters and extensions to manipulate data in your applications. Converting a DateTime to a String using the DateTimeToStringValueConverter Value converters are a common coding practice for building XAML applications that allow values to be bound to a view, converted to a different type and back depending on the binding mode. Why should that be limited to just XAML applications though? The MADE.Data.Converters.DateTimeToStringValueConverter works across any .NET application, including your XAML bindings. It converts a DateTime value to a String using a format parameter. The format parameter must be a valid DateTime string format based on the Microsoft documentation . Below is an example of this in use in any C# application. namespace App.Conversions { using MADE.Data.Converters; public class ApplicationConverters { private readonly DateTimeToStringValueConverter DateTimeToStringConverter = new DateTimeToStringValueConverter(); public string ConvertDateToString(DateTime date) { return DateTimeToStringConverter.Convert(date, \"g\"); } public DateTime ConvertStringToDate(string dateString) { return DateTimeToStringConverter.ConvertBack(dateString, \"g\"); } } } You can also take advantage of this converter in your XAML applications too. <Page x:Class=\"App.Conversions.MainPage\" xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" xmlns:converters=\"using:MADE.Data.Converters\" Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\" mc:Ignorable=\"d\"> <Page.Resources> <converters:DateTimeToStringValueConverter x:Key=\"DateTimeToStringValueConverter\" /> </Page.Resources> <RelativePanel Padding=\"12\"> <TextBlock Text=\"{x:Bind ViewModel.Date, Converter={StaticResource DateTimeToStringValueConverter}, ConverterParameter='g'}\" /> </RelativePanel> </Page> Creating your own custom value converters If you want to take advantage of what goes into a value converter, you can build your own using the MADE.Data.Converters.IValueConverter interface which provides the signatures for the Convert and ConvertBack methods. These can be used to convert any type to another. Whatever data conversion you think you may need, you'll be able to build out a value converter to satisfy that need for your project. You can then build out your own, similar to our DateTimeToStringValueConverter . namespace MADE.Data.Converters { using System; using System.Globalization; public partial class DateTimeToStringValueConverter : IValueConverter<DateTime, string> { public string Convert(DateTime value, object parameter = default) { string format = parameter?.ToString(); return !string.IsNullOrWhiteSpace(format) ? value.ToString(format, CultureInfo.InvariantCulture) : value.ToString(CultureInfo.InvariantCulture); } public DateTime ConvertBack(string value, object parameter = default) { if (string.IsNullOrWhiteSpace(value)) { return DateTime.MinValue; } bool parsed = DateTime.TryParse(value, out DateTime dateTime); return parsed ? dateTime : DateTime.MinValue; } } } If you want to build a XAML specific value converter, you can also apply the Windows.UI.Xaml.Data.IValueConverter to your class and implement the additional methods calling directly into your Convert and ConvertBack methods. If there is a common value converter you think is missing from MADE.NET, raise a tracking item on GitHub and we'll get it implemented."
  },
  "articles/features/data-efcore.html": {
    "href": "articles/features/data-efcore.html",
    "title": "Using the Data Converters package | MADE.NET",
    "keywords": "Using the Data Entity Framework Core package The Data Entity Framework Core package provides a collection of helpers, extensions, and converters for applications taking advantage of the Microsoft.EntityFrameworkCore library. Standardizing your entities with EntityBase When setting up your entities, there are some common standard properties you'll usually want to include in most circumstances. These are: An identifier A date the entity was created A date the entity was last updated This is what the MADE.Data.EFCore.EntityBase type provides for you. It even goes as far as to initialize your created and last updated date values for you when you create your object. To use it for your own entities, it's as simple as inheriting from the EntityBase type. namespace MyApp.Data { using MADE.Data.EFCore; public class User : EntityBase { public string FirstName { get; set; } public string LastName { get; set; } public string EmailAddress { get; set; } } }"
  },
  "articles/features/data-serialization.html": {
    "href": "articles/features/data-serialization.html",
    "title": "Using the Data Serialization package | MADE.NET",
    "keywords": "Using the Data Serialization package The Data Serialization package provides a collection of helpers and extensions for data serialization in different types, e.g. JSON. Handling type changes in JSON objects serialized with JSON.NET with TypeNameHandling set to All There are many ways to use JSON.NET in your applications to serialize and deserialize data. This includes the ability to set the TypeNameHandling property to All include your .NET type information within your serialized data. This can come with challenges when you want to use the same data in different solutions, or when you want to perform refactors or data restructures in your codebase. The JsonTypeMigrationSerializationBinder class provides a way to handle type changes in JSON objects serialized with JSON.NET, migrating from one type to another (whether known within your codebase or not). Here's how to setup your application for migrating JSON objects from one type to another. namespace App.Migrations { using MADE.Data.Serialization.Json; using MADE.Data.Serialization.Json.Binders; public class JsonSerializer { public JsonSerializer() { JsonSerializerSettings.Default.TypeNameHandling = TypeNameHandling.All; JsonSerializerSettings.Default.Binder = new JsonTypeMigrationSerializationBinder( new JsonTypeMigration(typeof(OldType), typeof(NewType)), new JsonTypeMigration(\"App.Migrations\", \"App.Migrations.Data.OldDataType\", typeof(NewType)) ); } public T Deserialize<T>(string serializedJson) { return JsonConvert.DeserializeObject<T>(serializedJson); } } }"
  },
  "articles/features/data-validation.html": {
    "href": "articles/features/data-validation.html",
    "title": "Using the Data Validation package | MADE.NET",
    "keywords": "Using the Data Validation package The Data Validation package is designed to provide out-of-the-box data validation to applications built with C#. Validating an object using the ValidatorCollection Data validation can be implemented in so many different ways. MADE provides the capability to perform data validation through its own IValidator interface that can be used to create consistent data validators. Using the MADE.Data.Validation.ValidatorCollection based on a List type, you can construct a collection of IValidator instances which can be used to validate values. For example, you might want a collection of validators that ensure that a value is provided, it has a minimum length, and it contains only alphanumeric characters. Instead of implementing your own custom validation in your application, you can take advantage of the built-in IValidator implementation of this package and utilize them with the ValidatorCollection . This can be achieved like the example below. namespace App.Validations { using MADE.Data.Converters; public class ApplicationConverters { private readonly ValidatorCollection RequiredAlphaNumericValidators = new ValidatorCollection { new RequiredValidator { Key = \"Required\" }, new AlphaNumericValidator { Key = \"AlphaNumericOnly\" }, }; public void EnsureValid(string value) { RequiredAlphaNumericValidators.Validate(value); if (RequiredAlphaNumericValidators.IsInvalid) { throw new InvalidOperationException(string.Join(\", \", RequiredAlphaNumericValidators.FeedbackMessages))); } } } } The ValidatorCollection will loop through all of the IValidator instances that have been registered with it and validate the value with each one. When there are errors, this will result in the FeedbackMessages collection being populated with validation messages which can be used to display to the user. You also have the IsInvalid property which exposes where there are any validators that are invalid. There is also control through a Validated event handler which you can use to trigger actions based on whether the validations have run in the collection. Available IValidator types IValidator types can be used on their own, as well as with the ValidatorCollection . Here is a list of the in-box IValidators that you can use in your applications. AlphaValidator The AlphaValidator checks a string value contains only letter characters, i.e. a-z, ignoring casing. If the value contains only letters, the validator will report valid; otherwise, it will report invalid. AlphaNumericValidator Similar to the AlphaValidator , the AlphaNumericValidator extends the characters in the validation to include numbers also. Base64Validator The Base64Validator checks whether a string value is a valid Base64 encoded string. BetweenValidator The BetweenValidator validates an IComparable value is between a configurable minimum and maximum range. The range can be configured by setting the Min and Max values, as well as an Inclusive flag to configure whether the minimum and maximum values are included in the range (defaults to true ). The in-box System types which implement the IComparable interface can be found in the Microsoft documentation . EmailValidator The EmailValidator extends the in-box RegexValidator type to provide validating a string is a valid e-mail address. The current pattern used to validate e-mail addresses is: this.Pattern = @\"^(?!\\.)(\"\"([^\"\"\\r\\\\]|\\\\[\"\"\\r\\\\])*\"\"|\" + @\"([-a-zA-Z0-9!#$%&'*+/=?^_`{|}~]|(?<!\\.)\\.)*)(?<!\\.)\" + @\"@[a-z0-9][\\w\\.-]*[a-z0-9]\\.[a-z][a-z\\.]*[a-z]$\"; MADE.NET has a comprehensive set of test cases which validate the implementation with a variety of different valid and invalid email addresses. GuidValidator The GuidValidator checks whether a string value is a valid GUID. The underlying implementation uses the Guid.TryParse method to validate the string. IpAddressValidator The IpAddressValidator is a simple data validator which ensures that a value is a valid IP address. The implementation splits the IP address into each nibble and validates them based on the following criteria: Is less than 4 characters Is greater than 0 characters Is a digit Is a numeric value between 0 and 255 LatitudeValidator The LatitudeValidator validates a value is within the valid range for a latitude value (-90 and 90). LongitudeValidator The LongitudeValidator validates a value is within the valid range for a longitude value (-180 and 180). MacAddressValidator The MacAddressValidator is a simple data validator which ensures that a value is a valid MAC address. The implementation uses the .NET PhysicalAddress class to parse the provided value. For more information on the PhysicalAddress class, see the Microsoft documentation . MaxValueValidator The MaxValueValidator validates an IComparable value is less than a configurable maximum value. The maximum can be configured by setting the Max value. The in-box System types which implement the IComparable interface can be found in the Microsoft documentation . MinValueValidator The MinValueValidator validates an IComparable value is greater than a configurable minimum value. The minimum can be configured by setting the Min value. The in-box System types which implement the IComparable interface can be found in the Microsoft documentation . PredicateValidator The PredicateValidator validates a value using a custom predicate to ensure that a condition is met. RegexValidator The RegexValidator is a generic data validator which validates a value based on a configurable regular expression pattern. The pattern can be configured by setting the Pattern value. RequiredValidator The RequiredValidator is a data validator that ensures that the value provided exists. This is determined based on the following criteria: The value is not null The value is a collection and contains items The value is a boolean and is true The value is a string and is not null or whitespace Creating your own custom data validators There are likely to be more advanced, custom scenarios for your own applications that need to extend the capabilities past the in-box IValidator types. If you want to take advantage of what goes into a data validator, you can build your own using the MADE.Data.Validation.IValidator interface. You can then build out your own, similar to our validators such as the RequiredValidator . namespace MADE.Data.Validation.Validators { using System.Collections; using MADE.Data.Validation.Extensions; using MADE.Data.Validation.Strings; public class RequiredValidator : IValidator { private string feedbackMessage = Resources.ResourceManager.GetString(\"RequiredValidator_FeedbackMessage\"); public string Key { get; set; } = nameof(RequiredValidator); public bool IsInvalid { get; set; } public bool IsDirty { get; set; } public string FeedbackMessage { get => this.feedbackMessage.IsNullOrWhiteSpace() ? Resources.RequiredValidator_FeedbackMessage : this.feedbackMessage; set => this.feedbackMessage = value; } public void Validate(object value) { this.IsInvalid = DetermineIsInvalid(value); this.IsDirty = true; } private static bool DetermineIsInvalid(object value) { switch (value) { case null: return true; case ICollection collection: return collection.Count <= 0; case bool isTrue: return !isTrue; case string str: return str.IsNullOrWhiteSpace(); default: return false; } } } } If there is a common data validator you think is missing from MADE.NET, raise a tracking item on GitHub and we'll get it implemented. Using FluentValidation with MADE.NET The MADE.Data.Validation.FluentValidation package provides an easy way to take advantage of validation with the FluentValidation library validator framework. Validating an object using the FluentValidatorCollection Using the MADE.Data.Validation.FluentValidatorCollection<T> based on a List type, you can construct a collection of AbstractValidator instances which can be used to validate values. This way, you can bring FluentValidation's out-of-the-box validators or your own custom validators based on the AbstractValidator type and get all the benefits of using the existing MADE.NET validation framework. This is great for example with input validator controls that currently support the MADE.NET validation framework!"
  },
  "articles/features/diagnostics.html": {
    "href": "articles/features/diagnostics.html",
    "title": "Using the Diagnostics package | MADE.NET",
    "keywords": "Using the Diagnostics package The Diagnostic package contains a set of simple application logging mechanisms for applications. Logging events to files on disk with FileEventLogger Using the MADE.Diagnostics.Logging.FileEventLogger , you can quickly and easily get up and running with event logging for your application's diagnostic needs. The FileEventLogger will append event logs to a file on disk. The logs folder and file name can be configured using the LogsFolderName (default is Logs ) and LogFileNameFormat (default is Log-{0:yyyyMMdd}.txt ) properties. The LogFileNameFormat has a DateTime parameter that can used to ensure logs are created based on a date, for example, daily using the yyyyMMdd format. By default, the logs are stored in the application's root directory, however, this can also be overridden completely using the LogPath property which requires a full directory path including log file name. The implementation also has platform-specific code, so if you're building applications for Windows, Android, or iOS, the FileEventLogger will ensure the logs are stored within the application's data store. Here's an example of the output using the default configuration. 4/6/2021 8:58:40 AM Level: Info Id: 230b8802-4ba5-465d-bfdf-433698628673 Message: 'Application diagnostics initialized.' 4/6/2021 8:58:41 AM Level: Debug Id: b8f2137d-f436-4ee6-88aa-59fa9e745117 Message: 'This is a debug message' 4/6/2021 8:58:41 AM Level: Error Id: f04134e3-7a06-4688-832f-e1e4567aa6e4 Message: 'Error: 'System.InvalidOperationException: Could not complete delete action'' Logging levels The FileEventLogger provides the following methods for logging events in your application. WriteDebug(string) WriteDebug(string, Exception) WriteDebug(Exception) WriteInfo(string) WriteInfo(string, Exception) WriteInfo(Exception) WriteWarning(string) WriteWarning(string, Exception) WriteWarning(Exception) WriteError(string) WriteError(string, Exception) WriteError(Exception) WriteCritical(string) WriteCritical(string, Exception) WriteCritical(Exception) Implement application-wide exception handling with AppDiagnostics There are occasions when you want to build an application that will not crash when non-critical, unhandled exceptions are thrown by your application. The MADE.Diagnostics.AppDiagnostics helper provides you with the means to ensure your users can keep using your application with no worry about minor issues causing crashes. Taking advantage of the IEventLogger interface available in the Diagnostics package, the AppDiagnostics helper can track exceptions thrown by the AppDomain.UnhandledException , TaskScheduler.UnobservedTaskException , Windows.UI.Xaml.Application.UnhandledException , Android.Runtime.UnhandledExceptionRaiser , and Java.Lang.Thread.DefaultUncaughtException handlers, depending on your platform usage. In the unfortunate event that an exception thrown is application terminating, the AppDiagnostics helper will ensure that the error is logged before closing the application. Logs will be created for each handle of an unhandled exception from one or more of these handlers at the Critical level with a custom message which also includes a correlation ID. Observing the unhandled exceptions The AppDiagnostics helper exposes its own event handler ExceptionObserved that can be used in your own application code if you wish to perform additional actions when an exception is logged. The event argument provided by this handler will include the correlation ID to the event in the log, as well as the exception that was thrown."
  },
  "articles/features/networking.html": {
    "href": "articles/features/networking.html",
    "title": "Using the Networking package | MADE.NET",
    "keywords": "Using the Networking package The Networking package contains a collection of helpers for applications that use HttpClient for making network requests to APIs. Making simple network requests using NetworkRequest instances The Network package comes with a variety of NetworkRequest types that can be used to perform network requests without a lot of additional overhead. The current available in-box NetworkRequest types are: JsonGetNetworkRequest, for making a HTTP GET request with a JSON response, deserializing to a specified type. JsonPostNetworkRequest, for making a HTTP POST request with a JSON payload, and a JSON response. JsonPutNetworkRequest, for making a HTTP PUT request with a JSON payload, and a JSON response. JsonPatchNetworkRequest, for making a HTTP PATCH request with a JSON payload, and a JSON response. JsonDeleteNetworkRequest, for making a HTTP DELETE request with a JSON response. StreamGetNetworkRequest, for making a HTTP GET request with a data stream response. Each one needs a HttpClient instance, a URL to call, and any additional headers that may be required for the request. The example below shows how you can use a JsonGetNetworkRequest to make a request to an API endpoint and retrieve data with a specified type. public async Task<Profile> GetMyProfileAsync(CancellationToken cancellationToken = default) { JsonGetNetworkRequest request = new JsonGetNetworkRequest( new HttpClient(), \"https://jamescroft.co.uk/api/profile\", this.GetRequestHeaders()); return await request.ExecuteAsync<Profile>(cancellationToken); } The JsonPostNetworkRequest , JsonPutNetworkRequest , and JsonPatchNetworkRequest types all have an additional parameter which require a JSON string. public async Task UpdateMyProfileAsync(Profile profile, CancellationToken cancellationToken = default) { JsonPutNetworkRequest request = new JsonPutNetworkRequest( new HttpClient(), \"https://jamescroft.co.uk/api/profile\", JsonConvert.SerializeObject(profile), this.GetRequestHeaders()); await request.ExecuteAsync<bool>(cancellationToken); } Queuing your network requests using NetworkRequestManager Built on the MADE NetworkRequest type, the MADE.Networking.Http.NetworkRequestManager is capable of managing a queue of multiple concurrent network requests. This allows you to publish network requests and not need to worry about when you might receive a response. The implementation handles that for you with the use of success and error callback actions. This can be achieved by registering your NetworkRequest instances with an instance of the NetworkRequestManager . Note , to make sure network requests are processed, the NetworkRequestManager.Start() method must be called. private INetworkRequestManager NetworkManager { get; } public void GetMyProfileAsync() { JsonGetNetworkRequest request = new JsonGetNetworkRequest( new HttpClient(), \"https://jamescroft.co.uk/api/profile\", this.GetRequestHeaders()); NetworkManager.AddOrUpdate<JsonGetNetworkRequest, Profile>( request, this.UpdateProfileDetails); } public void UpdateProfileDetails(Profile profile) { // Update UI elements } NetworkRequest objects have a Guid identifier also, so if you need to update a pending request with different data or a change in URL, you can do simply by recalling NetworkManager.AddOrUpdate passing in a network request with the same ID. The AddOrUpdate method has overloads for providing a success callback, as well as an error callback. This allows you to make decisions in your code to handle a successful or failed network request."
  },
  "articles/features/runtime.html": {
    "href": "articles/features/runtime.html",
    "title": "Using the Runtime package | MADE.NET",
    "keywords": "Using the Runtime package The Runtime package provides additional types for .NET to provide extensibility over existing System types. Improving callback memory management with WeakReferenceCallback The MADE.Runtime.WeakReferenceCallback is a wrapper type for a WeakReference . It is capable of taking a delegate action and ensuring that it is available to be garbage collected if the referring object is disposed. A good scenario of a use case for this is within the MADE library's MADE.Networking.Http.NetworkRequestManager to provide lazy callbacks on completed network requests. public void AddOrUpdate<TRequest, TResponse, TErrorResponse>( TRequest request, Action<TResponse> successCallback, Action<TErrorResponse> errorCallback) where TRequest : NetworkRequest { var weakSuccessCallback = new WeakReferenceCallback(successCallback, typeof(TResponse)); var weakErrorCallback = new WeakReferenceCallback(errorCallback, typeof(TErrorResponse)); var requestCallback = new NetworkRequestCallback(request, weakSuccessCallback, weakErrorCallback); this.CurrentQueue.AddOrUpdate( request.Identifier.ToString(), requestCallback, (s, callback) => requestCallback); } In the above example, an action can be passed from a requesting object for when a network request is a success or errors. By using a WeakReferenceCallback instead of keeping a hold on the action reference, the requesting object can be disposed when it is no longer required. This is useful in application development scenarios, for example, a page view-model."
  },
  "articles/features/testing.html": {
    "href": "articles/features/testing.html",
    "title": "Using the Testing package | MADE.NET",
    "keywords": "Using the Testing package While the MADE.Testing library is designed to be complementary to your own unit testing projects, it can be used in any project you wish you make assertions. MADE.Testing is unit testing framework agnostic so it can be used with your flavor of choice. Whether that's NUnit, xUnit, MSTest, or another, you can use any helpers from this library. Asserting collection equivalency with CollectionAssertExtensions The ShouldBeEquivalentTo extension method for IEnumerable instances is capable of testing whether two collections contain the same elements, regardless of order. Before getting to the point of comparing the actual items in the collections, the extension will check the nullable state, whether the two collections are the same object reference, and if they have the same number of items. After this point, the extension will compare items in both collections to ensure that each collection contains the same items by equality. Below is an example of a scenario that would result in a valid and invalid test run. [Test] public void ValidTest() { IEnumerable<string> expected = new List<string>{\"Hello\", \"World\"}; var actual = new List<string>{\"World\", \"Hello\"}; actual.ShouldBeEquivalentTo(expected); } [Test] public void InvalidTest() { IEnumerable<string> expected = new List<string>{\"Hello\", \"World\"}; var actual = new List<string>{\"World\", \"Bonjour\"}; actual.ShouldBeEquivalentTo(expected); // Throws AssertFailedException } You can also perform the same check for scenarios where the collections are not equivalent."
  },
  "articles/features/threading.html": {
    "href": "articles/features/threading.html",
    "title": "Using the Threading package | MADE.NET",
    "keywords": "Using the Threading package The Threading package contains a collection of System.Threading extensions and helpers to improve the developer experience. Modernizing System.Threading.Timer with the MADE.Threading.Timer Setting up and managing a System.Threading.Timer can sometimes be cumbersome. How do you control the start and stop state? The MADE.Threading.Timer is a modern take on System.Threading.Timer providing properties for configuring the Interval and DueTime , plus an event handler for Tick . It also includes simple methods to Start and Stop the timer running. Below is an example of using the MADE.Threading.Timer to setup and start running a timed job. public class TimerJob { private MADE.Threading.Timer processTimer; public TimerJob() { processTimer = new MADE.Threading.Timer { Interval = TimeSpan.FromMinutes(1) }; processTimer.Tick += OnProcessTimerTick; } public void StartTimer() { processTimer.Start(); } public void StopTimer() { processTimer.Stop(); } private void OnProcessTimerTick(object sender, object e) { // Do work. } } The equivalent for the System.Threading.Timer would look like public class TimerJob { private System.Threading.Timer processTimer; public void StartTimer() { if (processTimer == null) { processTimer = new System.Threading.Timer( c => this.OnProcessTimerTick(), null, 0, (int)Math.Ceiling(TimeSpan.FromMinutes(1).TotalMilliseconds)); } else { processTimer.Change( 0, (int)Math.Ceiling(TimeSpan.FromMinutes(1).TotalMilliseconds)); } } public void StopTimer() { processTimer?.Change(Timeout.InfiniteTimeSpan, Timeout.InfiniteTimeSpan); } private void OnProcessTimerTick() { // Do work. } } As you can see, the MADE implementation performs the same actions, but is much more concise and a lot easier to understand."
  },
  "articles/features/web.html": {
    "href": "articles/features/web.html",
    "title": "Using the Web package | MADE.NET",
    "keywords": "Using the Web package The Web library contains a collection of helpers and extensions that sit on top of ASP.NET Core, to provide useful components to complement your web applications. Improved HttpContext exception handling with HttpContextExceptionsMiddleware The Web package contains a MADE.Web.Exceptions.HttpContextExceptionsMiddleware which can be used with your ASP.NET Core application to manage how exceptions are handled and errors are returned using JSON responses. Using the UseHttpContextExceptionHandling extension method on your IApplicationBuilder instance in the Startup of your web application, you can start taking advantage of improved error handling with MADE. Under the hood, exceptions are handled using IHttpContextExceptionHandler types which are registered with your application's IServiceCollection . The implementation has a basic catch-all Exception handler which returns an internal server error (500) when an unhandled exception is thrown. This can be registered alongside your own exception handlers in your Startup class. Registering the HttpContextExceptionsMiddleware and handlers Below is an example of configuring the exception handling middleware and exception handlers in your application's Startup class. // Startup.cs public void Configure( IApplicationBuilder app ) { // Registers the middleware for exception handling app. UseHttpContextExceptionHandling(); } public void ConfigureServices( IServiceCollection services ) { // Registers the default exception handler. services.AddHttpContextExceptionHandler<Exception, DefaultExceptionHandler> services.AddHttpContextExceptionHandler<MyCustomException, MyCustomExceptionHandler> } And this is an example of a custom exception handler. namespace MyApp.Exceptions { using System; using System.Net; using System.Threading.Tasks; using MADE.Web.Exceptions; using MADE.Web.Extensions; using Microsoft.AspNetCore.Http; public class MyCustomExceptionHandler : IHttpContextExceptionHandler<MyCustomException> { public async Task HandleAsync(HttpContext context, MyCustomException exception) { var response = new ExceptionResponse<MyCustomException>(\"MyCustomExceptionError\", \"An error occurred causing my custom exception to be thrown.\", exception); await context.Response.WriteJsonAsync(HttpStatusCode.InternalServerError, response); } } } Improving pagination support with PaginatedRequest and PaginatedResponse Pagination is a common concept for web requests to help improve performance of UIs and reduce network traffic by querying a subset of data. The PaginatedRequest and PaginatedResponse can be used together to help you achieve these performance improvements in your own web applications. The PaginatedRequest takes a page and page size parameter when constructed, and it automatically provides you with the Skip and Take properties that you can provide to your data queries. When you have your data from your request, you can construct a response using the PaginatedResponse which takes the data, the original page and page size parameters, and the number of available items. It will also provide the TotalPages that are available to allow a UI to generate a pagination user experience."
  },
  "articles/features/web-mvc.html": {
    "href": "articles/features/web-mvc.html",
    "title": "Using the Web MVC package | MADE.NET",
    "keywords": "Using the Web MVC package The Web MVC library is a complementary extension package to ASP.NET Core MVC applications, providing additional helpers for building applications following the MVC pattern. Returning an internal server error ObjectResult Out-of-the-box, the ASP.NET Core MVC packages don't contain a way of returning an internal server error (500) ObjectResult if an error occurs in your application. The InternalServerErrorObjectResult can be used to achieve this. It contains two constructors, one for providing the error, and another for providing a ModelStateDictionary model state containing validation errors."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Getting Started | MADE.NET",
    "keywords": "Getting Started MADE.NET is a toolkit of easy-to-use extensions, helpers, and controls to make app development easier for .NET developers. Whether you're building an ASP.NET Core Web API or a native UI application with Uno Platform, MADE.NET has something for everyone. MADE.NET has been built on common code from projects built by the MADE team, and is now a home for all those bits of code that you know you will reuse in another project! Most packages support the netstandard2.0 target framework, with some packages opting to support platform specific frameworks such as .NET 6/7/8 and UWP. Installation All packages listed below can be installed via NuGet or via the dotnet CLI by running the following command using a listed package name: dotnet add package MADE.Collections Available packages Package Version MADE.Collections MADE.Data.Converters MADE.Data.EFCore MADE.Data.Serialization MADE.Data.Validation MADE.Data.Validation.FluentValidation MADE.Diagnostics MADE.Foundation MADE.Networking MADE.Runtime MADE.Testing MADE.Threading MADE.Web MADE.Web.Mvc Collections The Collections package is designed to provide helpful extensions and additional types for working with enumerable objects in your applications. It includes features such as: GenericEqualityComparer, a IEqualityComparer implementation for comparing two objects using a simple comparison function. ObservableItemCollection, a ObservableCollection implementation that takes a INotifyPropertyChanged item type which manages and surfaces up property changed events. CollectionExtensions, a collection of extensions for enumerable objects including Update (to update an existing item), MakeEqualTo (to update a collection's items to be equal to another), and AreEquivalent (to compare two collections contain the same items ignoring order). Discover Collections Data.Converters The Data Converters package provides a collection of value converters and extensions to manipulate data in your applications. It includes features such as: DateTimeToStringValueConverter, a value converter that takes a DateTime string format parameter to convert a DateTime value to a String , with the capability to convert back. DateTimeExtensions, a collection of useful extensions for interacting with DateTime values including ToCurrentAge (to get an age in years based on a given date from today) and SetTime (to override the time part of a DateTime value). MathExtensions, a collection of extensions for common mathematic expressions including ToRadians (to convert a degrees value to radians). StringExtensions, a collection of extensions for manipulating String values such as ToTitleCase , ToDefaultCase , ToInt , ToBoolean , ToFloat , and ToDouble . Discover Data.Converters Data.EFCore The Data Entity Framework Core package provides a collection of helpers, extensions, and converters for applications taking advantage of the Microsoft.EntityFrameworkCore library. It includes features such as: DbContextExtensions, for additional helpers to EF data contexts such as asynchronous update & save. EntityBase, for providing a base definition for entities including a GUID identifier, created, and updated dates. UtcDateTimeConverter, to help with the storing of entity model dates in a UTC format. Discover Data.EFCore Data.Serialization The Data Serialization package provides a collection of helpers and extensions for data serialization in different types, e.g. JSON. It includes features such as: JsonTypeMigrationSerializationBinder, for migrating type names within a serialized JSON object. Discover Data.Serialization Data.Validation The Data Validation package is designed to provide out-of-the-box data validation to applications built with C#. It provides easy-to-use validation helpers such as: AlphaValidator, for validating a string contains only alpha characters. AlphaNumericValidator, for validating a string contains only alphanumeric characters. BetweenValidator, for validating whether a value is within a minimum and maximum range. EmailValidator, for validating whether a value is a valid email address using a regular expression. IpAddressValidator, for validating whether a value is a valid IP address. MaxValueValidator, for validating whether a value is below a maximum value. MinValueValidator, for validating whether a value is above a minimum value. RegexValidator, for validating a value based on a specified regular expression. RequiredValidator, for validating a value is not null, false, whitespace, or empty. Discover Data.Validation Diagnostics The Diagnostic package contains a set of simple application logging mechanisms for applications. It includes features such as: FileEventLogger, for logging debug, info, warning, error, and critical messages to a file. StopwatchHelper, for aiding with tracking time for multiple long running operations. AppDiagnostics, for providing an application-wide exception handler. Discover Diagnostics Networking The Networking package contains a collection of helpers for applications that use HttpClient for making network requests to APIs. It includes features such as: NetworkRequestManager, for managing a queue of HTTP network requests with success and error callbacks. JsonGetNetworkRequest, for making a HTTP GET request with a JSON response, deserializing to a specified type. JsonPostNetworkRequest, for making a HTTP POST request with a JSON payload, and a JSON response. JsonPutNetworkRequest, for making a HTTP PUT request with a JSON payload, and a JSON response. JsonPatchNetworkRequest, for making a HTTP PATCH request with a JSON payload, and a JSON response. JsonDeleteNetworkRequest, for making a HTTP DELETE request with a JSON response. StreamGetNetworkRequest, for making a HTTP GET request with a data stream response. Discover Networking Runtime The Runtime package provides additional types for .NET to provide extensibility over existing System types. This includes features such as: WeakReferenceCallback, a wrapper type for WeakReference which allows an action to be stored and invoked at a later point in time, if the object the action is associated with is still alive at the point of invocation. Discover Runtime Testing The Testing package is an extension library for assertions in unit testing projects, agnostic of unit testing framework. It provides additional assertions such as: CollectionAssertExtensions, a collection of extensions for asserting enumerable objects including ShouldBeEquivalentTo (comparing two collections to ensure they contain the same items ignoring order), and ShouldNotBeEquivalentTo (comparing two collection to ensure they do not contain the same items ignoring order). Discover Testing Threading The Threading package contains a collection of System.Threading extensions and helpers to improve the developer experience. It includes features such as: Timer, a modern take on System.Threading.Timer providing properties for configuring the Interval and DueTime , plus an event handler for Tick . It includes simple methods to Start and Stop the timer running. Discover Threading Web The Web library contains a collection of helpers and extensions that sit on top of ASP.NET Core, to provide useful components to complement your web applications. This includes features such as: PaginatedRequest, a simple request object that provides the expected return type, with properties for the current Page , the PageSize , and the number of items to Skip and Take . PaginatedResponse, a complementary response return type for the PaginatedRequest , with properties including the Items collection, the current Page and PageSize , plus the AvailableCount of requestable items, and the TotalPages based on the available count and page size requested. HttpContextExceptionsMiddleware, a middleware that manages the handling of exceptions thrown within a HttpContext to serve up meaningful exception details to the requesting client using exception handlers. Discover Web Web.Mvc The Web MVC library is a complementary extension package to ASP.NET Core MVC applications, providing additional helpers for building applications following the MVC pattern. Included in this package is: InternalServerErrorObjectResult, an ObjectResult type that returns an Internal Server Error (500) with the optional ModelStateDictionary of validation errors. Discover Web.Mvc"
  },
  "index.html": {
    "href": "index.html",
    "title": "Make App Development Easier | MADE.NET",
    "keywords": "Make app development easier with reusable code MADE.NET is a toolkit of reusable code libraries building applications. It streamlines the approach to get projects going. Learn more Supports .NET Standard 2.0+, 6, 7, 8 Windows WinUI, UWP, WPF, WinForms MAUI Android, iOS Uno Platform WebAssembly, Android, iOS, macOS, Linux Get data validation in seconds MADE provides a lightweight, extensible data validation framework for input values in your applications Improve data access with EF Core helpers Simple, easy-to-use Entity Framework Core helpers for common data modelling, querying, and data access functions Simplify your API requests Save time making API requests in your apps using MADE's network request handlers Cross-platform by default No matter what platform your app is running on, MADE.NET provides a consistent set of APIs for any .NET application MADE.NET is simple to install and it's easy to get started. Learn more Support MADE.NET If you'd like to support MADE.NET, considering donating to the project Support MADE.NET Contribute on GitHub MADE.NET is open source and you can contribute on GitHub Contribute to MADE.NET"
  },
  "README.html": {
    "href": "README.html",
    "title": "MADE.NET Documentation | MADE.NET",
    "keywords": "MADE.NET Documentation This folder contains source code for the generation of MADE.NET's documentation. Contributing to the docs Install dependencies Download and install docfx on your computer. MacOS brew install docfx Windows choco install docfx Running locally docfx .\\docfx.json --serve This will run the docs on http://localhost:8080"
  }
}